{"ast":null,"code":"/*!\n * Module dependencies.\n */\n'use strict';\n\nconst CoreMongooseArray = require('./core_array');\n\nconst arrayAtomicsSymbol = require('../helpers/symbols').arrayAtomicsSymbol;\n\nconst arrayParentSymbol = require('../helpers/symbols').arrayParentSymbol;\n\nconst arrayPathSymbol = require('../helpers/symbols').arrayPathSymbol;\n\nconst arraySchemaSymbol = require('../helpers/symbols').arraySchemaSymbol;\n\nconst _basePush = Array.prototype.push;\n/**\n * Mongoose Array constructor.\n *\n * ####NOTE:\n *\n * _Values always have to be passed to the constructor to initialize, otherwise `MongooseArray#push` will mark the array as modified._\n *\n * @param {Array} values\n * @param {String} path\n * @param {Document} doc parent document\n * @api private\n * @inherits Array\n * @see http://bit.ly/f6CnZU\n */\n\nfunction MongooseArray(values, path, doc, schematype) {\n  let arr;\n\n  if (Array.isArray(values)) {\n    const len = values.length; // Perf optimizations for small arrays: much faster to use `...` than `for` + `push`,\n    // but large arrays may cause stack overflows. And for arrays of length 0/1, just\n    // modifying the array is faster. Seems small, but adds up when you have a document\n    // with thousands of nested arrays.\n\n    if (len === 0) {\n      arr = new CoreMongooseArray();\n    } else if (len === 1) {\n      arr = new CoreMongooseArray(1);\n      arr[0] = values[0];\n    } else if (len < 10000) {\n      arr = new CoreMongooseArray();\n\n      _basePush.apply(arr, values);\n    } else {\n      arr = new CoreMongooseArray();\n\n      for (let i = 0; i < len; ++i) {\n        _basePush.call(arr, values[i]);\n      }\n    }\n\n    if (values[arrayAtomicsSymbol] != null) {\n      arr[arrayAtomicsSymbol] = values[arrayAtomicsSymbol];\n    }\n  } else {\n    arr = new CoreMongooseArray();\n  }\n\n  arr[arrayPathSymbol] = path; // Because doc comes from the context of another function, doc === global\n  // can happen if there was a null somewhere up the chain (see #3020)\n  // RB Jun 17, 2015 updated to check for presence of expected paths instead\n  // to make more proof against unusual node environments\n\n  if (doc != null && doc.$__ != null) {\n    arr[arrayParentSymbol] = doc;\n    arr[arraySchemaSymbol] = schematype || doc.schema.path(path);\n  }\n\n  return arr;\n}\n/*!\n * Module exports.\n */\n\n\nmodule.exports = exports = MongooseArray;","map":{"version":3,"sources":["/home/lucho/Desktop/Heros-SPA/node_modules/mongoose/lib/types/array.js"],"names":["CoreMongooseArray","require","arrayAtomicsSymbol","arrayParentSymbol","arrayPathSymbol","arraySchemaSymbol","_basePush","Array","prototype","push","MongooseArray","values","path","doc","schematype","arr","isArray","len","length","apply","i","call","$__","schema","module","exports"],"mappings":"AAAA;AACA;AACA;AAEA;;AAEA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,cAAD,CAAjC;;AAEA,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,oBAAD,CAAP,CAA8BC,kBAAzD;;AACA,MAAMC,iBAAiB,GAAGF,OAAO,CAAC,oBAAD,CAAP,CAA8BE,iBAAxD;;AACA,MAAMC,eAAe,GAAGH,OAAO,CAAC,oBAAD,CAAP,CAA8BG,eAAtD;;AACA,MAAMC,iBAAiB,GAAGJ,OAAO,CAAC,oBAAD,CAAP,CAA8BI,iBAAxD;;AAEA,MAAMC,SAAS,GAAGC,KAAK,CAACC,SAAN,CAAgBC,IAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,aAAT,CAAuBC,MAAvB,EAA+BC,IAA/B,EAAqCC,GAArC,EAA0CC,UAA1C,EAAsD;AACpD,MAAIC,GAAJ;;AAEA,MAAIR,KAAK,CAACS,OAAN,CAAcL,MAAd,CAAJ,EAA2B;AACzB,UAAMM,GAAG,GAAGN,MAAM,CAACO,MAAnB,CADyB,CAGzB;AACA;AACA;AACA;;AACA,QAAID,GAAG,KAAK,CAAZ,EAAe;AACbF,MAAAA,GAAG,GAAG,IAAIf,iBAAJ,EAAN;AACD,KAFD,MAEO,IAAIiB,GAAG,KAAK,CAAZ,EAAe;AACpBF,MAAAA,GAAG,GAAG,IAAIf,iBAAJ,CAAsB,CAAtB,CAAN;AACAe,MAAAA,GAAG,CAAC,CAAD,CAAH,GAASJ,MAAM,CAAC,CAAD,CAAf;AACD,KAHM,MAGA,IAAIM,GAAG,GAAG,KAAV,EAAiB;AACtBF,MAAAA,GAAG,GAAG,IAAIf,iBAAJ,EAAN;;AACAM,MAAAA,SAAS,CAACa,KAAV,CAAgBJ,GAAhB,EAAqBJ,MAArB;AACD,KAHM,MAGA;AACLI,MAAAA,GAAG,GAAG,IAAIf,iBAAJ,EAAN;;AACA,WAAK,IAAIoB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAApB,EAAyB,EAAEG,CAA3B,EAA8B;AAC5Bd,QAAAA,SAAS,CAACe,IAAV,CAAeN,GAAf,EAAoBJ,MAAM,CAACS,CAAD,CAA1B;AACD;AACF;;AAED,QAAIT,MAAM,CAACT,kBAAD,CAAN,IAA8B,IAAlC,EAAwC;AACtCa,MAAAA,GAAG,CAACb,kBAAD,CAAH,GAA0BS,MAAM,CAACT,kBAAD,CAAhC;AACD;AACF,GAzBD,MAyBO;AACLa,IAAAA,GAAG,GAAG,IAAIf,iBAAJ,EAAN;AACD;;AAEDe,EAAAA,GAAG,CAACX,eAAD,CAAH,GAAuBQ,IAAvB,CAhCoD,CAkCpD;AACA;AACA;AACA;;AACA,MAAIC,GAAG,IAAI,IAAP,IAAeA,GAAG,CAACS,GAAJ,IAAW,IAA9B,EAAoC;AAClCP,IAAAA,GAAG,CAACZ,iBAAD,CAAH,GAAyBU,GAAzB;AACAE,IAAAA,GAAG,CAACV,iBAAD,CAAH,GAAyBS,UAAU,IAAID,GAAG,CAACU,MAAJ,CAAWX,IAAX,CAAgBA,IAAhB,CAAvC;AACD;;AAED,SAAOG,GAAP;AACD;AAED;AACA;AACA;;;AAEAS,MAAM,CAACC,OAAP,GAAiBA,OAAO,GAAGf,aAA3B","sourcesContent":["/*!\n * Module dependencies.\n */\n\n'use strict';\n\nconst CoreMongooseArray = require('./core_array');\n\nconst arrayAtomicsSymbol = require('../helpers/symbols').arrayAtomicsSymbol;\nconst arrayParentSymbol = require('../helpers/symbols').arrayParentSymbol;\nconst arrayPathSymbol = require('../helpers/symbols').arrayPathSymbol;\nconst arraySchemaSymbol = require('../helpers/symbols').arraySchemaSymbol;\n\nconst _basePush = Array.prototype.push;\n\n/**\n * Mongoose Array constructor.\n *\n * ####NOTE:\n *\n * _Values always have to be passed to the constructor to initialize, otherwise `MongooseArray#push` will mark the array as modified._\n *\n * @param {Array} values\n * @param {String} path\n * @param {Document} doc parent document\n * @api private\n * @inherits Array\n * @see http://bit.ly/f6CnZU\n */\n\nfunction MongooseArray(values, path, doc, schematype) {\n  let arr;\n\n  if (Array.isArray(values)) {\n    const len = values.length;\n\n    // Perf optimizations for small arrays: much faster to use `...` than `for` + `push`,\n    // but large arrays may cause stack overflows. And for arrays of length 0/1, just\n    // modifying the array is faster. Seems small, but adds up when you have a document\n    // with thousands of nested arrays.\n    if (len === 0) {\n      arr = new CoreMongooseArray();\n    } else if (len === 1) {\n      arr = new CoreMongooseArray(1);\n      arr[0] = values[0];\n    } else if (len < 10000) {\n      arr = new CoreMongooseArray();\n      _basePush.apply(arr, values);\n    } else {\n      arr = new CoreMongooseArray();\n      for (let i = 0; i < len; ++i) {\n        _basePush.call(arr, values[i]);\n      }\n    }\n\n    if (values[arrayAtomicsSymbol] != null) {\n      arr[arrayAtomicsSymbol] = values[arrayAtomicsSymbol];\n    }\n  } else {\n    arr = new CoreMongooseArray();\n  }\n\n  arr[arrayPathSymbol] = path;\n\n  // Because doc comes from the context of another function, doc === global\n  // can happen if there was a null somewhere up the chain (see #3020)\n  // RB Jun 17, 2015 updated to check for presence of expected paths instead\n  // to make more proof against unusual node environments\n  if (doc != null && doc.$__ != null) {\n    arr[arrayParentSymbol] = doc;\n    arr[arraySchemaSymbol] = schematype || doc.schema.path(path);\n  }\n\n  return arr;\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = MongooseArray;\n"]},"metadata":{},"sourceType":"script"}