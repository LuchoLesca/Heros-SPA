{"ast":null,"code":"'use strict';\n/*!\n * Module dependencies.\n */\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst InternalCache = require('./internal');\n\nconst MongooseError = require('./error/index');\n\nconst MixedSchema = require('./schema/mixed');\n\nconst ObjectExpectedError = require('./error/objectExpected');\n\nconst ObjectParameterError = require('./error/objectParameter');\n\nconst ParallelValidateError = require('./error/parallelValidate');\n\nconst Schema = require('./schema');\n\nconst StrictModeError = require('./error/strict');\n\nconst ValidationError = require('./error/validation');\n\nconst ValidatorError = require('./error/validator');\n\nconst VirtualType = require('./virtualtype');\n\nconst promiseOrCallback = require('./helpers/promiseOrCallback');\n\nconst cleanModifiedSubpaths = require('./helpers/document/cleanModifiedSubpaths');\n\nconst compile = require('./helpers/document/compile').compile;\n\nconst defineKey = require('./helpers/document/compile').defineKey;\n\nconst flatten = require('./helpers/common').flatten;\n\nconst get = require('./helpers/get');\n\nconst getEmbeddedDiscriminatorPath = require('./helpers/document/getEmbeddedDiscriminatorPath');\n\nconst handleSpreadDoc = require('./helpers/document/handleSpreadDoc');\n\nconst idGetter = require('./plugins/idGetter');\n\nconst immediate = require('./helpers/immediate');\n\nconst isDefiningProjection = require('./helpers/projection/isDefiningProjection');\n\nconst isExclusive = require('./helpers/projection/isExclusive');\n\nconst inspect = require('util').inspect;\n\nconst internalToObjectOptions = require('./options').internalToObjectOptions;\n\nconst mpath = require('mpath');\n\nconst queryhelpers = require('./queryhelpers');\n\nconst utils = require('./utils');\n\nconst isPromise = require('./helpers/isPromise');\n\nconst clone = utils.clone;\nconst deepEqual = utils.deepEqual;\nconst isMongooseObject = utils.isMongooseObject;\nconst arrayAtomicsBackupSymbol = Symbol('mongoose.Array#atomicsBackup');\n\nconst arrayAtomicsSymbol = require('./helpers/symbols').arrayAtomicsSymbol;\n\nconst documentArrayParent = require('./helpers/symbols').documentArrayParent;\n\nconst documentIsModified = require('./helpers/symbols').documentIsModified;\n\nconst documentModifiedPaths = require('./helpers/symbols').documentModifiedPaths;\n\nconst documentSchemaSymbol = require('./helpers/symbols').documentSchemaSymbol;\n\nconst getSymbol = require('./helpers/symbols').getSymbol;\n\nconst populateModelSymbol = require('./helpers/symbols').populateModelSymbol;\n\nconst scopeSymbol = require('./helpers/symbols').scopeSymbol;\n\nconst schemaMixedSymbol = require('./schema/symbols').schemaMixedSymbol;\n\nlet DocumentArray;\nlet MongooseArray;\nlet Embedded;\nconst specialProperties = utils.specialProperties;\n/**\n * The core Mongoose document constructor. You should not call this directly,\n * the Mongoose [Model constructor](./api.html#Model) calls this for you.\n *\n * @param {Object} obj the values to set\n * @param {Object} [fields] optional object containing the fields which were selected in the query returning this document and any populated paths data\n * @param {Object} [options] various configuration options for the document\n * @param {Boolean} [options.defaults=true] if `false`, skip applying default values to this document.\n * @inherits NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter\n * @event `init`: Emitted on a document after it has been retrieved from the db and fully hydrated by Mongoose.\n * @event `save`: Emitted when the document is successfully saved\n * @api private\n */\n\nfunction Document(obj, fields, skipId, options) {\n  if (typeof skipId === 'object' && skipId != null) {\n    options = skipId;\n    skipId = options.skipId;\n  }\n\n  options = Object.assign({}, options);\n  const defaults = get(options, 'defaults', true);\n  options.defaults = defaults; // Support `browserDocument.js` syntax\n\n  if (this.$__schema == null) {\n    const _schema = utils.isObject(fields) && !fields.instanceOfSchema ? new Schema(fields) : fields;\n\n    this.$__setSchema(_schema);\n    fields = skipId;\n    skipId = options;\n    options = arguments[4] || {};\n  }\n\n  this.$__ = new InternalCache();\n  this.$__.emitter = new EventEmitter();\n  this.isNew = 'isNew' in options ? options.isNew : true;\n  this.errors = undefined;\n  this.$__.$options = options || {};\n  this.$locals = {};\n  this.$op = null;\n\n  if (obj != null && typeof obj !== 'object') {\n    throw new ObjectParameterError(obj, 'obj', 'Document');\n  }\n\n  const schema = this.$__schema;\n\n  if (typeof fields === 'boolean' || fields === 'throw') {\n    this.$__.strictMode = fields;\n    fields = undefined;\n  } else {\n    this.$__.strictMode = schema.options.strict;\n    this.$__.selected = fields;\n  }\n\n  const requiredPaths = schema.requiredPaths(true);\n\n  for (const path of requiredPaths) {\n    this.$__.activePaths.require(path);\n  }\n\n  this.$__.emitter.setMaxListeners(0);\n  let exclude = null; // determine if this doc is a result of a query with\n  // excluded fields\n\n  if (utils.isPOJO(fields)) {\n    exclude = isExclusive(fields);\n  }\n\n  const hasIncludedChildren = exclude === false && fields ? $__hasIncludedChildren(fields) : {};\n\n  if (this._doc == null) {\n    this.$__buildDoc(obj, fields, skipId, exclude, hasIncludedChildren, false); // By default, defaults get applied **before** setting initial values\n    // Re: gh-6155\n\n    if (defaults) {\n      $__applyDefaults(this, fields, skipId, exclude, hasIncludedChildren, true, {\n        isNew: this.isNew\n      });\n    }\n  }\n\n  if (obj) {\n    // Skip set hooks\n    if (this.$__original_set) {\n      this.$__original_set(obj, undefined, true);\n    } else {\n      this.$set(obj, undefined, true);\n    }\n\n    if (obj instanceof Document) {\n      this.isNew = obj.isNew;\n    }\n  } // Function defaults get applied **after** setting initial values so they\n  // see the full doc rather than an empty one, unless they opt out.\n  // Re: gh-3781, gh-6155\n\n\n  if (options.willInit && defaults) {\n    EventEmitter.prototype.once.call(this, 'init', () => {\n      $__applyDefaults(this, fields, skipId, exclude, hasIncludedChildren, false, options.skipDefaults, {\n        isNew: this.isNew\n      });\n    });\n  } else if (defaults) {\n    $__applyDefaults(this, fields, skipId, exclude, hasIncludedChildren, false, options.skipDefaults, {\n      isNew: this.isNew\n    });\n  }\n\n  this.$__._id = this._id;\n\n  if (!this.$__.strictMode && obj) {\n    const _this = this;\n\n    const keys = Object.keys(this._doc);\n    keys.forEach(function (key) {\n      if (!(key in schema.tree)) {\n        defineKey(key, null, _this);\n      }\n    });\n  }\n\n  applyQueue(this);\n}\n/*!\n * Document exposes the NodeJS event emitter API, so you can use\n * `on`, `once`, etc.\n */\n\n\nutils.each(['on', 'once', 'emit', 'listeners', 'removeListener', 'setMaxListeners', 'removeAllListeners', 'addListener'], function (emitterFn) {\n  Document.prototype[emitterFn] = function () {\n    return this.$__.emitter[emitterFn].apply(this.$__.emitter, arguments);\n  };\n});\nDocument.prototype.constructor = Document;\n\nfor (const i in EventEmitter.prototype) {\n  Document[i] = EventEmitter.prototype[i];\n}\n/**\n * The document's internal schema.\n *\n * @api private\n * @property schema\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.$__schema;\n/**\n * The document's schema.\n *\n * @api public\n * @property schema\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.schema;\n/**\n * Empty object that you can use for storing properties on the document. This\n * is handy for passing data to middleware without conflicting with Mongoose\n * internals.\n *\n * ####Example:\n *\n *     schema.pre('save', function() {\n *       // Mongoose will set `isNew` to `false` if `save()` succeeds\n *       this.$locals.wasNew = this.isNew;\n *     });\n *\n *     schema.post('save', function() {\n *       // Prints true if `isNew` was set before `save()`\n *       console.log(this.$locals.wasNew);\n *     });\n *\n * @api public\n * @property $locals\n * @memberOf Document\n * @instance\n */\n\nObject.defineProperty(Document.prototype, '$locals', {\n  configurable: false,\n  enumerable: false,\n  writable: true\n});\n/**\n * Boolean flag specifying if the document is new.\n *\n * @api public\n * @property isNew\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.isNew;\n/**\n * The string version of this documents _id.\n *\n * ####Note:\n *\n * This getter exists on all documents by default. The getter can be disabled by setting the `id` [option](/docs/guide.html#id) of its `Schema` to false at construction time.\n *\n *     new Schema({ name: String }, { id: false });\n *\n * @api public\n * @see Schema options /docs/guide.html#options\n * @property id\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.id;\n/**\n * Hash containing current validation errors.\n *\n * @api public\n * @property errors\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.errors;\n/**\n * A string containing the current operation that Mongoose is executing\n * on this document. May be `null`, `'save'`, `'validate'`, or `'remove'`.\n *\n * ####Example:\n *\n *     const doc = new Model({ name: 'test' });\n *     doc.$op; // null\n *\n *     const promise = doc.save();\n *     doc.$op; // 'save'\n *\n *     await promise;\n *     doc.$op; // null\n *\n * @api public\n * @property $op\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$op;\n/*!\n * ignore\n */\n\nfunction $__hasIncludedChildren(fields) {\n  const hasIncludedChildren = {};\n  const keys = Object.keys(fields);\n\n  for (const key of keys) {\n    const parts = key.split('.');\n    const c = [];\n\n    for (const part of parts) {\n      c.push(part);\n      hasIncludedChildren[c.join('.')] = 1;\n    }\n  }\n\n  return hasIncludedChildren;\n}\n/*!\n * ignore\n */\n\n\nfunction $__applyDefaults(doc, fields, skipId, exclude, hasIncludedChildren, isBeforeSetters, pathsToSkip) {\n  const paths = Object.keys(doc.$__schema.paths);\n  const plen = paths.length;\n\n  for (let i = 0; i < plen; ++i) {\n    let def;\n    let curPath = '';\n    const p = paths[i];\n\n    if (p === '_id' && skipId) {\n      continue;\n    }\n\n    const type = doc.$__schema.paths[p];\n    const path = type.splitPath();\n    const len = path.length;\n    let included = false;\n    let doc_ = doc._doc;\n\n    for (let j = 0; j < len; ++j) {\n      if (doc_ == null) {\n        break;\n      }\n\n      const piece = path[j];\n      curPath += (!curPath.length ? '' : '.') + piece;\n\n      if (exclude === true) {\n        if (curPath in fields) {\n          break;\n        }\n      } else if (exclude === false && fields && !included) {\n        if (curPath in fields) {\n          included = true;\n        } else if (!hasIncludedChildren[curPath]) {\n          break;\n        }\n      }\n\n      if (j === len - 1) {\n        if (doc_[piece] !== void 0) {\n          break;\n        }\n\n        if (typeof type.defaultValue === 'function') {\n          if (!type.defaultValue.$runBeforeSetters && isBeforeSetters) {\n            break;\n          }\n\n          if (type.defaultValue.$runBeforeSetters && !isBeforeSetters) {\n            break;\n          }\n        } else if (!isBeforeSetters) {\n          // Non-function defaults should always run **before** setters\n          continue;\n        }\n\n        if (pathsToSkip && pathsToSkip[curPath]) {\n          break;\n        }\n\n        if (fields && exclude !== null) {\n          if (exclude === true) {\n            // apply defaults to all non-excluded fields\n            if (p in fields) {\n              continue;\n            }\n\n            try {\n              def = type.getDefault(doc, false);\n            } catch (err) {\n              doc.invalidate(p, err);\n              break;\n            }\n\n            if (typeof def !== 'undefined') {\n              doc_[piece] = def;\n              doc.$__.activePaths.default(p);\n            }\n          } else if (included) {\n            // selected field\n            try {\n              def = type.getDefault(doc, false);\n            } catch (err) {\n              doc.invalidate(p, err);\n              break;\n            }\n\n            if (typeof def !== 'undefined') {\n              doc_[piece] = def;\n              doc.$__.activePaths.default(p);\n            }\n          }\n        } else {\n          try {\n            def = type.getDefault(doc, false);\n          } catch (err) {\n            doc.invalidate(p, err);\n            break;\n          }\n\n          if (typeof def !== 'undefined') {\n            doc_[piece] = def;\n            doc.$__.activePaths.default(p);\n          }\n        }\n      } else {\n        doc_ = doc_[piece];\n      }\n    }\n  }\n}\n/**\n * Builds the default doc structure\n *\n * @param {Object} obj\n * @param {Object} [fields]\n * @param {Boolean} [skipId]\n * @api private\n * @method $__buildDoc\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.$__buildDoc = function (obj, fields, skipId, exclude, hasIncludedChildren) {\n  const doc = {};\n  const paths = Object.keys(this.$__schema.paths). // Don't build up any paths that are underneath a map, we don't know\n  // what the keys will be\n  filter(p => !p.includes('$*'));\n  const plen = paths.length;\n  let ii = 0;\n\n  for (; ii < plen; ++ii) {\n    const p = paths[ii];\n\n    if (p === '_id') {\n      if (skipId) {\n        continue;\n      }\n\n      if (obj && '_id' in obj) {\n        continue;\n      }\n    }\n\n    const path = this.$__schema.paths[p].splitPath();\n    const len = path.length;\n    const last = len - 1;\n    let curPath = '';\n    let doc_ = doc;\n    let included = false;\n\n    for (let i = 0; i < len; ++i) {\n      const piece = path[i];\n      curPath += (!curPath.length ? '' : '.') + piece; // support excluding intermediary levels\n\n      if (exclude === true) {\n        if (curPath in fields) {\n          break;\n        }\n      } else if (exclude === false && fields && !included) {\n        if (curPath in fields) {\n          included = true;\n        } else if (!hasIncludedChildren[curPath]) {\n          break;\n        }\n      }\n\n      if (i < last) {\n        doc_ = doc_[piece] || (doc_[piece] = {});\n      }\n    }\n  }\n\n  this._doc = doc;\n};\n/*!\n * Converts to POJO when you use the document for querying\n */\n\n\nDocument.prototype.toBSON = function () {\n  return this.toObject(internalToObjectOptions);\n};\n/**\n * Initializes the document without setters or marking anything modified.\n *\n * Called internally after a document is returned from mongodb. Normally,\n * you do **not** need to call this function on your own.\n *\n * This function triggers `init` [middleware](/docs/middleware.html).\n * Note that `init` hooks are [synchronous](/docs/middleware.html#synchronous).\n *\n * @param {Object} doc document returned by mongo\n * @api public\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.init = function (doc, opts, fn) {\n  if (typeof opts === 'function') {\n    fn = opts;\n    opts = null;\n  }\n\n  this.$__init(doc, opts);\n\n  if (fn) {\n    fn(null, this);\n  }\n\n  return this;\n};\n/*!\n * ignore\n */\n\n\nDocument.prototype.$__init = function (doc, opts) {\n  this.isNew = false;\n  this.$init = true;\n  opts = opts || {}; // handle docs with populated paths\n  // If doc._id is not null or undefined\n\n  if (doc._id != null && opts.populated && opts.populated.length) {\n    const id = String(doc._id);\n\n    for (const item of opts.populated) {\n      if (item.isVirtual) {\n        this.populated(item.path, utils.getValue(item.path, doc), item);\n      } else {\n        this.populated(item.path, item._docs[id], item);\n      }\n\n      if (item._childDocs == null) {\n        continue;\n      }\n\n      for (const child of item._childDocs) {\n        if (child == null || child.$__ == null) {\n          continue;\n        }\n\n        child.$__.parent = this;\n      }\n\n      item._childDocs = [];\n    }\n  }\n\n  init(this, doc, this._doc, opts);\n  markArraySubdocsPopulated(this, opts.populated);\n  this.emit('init', this);\n  this.constructor.emit('init', this);\n  this.$__._id = this._id;\n  return this;\n};\n/*!\n * If populating a path within a document array, make sure each\n * subdoc within the array knows its subpaths are populated.\n *\n * ####Example:\n *     const doc = await Article.findOne().populate('comments.author');\n *     doc.comments[0].populated('author'); // Should be set\n */\n\n\nfunction markArraySubdocsPopulated(doc, populated) {\n  if (doc._id == null || populated == null || populated.length === 0) {\n    return;\n  }\n\n  const id = String(doc._id);\n\n  for (const item of populated) {\n    if (item.isVirtual) {\n      continue;\n    }\n\n    const path = item.path;\n    const pieces = path.split('.');\n\n    for (let i = 0; i < pieces.length - 1; ++i) {\n      const subpath = pieces.slice(0, i + 1).join('.');\n      const rest = pieces.slice(i + 1).join('.');\n      const val = doc.get(subpath);\n\n      if (val == null) {\n        continue;\n      }\n\n      if (val.isMongooseDocumentArray) {\n        for (let j = 0; j < val.length; ++j) {\n          val[j].populated(rest, item._docs[id] == null ? [] : item._docs[id][j], item);\n        }\n\n        break;\n      }\n    }\n  }\n}\n/*!\n * Init helper.\n *\n * @param {Object} self document instance\n * @param {Object} obj raw mongodb doc\n * @param {Object} doc object we are initializing\n * @api private\n */\n\n\nfunction init(self, obj, doc, opts, prefix) {\n  prefix = prefix || '';\n  const keys = Object.keys(obj);\n  const len = keys.length;\n  let schema;\n  let path;\n  let i;\n  let index = 0;\n\n  while (index < len) {\n    _init(index++);\n  }\n\n  function _init(index) {\n    i = keys[index];\n    path = prefix + i;\n    schema = self.$__schema.path(path); // Should still work if not a model-level discriminator, but should not be\n    // necessary. This is *only* to catch the case where we queried using the\n    // base model and the discriminated model has a projection\n\n    if (self.$__schema.$isRootDiscriminator && !self.$__isSelected(path)) {\n      return;\n    }\n\n    if (!schema && utils.isPOJO(obj[i])) {\n      // assume nested object\n      if (!doc[i]) {\n        doc[i] = {};\n      }\n\n      init(self, obj[i], doc[i], opts, path + '.');\n    } else if (!schema) {\n      doc[i] = obj[i];\n    } else {\n      if (obj[i] === null) {\n        doc[i] = schema._castNullish(null);\n      } else if (obj[i] !== undefined) {\n        const intCache = obj[i].$__ || {};\n        const wasPopulated = intCache.wasPopulated || null;\n\n        if (schema && !wasPopulated) {\n          try {\n            doc[i] = schema.cast(obj[i], self, true);\n          } catch (e) {\n            self.invalidate(e.path, new ValidatorError({\n              path: e.path,\n              message: e.message,\n              type: 'cast',\n              value: e.value,\n              reason: e\n            }));\n          }\n        } else {\n          doc[i] = obj[i];\n        }\n      } // mark as hydrated\n\n\n      if (!self.isModified(path)) {\n        self.$__.activePaths.init(path);\n      }\n    }\n  }\n}\n/**\n * Sends an update command with this document `_id` as the query selector.\n *\n * ####Example:\n *\n *     weirdCar.update({$inc: {wheels:1}}, { w: 1 }, callback);\n *\n * ####Valid options:\n *\n *  - same as in [Model.update](#model_Model.update)\n *\n * @see Model.update #model_Model.update\n * @param {Object} doc\n * @param {Object} options\n * @param {Function} callback\n * @return {Query}\n * @api public\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.update = function update() {\n  const args = utils.args(arguments);\n  args.unshift({\n    _id: this._id\n  });\n  const query = this.constructor.update.apply(this.constructor, args);\n\n  if (this.$session() != null) {\n    if (!('session' in query.options)) {\n      query.options.session = this.$session();\n    }\n  }\n\n  return query;\n};\n/**\n * Sends an updateOne command with this document `_id` as the query selector.\n *\n * ####Example:\n *\n *     weirdCar.updateOne({$inc: {wheels:1}}, { w: 1 }, callback);\n *\n * ####Valid options:\n *\n *  - same as in [Model.updateOne](#model_Model.updateOne)\n *\n * @see Model.updateOne #model_Model.updateOne\n * @param {Object} doc\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](/docs/api.html#query_Query-lean) and the [Mongoose lean tutorial](/docs/tutorials/lean.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.omitUndefined=false] If true, delete any properties whose value is `undefined` when casting an update. In other words, if this is set, Mongoose will delete `baz` from the update in `Model.updateOne({}, { foo: 'bar', baz: undefined })` before sending the update to the server.\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Function} callback\n * @return {Query}\n * @api public\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.updateOne = function updateOne(doc, options, callback) {\n  const query = this.constructor.updateOne({\n    _id: this._id\n  }, doc, options);\n  query.pre(cb => {\n    this.constructor._middleware.execPre('updateOne', this, [this], cb);\n  });\n  query.post(cb => {\n    this.constructor._middleware.execPost('updateOne', this, [this], {}, cb);\n  });\n\n  if (this.$session() != null) {\n    if (!('session' in query.options)) {\n      query.options.session = this.$session();\n    }\n  }\n\n  if (callback != null) {\n    return query.exec(callback);\n  }\n\n  return query;\n};\n/**\n * Sends a replaceOne command with this document `_id` as the query selector.\n *\n * ####Valid options:\n *\n *  - same as in [Model.replaceOne](https://mongoosejs.com/docs/api/model.html#model_Model.replaceOne)\n *\n * @see Model.replaceOne #model_Model.replaceOne\n * @param {Object} doc\n * @param {Object} options\n * @param {Function} callback\n * @return {Query}\n * @api public\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.replaceOne = function replaceOne() {\n  const args = utils.args(arguments);\n  args.unshift({\n    _id: this._id\n  });\n  return this.constructor.replaceOne.apply(this.constructor, args);\n};\n/**\n * Getter/setter around the session associated with this document. Used to\n * automatically set `session` if you `save()` a doc that you got from a\n * query with an associated session.\n *\n * ####Example:\n *\n *     const session = MyModel.startSession();\n *     const doc = await MyModel.findOne().session(session);\n *     doc.$session() === session; // true\n *     doc.$session(null);\n *     doc.$session() === null; // true\n *\n * If this is a top-level document, setting the session propagates to all child\n * docs.\n *\n * @param {ClientSession} [session] overwrite the current session\n * @return {ClientSession}\n * @method $session\n * @api public\n * @memberOf Document\n */\n\n\nDocument.prototype.$session = function $session(session) {\n  if (arguments.length === 0) {\n    return this.$__.session;\n  }\n\n  this.$__.session = session;\n\n  if (!this.ownerDocument) {\n    const subdocs = this.$getAllSubdocs();\n\n    for (const child of subdocs) {\n      child.$session(session);\n    }\n  }\n\n  return session;\n};\n/**\n * Overwrite all values in this document with the values of `obj`, except\n * for immutable properties. Behaves similarly to `set()`, except for it\n * unsets all properties that aren't in `obj`.\n *\n * @param {Object} obj the object to overwrite this document with\n * @method overwrite\n * @name overwrite\n * @memberOf Document\n * @instance\n * @api public\n */\n\n\nDocument.prototype.overwrite = function overwrite(obj) {\n  const keys = Array.from(new Set(Object.keys(this._doc).concat(Object.keys(obj))));\n\n  for (const key of keys) {\n    if (key === '_id') {\n      continue;\n    } // Explicitly skip version key\n\n\n    if (this.$__schema.options.versionKey && key === this.$__schema.options.versionKey) {\n      continue;\n    }\n\n    if (this.$__schema.options.discriminatorKey && key === this.$__schema.options.discriminatorKey) {\n      continue;\n    }\n\n    this.$set(key, obj[key]);\n  }\n\n  return this;\n};\n/**\n * Alias for `set()`, used internally to avoid conflicts\n *\n * @param {String|Object} path path or object of key/vals to set\n * @param {Any} val the value to set\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for \"on-the-fly\" attributes\n * @param {Object} [options] optionally specify options that modify the behavior of the set\n * @method $set\n * @name $set\n * @memberOf Document\n * @instance\n * @api public\n */\n\n\nDocument.prototype.$set = function $set(path, val, type, options) {\n  if (utils.isPOJO(type)) {\n    options = type;\n    type = undefined;\n  }\n\n  options = options || {};\n  const merge = options.merge;\n  const adhoc = type && type !== true;\n  const constructing = type === true;\n  let adhocs;\n  let keys;\n  let i = 0;\n  let pathtype;\n  let key;\n  let prefix;\n  const strict = 'strict' in options ? options.strict : this.$__.strictMode;\n\n  if (adhoc) {\n    adhocs = this.$__.adhocPaths || (this.$__.adhocPaths = {});\n    adhocs[path] = this.$__schema.interpretAsType(path, type, this.$__schema.options);\n  }\n\n  if (path == null) {\n    const _ = path;\n    path = val;\n    val = _;\n  } else if (typeof path !== 'string') {\n    // new Document({ key: val })\n    if (path instanceof Document) {\n      if (path.$__isNested) {\n        path = path.toObject();\n      } else {\n        path = path._doc;\n      }\n    }\n\n    if (path == null) {\n      const _ = path;\n      path = val;\n      val = _;\n    }\n\n    prefix = val ? val + '.' : '';\n    keys = Object.keys(path);\n    const len = keys.length; // `_skipMinimizeTopLevel` is because we may have deleted the top-level\n    // nested key to ensure key order.\n\n    const _skipMinimizeTopLevel = get(options, '_skipMinimizeTopLevel', false);\n\n    if (len === 0 && _skipMinimizeTopLevel) {\n      delete options._skipMinimizeTopLevel;\n\n      if (val) {\n        this.$set(val, {});\n      }\n\n      return this;\n    }\n\n    for (let i = 0; i < len; ++i) {\n      key = keys[i];\n      const pathName = prefix + key;\n      pathtype = this.$__schema.pathType(pathName); // On initial set, delete any nested keys if we're going to overwrite\n      // them to ensure we keep the user's key order.\n\n      if (type === true && !prefix && path[key] != null && pathtype === 'nested' && this._doc[key] != null && Object.keys(this._doc[key]).length === 0) {\n        delete this._doc[key]; // Make sure we set `{}` back even if we minimize re: gh-8565\n\n        options = Object.assign({}, options, {\n          _skipMinimizeTopLevel: true\n        });\n      }\n\n      const someCondition = typeof path[key] === 'object' && !utils.isNativeObject(path[key]) && !utils.isMongooseType(path[key]) && path[key] != null && pathtype !== 'virtual' && pathtype !== 'real' && pathtype !== 'adhocOrUndefined' && !(this.$__path(pathName) instanceof MixedSchema) && !(this.$__schema.paths[pathName] && this.$__schema.paths[pathName].options && this.$__schema.paths[pathName].options.ref);\n\n      if (someCondition) {\n        this.$__.$setCalled.add(prefix + key);\n        this.$set(path[key], prefix + key, constructing, options);\n      } else if (strict) {\n        // Don't overwrite defaults with undefined keys (gh-3981) (gh-9039)\n        if (constructing && path[key] === void 0 && this.get(pathName) !== void 0) {\n          continue;\n        }\n\n        if (pathtype === 'adhocOrUndefined') {\n          pathtype = getEmbeddedDiscriminatorPath(this, pathName, {\n            typeOnly: true\n          });\n        }\n\n        if (pathtype === 'real' || pathtype === 'virtual') {\n          // Check for setting single embedded schema to document (gh-3535)\n          let p = path[key];\n\n          if (this.$__schema.paths[pathName] && this.$__schema.paths[pathName].$isSingleNested && path[key] instanceof Document) {\n            p = p.toObject({\n              virtuals: false,\n              transform: false\n            });\n          }\n\n          this.$set(prefix + key, p, constructing, options);\n        } else if (pathtype === 'nested' && path[key] instanceof Document) {\n          this.$set(prefix + key, path[key].toObject({\n            transform: false\n          }), constructing, options);\n        } else if (strict === 'throw') {\n          if (pathtype === 'nested') {\n            throw new ObjectExpectedError(key, path[key]);\n          } else {\n            throw new StrictModeError(key);\n          }\n        }\n      } else if (path[key] !== void 0) {\n        this.$set(prefix + key, path[key], constructing, options);\n      }\n    }\n\n    return this;\n  } else {\n    this.$__.$setCalled.add(path);\n  }\n\n  let pathType = this.$__schema.pathType(path);\n\n  if (pathType === 'adhocOrUndefined') {\n    pathType = getEmbeddedDiscriminatorPath(this, path, {\n      typeOnly: true\n    });\n  } // Assume this is a Mongoose document that was copied into a POJO using\n  // `Object.assign()` or `{...doc}`\n\n\n  val = handleSpreadDoc(val);\n\n  if (pathType === 'nested' && val) {\n    if (typeof val === 'object' && val != null) {\n      const hasPriorVal = this.$__.savedState != null && this.$__.savedState.hasOwnProperty(path);\n\n      if (this.$__.savedState != null && !this.isNew && !this.$__.savedState.hasOwnProperty(path)) {\n        const priorVal = this.$__getValue(path);\n        this.$__.savedState[path] = priorVal;\n        const keys = Object.keys(priorVal || {});\n\n        for (const key of keys) {\n          this.$__.savedState[path + '.' + key] = priorVal[key];\n        }\n      }\n\n      if (!merge) {\n        this.$__setValue(path, null);\n        cleanModifiedSubpaths(this, path);\n      } else {\n        return this.$set(val, path, constructing);\n      }\n\n      const keys = Object.keys(val);\n      this.$__setValue(path, {});\n\n      for (const key of keys) {\n        this.$set(path + '.' + key, val[key], constructing);\n      }\n\n      if (hasPriorVal && utils.deepEqual(this.$__.savedState[path], val)) {\n        this.unmarkModified(path);\n      } else {\n        this.markModified(path);\n      }\n\n      cleanModifiedSubpaths(this, path, {\n        skipDocArrays: true\n      });\n      return this;\n    }\n\n    this.invalidate(path, new MongooseError.CastError('Object', val, path));\n    return this;\n  }\n\n  let schema;\n  const parts = path.indexOf('.') === -1 ? [path] : path.split('.'); // Might need to change path for top-level alias\n\n  if (typeof this.$__schema.aliases[parts[0]] == 'string') {\n    parts[0] = this.$__schema.aliases[parts[0]];\n  }\n\n  if (pathType === 'adhocOrUndefined' && strict) {\n    // check for roots that are Mixed types\n    let mixed;\n\n    for (i = 0; i < parts.length; ++i) {\n      const subpath = parts.slice(0, i + 1).join('.'); // If path is underneath a virtual, bypass everything and just set it.\n\n      if (i + 1 < parts.length && this.$__schema.pathType(subpath) === 'virtual') {\n        mpath.set(path, val, this);\n        return this;\n      }\n\n      schema = this.$__schema.path(subpath);\n\n      if (schema == null) {\n        continue;\n      }\n\n      if (schema instanceof MixedSchema) {\n        // allow changes to sub paths of mixed types\n        mixed = true;\n        break;\n      }\n    }\n\n    if (schema == null) {\n      // Check for embedded discriminators\n      schema = getEmbeddedDiscriminatorPath(this, path);\n    }\n\n    if (!mixed && !schema) {\n      if (strict === 'throw') {\n        throw new StrictModeError(path);\n      }\n\n      return this;\n    }\n  } else if (pathType === 'virtual') {\n    schema = this.$__schema.virtualpath(path);\n    schema.applySetters(val, this);\n    return this;\n  } else {\n    schema = this.$__path(path);\n  } // gh-4578, if setting a deeply nested path that doesn't exist yet, create it\n\n\n  let cur = this._doc;\n  let curPath = '';\n\n  for (i = 0; i < parts.length - 1; ++i) {\n    cur = cur[parts[i]];\n    curPath += (curPath.length > 0 ? '.' : '') + parts[i];\n\n    if (!cur) {\n      this.$set(curPath, {}); // Hack re: gh-5800. If nested field is not selected, it probably exists\n      // so `MongoError: cannot use the part (nested of nested.num) to\n      // traverse the element ({nested: null})` is not likely. If user gets\n      // that error, its their fault for now. We should reconsider disallowing\n      // modifying not selected paths for 6.x\n\n      if (!this.$__isSelected(curPath)) {\n        this.unmarkModified(curPath);\n      }\n\n      cur = this.$__getValue(curPath);\n    }\n  }\n\n  let pathToMark; // When using the $set operator the path to the field must already exist.\n  // Else mongodb throws: \"LEFT_SUBFIELD only supports Object\"\n\n  if (parts.length <= 1) {\n    pathToMark = path;\n  } else {\n    for (i = 0; i < parts.length; ++i) {\n      const subpath = parts.slice(0, i + 1).join('.');\n\n      if (this.get(subpath, null, {\n        getters: false\n      }) === null) {\n        pathToMark = subpath;\n        break;\n      }\n    }\n\n    if (!pathToMark) {\n      pathToMark = path;\n    }\n  } // if this doc is being constructed we should not trigger getters\n\n\n  const priorVal = (() => {\n    if (this.$__.$options.priorDoc != null) {\n      return this.$__.$options.priorDoc.$__getValue(path);\n    }\n\n    if (constructing) {\n      return void 0;\n    }\n\n    return this.$__getValue(path);\n  })();\n\n  if (!schema) {\n    this.$__set(pathToMark, path, constructing, parts, schema, val, priorVal);\n    return this;\n  } // If overwriting a subdocument path, make sure to clear out\n  // any errors _before_ setting, so new errors that happen\n  // get persisted. Re: #9080\n\n\n  if (schema.$isSingleNested || schema.$isMongooseArray) {\n    _markValidSubpaths(this, path);\n  }\n\n  if (schema.$isSingleNested && val != null && merge) {\n    if (val instanceof Document) {\n      val = val.toObject({\n        virtuals: false,\n        transform: false\n      });\n    }\n\n    const keys = Object.keys(val);\n\n    for (const key of keys) {\n      this.$set(path + '.' + key, val[key], constructing, options);\n    }\n\n    return this;\n  }\n\n  let shouldSet = true;\n\n  try {\n    // If the user is trying to set a ref path to a document with\n    // the correct model name, treat it as populated\n    const refMatches = (() => {\n      if (schema.options == null) {\n        return false;\n      }\n\n      if (!(val instanceof Document)) {\n        return false;\n      }\n\n      const model = val.constructor; // Check ref\n\n      const ref = schema.options.ref;\n\n      if (ref != null && (ref === model.modelName || ref === model.baseModelName)) {\n        return true;\n      } // Check refPath\n\n\n      const refPath = schema.options.refPath;\n\n      if (refPath == null) {\n        return false;\n      }\n\n      const modelName = val.get(refPath);\n      return modelName === model.modelName || modelName === model.baseModelName;\n    })();\n\n    let didPopulate = false;\n\n    if (refMatches && val instanceof Document) {\n      this.populated(path, val._id, {\n        [populateModelSymbol]: val.constructor\n      });\n      val.$__.wasPopulated = true;\n      didPopulate = true;\n    }\n\n    let popOpts;\n\n    if (schema.options && Array.isArray(schema.options[this.$__schema.options.typeKey]) && schema.options[this.$__schema.options.typeKey].length && schema.options[this.$__schema.options.typeKey][0].ref && _isManuallyPopulatedArray(val, schema.options[this.$__schema.options.typeKey][0].ref)) {\n      if (this.ownerDocument) {\n        popOpts = {\n          [populateModelSymbol]: val[0].constructor\n        };\n        this.ownerDocument().populated(this.$__fullPath(path), val.map(function (v) {\n          return v._id;\n        }), popOpts);\n      } else {\n        popOpts = {\n          [populateModelSymbol]: val[0].constructor\n        };\n        this.populated(path, val.map(function (v) {\n          return v._id;\n        }), popOpts);\n      }\n\n      for (const doc of val) {\n        doc.$__.wasPopulated = true;\n      }\n\n      didPopulate = true;\n    }\n\n    if (this.$__schema.singleNestedPaths[path] == null) {\n      // If this path is underneath a single nested schema, we'll call the setter\n      // later in `$__set()` because we don't take `_doc` when we iterate through\n      // a single nested doc. That's to make sure we get the correct context.\n      // Otherwise we would double-call the setter, see gh-7196.\n      val = schema.applySetters(val, this, false, priorVal);\n    }\n\n    if (schema.$isMongooseDocumentArray && Array.isArray(val) && val.length > 0 && val[0] != null && val[0].$__ != null && val[0].$__.populated != null) {\n      const populatedPaths = Object.keys(val[0].$__.populated);\n\n      for (const populatedPath of populatedPaths) {\n        this.populated(path + '.' + populatedPath, val.map(v => v.populated(populatedPath)), val[0].$__.populated[populatedPath].options);\n      }\n\n      didPopulate = true;\n    }\n\n    if (!didPopulate && this.$__.populated) {\n      // If this array partially contains populated documents, convert them\n      // all to ObjectIds re: #8443\n      if (Array.isArray(val) && this.$__.populated[path]) {\n        for (let i = 0; i < val.length; ++i) {\n          if (val[i] instanceof Document) {\n            val[i] = val[i]._id;\n          }\n        }\n      }\n\n      delete this.$__.populated[path];\n    }\n\n    if (schema.$isSingleNested && val != null) {\n      _checkImmutableSubpaths(val, schema, priorVal);\n    }\n\n    this.$markValid(path);\n  } catch (e) {\n    if (e instanceof MongooseError.StrictModeError && e.isImmutableError) {\n      this.invalidate(path, e);\n    } else if (e instanceof MongooseError.CastError) {\n      this.invalidate(e.path, e);\n\n      if (e.$originalErrorPath) {\n        this.invalidate(path, new MongooseError.CastError(schema.instance, val, path, e.$originalErrorPath));\n      }\n    } else {\n      this.invalidate(path, new MongooseError.CastError(schema.instance, val, path, e));\n    }\n\n    shouldSet = false;\n  }\n\n  if (shouldSet) {\n    this.$__set(pathToMark, path, constructing, parts, schema, val, priorVal);\n\n    if (this.$__.savedState != null) {\n      if (!this.isNew && !this.$__.savedState.hasOwnProperty(path)) {\n        this.$__.savedState[path] = priorVal;\n      } else if (this.$__.savedState.hasOwnProperty(path) && utils.deepEqual(val, this.$__.savedState[path])) {\n        this.unmarkModified(path);\n      }\n    }\n  }\n\n  if (schema.$isSingleNested && (this.isDirectModified(path) || val == null)) {\n    cleanModifiedSubpaths(this, path);\n  }\n\n  return this;\n};\n/*!\n * ignore\n */\n\n\nfunction _isManuallyPopulatedArray(val, ref) {\n  if (!Array.isArray(val)) {\n    return false;\n  }\n\n  if (val.length === 0) {\n    return false;\n  }\n\n  for (const el of val) {\n    if (!(el instanceof Document)) {\n      return false;\n    }\n\n    const modelName = el.constructor.modelName;\n\n    if (modelName == null) {\n      return false;\n    }\n\n    if (el.constructor.modelName != ref && el.constructor.baseModelName != ref) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Sets the value of a path, or many paths.\n *\n * ####Example:\n *\n *     // path, value\n *     doc.set(path, value)\n *\n *     // object\n *     doc.set({\n *         path  : value\n *       , path2 : {\n *            path  : value\n *         }\n *     })\n *\n *     // on-the-fly cast to number\n *     doc.set(path, value, Number)\n *\n *     // on-the-fly cast to string\n *     doc.set(path, value, String)\n *\n *     // changing strict mode behavior\n *     doc.set(path, value, { strict: false });\n *\n * @param {String|Object} path path or object of key/vals to set\n * @param {Any} val the value to set\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for \"on-the-fly\" attributes\n * @param {Object} [options] optionally specify options that modify the behavior of the set\n * @api public\n * @method set\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.set = Document.prototype.$set;\n/**\n * Determine if we should mark this change as modified.\n *\n * @return {Boolean}\n * @api private\n * @method $__shouldModify\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__shouldModify = function (pathToMark, path, constructing, parts, schema, val, priorVal) {\n  if (this.isNew) {\n    return true;\n  } // Re: the note about gh-7196, `val` is the raw value without casting or\n  // setters if the full path is under a single nested subdoc because we don't\n  // want to double run setters. So don't set it as modified. See gh-7264.\n\n\n  if (this.$__schema.singleNestedPaths[path] != null) {\n    return false;\n  }\n\n  if (val === void 0 && !this.$__isSelected(path)) {\n    // when a path is not selected in a query, its initial\n    // value will be undefined.\n    return true;\n  }\n\n  if (val === void 0 && path in this.$__.activePaths.states.default) {\n    // we're just unsetting the default value which was never saved\n    return false;\n  } // gh-3992: if setting a populated field to a doc, don't mark modified\n  // if they have the same _id\n\n\n  if (this.populated(path) && val instanceof Document && deepEqual(val._id, priorVal)) {\n    return false;\n  }\n\n  if (!deepEqual(val, priorVal || utils.getValue(path, this))) {\n    return true;\n  }\n\n  if (!constructing && val !== null && val !== undefined && path in this.$__.activePaths.states.default && deepEqual(val, schema.getDefault(this, constructing))) {\n    // a path with a default was $unset on the server\n    // and the user is setting it to the same value again\n    return true;\n  }\n\n  return false;\n};\n/**\n * Handles the actual setting of the value and marking the path modified if appropriate.\n *\n * @api private\n * @method $__set\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.$__set = function (pathToMark, path, constructing, parts, schema, val, priorVal) {\n  Embedded = Embedded || require('./types/embedded');\n  const shouldModify = this.$__shouldModify(pathToMark, path, constructing, parts, schema, val, priorVal);\n\n  const _this = this;\n\n  if (shouldModify) {\n    this.markModified(pathToMark); // handle directly setting arrays (gh-1126)\n\n    MongooseArray || (MongooseArray = require('./types/array'));\n\n    if (val && val.isMongooseArray) {\n      val._registerAtomic('$set', val); // Update embedded document parent references (gh-5189)\n\n\n      if (val.isMongooseDocumentArray) {\n        val.forEach(function (item) {\n          item && item.__parentArray && (item.__parentArray = val);\n        });\n      } // Small hack for gh-1638: if we're overwriting the entire array, ignore\n      // paths that were modified before the array overwrite\n\n\n      this.$__.activePaths.forEach(function (modifiedPath) {\n        if (modifiedPath.startsWith(path + '.')) {\n          _this.$__.activePaths.ignore(modifiedPath);\n        }\n      });\n    }\n  }\n\n  let obj = this._doc;\n  let i = 0;\n  const l = parts.length;\n  let cur = '';\n\n  for (; i < l; i++) {\n    const next = i + 1;\n    const last = next === l;\n    cur += cur ? '.' + parts[i] : parts[i];\n\n    if (specialProperties.has(parts[i])) {\n      return;\n    }\n\n    if (last) {\n      if (obj instanceof Map) {\n        obj.set(parts[i], val);\n      } else {\n        obj[parts[i]] = val;\n      }\n    } else {\n      if (utils.isPOJO(obj[parts[i]])) {\n        obj = obj[parts[i]];\n      } else if (obj[parts[i]] && obj[parts[i]] instanceof Embedded) {\n        obj = obj[parts[i]];\n      } else if (obj[parts[i]] && obj[parts[i]].$isSingleNested) {\n        obj = obj[parts[i]];\n      } else if (obj[parts[i]] && Array.isArray(obj[parts[i]])) {\n        obj = obj[parts[i]];\n      } else {\n        obj[parts[i]] = obj[parts[i]] || {};\n        obj = obj[parts[i]];\n      }\n    }\n  }\n};\n/**\n * Gets a raw value from a path (no getters)\n *\n * @param {String} path\n * @api private\n */\n\n\nDocument.prototype.$__getValue = function (path) {\n  return utils.getValue(path, this._doc);\n};\n/**\n * Sets a raw value for a path (no casting, setters, transformations)\n *\n * @param {String} path\n * @param {Object} value\n * @api private\n */\n\n\nDocument.prototype.$__setValue = function (path, val) {\n  utils.setValue(path, val, this._doc);\n  return this;\n};\n/**\n * Returns the value of a path.\n *\n * ####Example\n *\n *     // path\n *     doc.get('age') // 47\n *\n *     // dynamic casting to a string\n *     doc.get('age', String) // \"47\"\n *\n * @param {String} path\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for on-the-fly attributes\n * @param {Object} [options]\n * @param {Boolean} [options.virtuals=false] Apply virtuals before getting this path\n * @param {Boolean} [options.getters=true] If false, skip applying getters and just get the raw value\n * @api public\n */\n\n\nDocument.prototype.get = function (path, type, options) {\n  let adhoc;\n  options = options || {};\n\n  if (type) {\n    adhoc = this.$__schema.interpretAsType(path, type, this.$__schema.options);\n  }\n\n  let schema = this.$__path(path);\n\n  if (schema == null) {\n    schema = this.$__schema.virtualpath(path);\n  }\n\n  if (schema instanceof MixedSchema) {\n    const virtual = this.$__schema.virtualpath(path);\n\n    if (virtual != null) {\n      schema = virtual;\n    }\n  }\n\n  const pieces = path.indexOf('.') === -1 ? [path] : path.split('.');\n  let obj = this._doc;\n\n  if (schema instanceof VirtualType) {\n    return schema.applyGetters(void 0, this);\n  } // Might need to change path for top-level alias\n\n\n  if (typeof this.$__schema.aliases[pieces[0]] == 'string') {\n    pieces[0] = this.$__schema.aliases[pieces[0]];\n  }\n\n  for (let i = 0, l = pieces.length; i < l; i++) {\n    if (obj && obj._doc) {\n      obj = obj._doc;\n    }\n\n    if (obj == null) {\n      obj = void 0;\n    } else if (obj instanceof Map) {\n      obj = obj.get(pieces[i], {\n        getters: false\n      });\n    } else if (i === l - 1) {\n      obj = utils.getValue(pieces[i], obj);\n    } else {\n      obj = obj[pieces[i]];\n    }\n  }\n\n  if (adhoc) {\n    obj = adhoc.cast(obj);\n  }\n\n  if (schema != null && options.getters !== false) {\n    obj = schema.applyGetters(obj, this);\n  } else if (this.$__schema.nested[path] && options.virtuals) {\n    // Might need to apply virtuals if this is a nested path\n    return applyVirtuals(this, utils.clone(obj) || {}, {\n      path: path\n    });\n  }\n\n  return obj;\n};\n/*!\n * ignore\n */\n\n\nDocument.prototype[getSymbol] = Document.prototype.get;\n/**\n * Returns the schematype for the given `path`.\n *\n * @param {String} path\n * @api private\n * @method $__path\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__path = function (path) {\n  const adhocs = this.$__.adhocPaths;\n  const adhocType = adhocs && adhocs.hasOwnProperty(path) ? adhocs[path] : null;\n\n  if (adhocType) {\n    return adhocType;\n  }\n\n  return this.$__schema.path(path);\n};\n/**\n * Marks the path as having pending changes to write to the db.\n *\n * _Very helpful when using [Mixed](./schematypes.html#mixed) types._\n *\n * ####Example:\n *\n *     doc.mixed.type = 'changed';\n *     doc.markModified('mixed.type');\n *     doc.save() // changes to mixed.type are now persisted\n *\n * @param {String} path the path to mark modified\n * @param {Document} [scope] the scope to run validators with\n * @api public\n */\n\n\nDocument.prototype.markModified = function (path, scope) {\n  this.$__.activePaths.modify(path);\n\n  if (scope != null && !this.ownerDocument) {\n    this.$__.pathsToScopes[path] = scope;\n  }\n};\n/**\n * Clears the modified state on the specified path.\n *\n * ####Example:\n *\n *     doc.foo = 'bar';\n *     doc.unmarkModified('foo');\n *     doc.save(); // changes to foo will not be persisted\n *\n * @param {String} path the path to unmark modified\n * @api public\n */\n\n\nDocument.prototype.unmarkModified = function (path) {\n  this.$__.activePaths.init(path);\n  delete this.$__.pathsToScopes[path];\n};\n/**\n * Don't run validation on this path or persist changes to this path.\n *\n * ####Example:\n *\n *     doc.foo = null;\n *     doc.$ignore('foo');\n *     doc.save(); // changes to foo will not be persisted and validators won't be run\n *\n * @memberOf Document\n * @instance\n * @method $ignore\n * @param {String} path the path to ignore\n * @api public\n */\n\n\nDocument.prototype.$ignore = function (path) {\n  this.$__.activePaths.ignore(path);\n};\n/**\n * Returns the list of paths that have been directly modified. A direct\n * modified path is a path that you explicitly set, whether via `doc.foo = 'bar'`,\n * `Object.assign(doc, { foo: 'bar' })`, or `doc.set('foo', 'bar')`.\n *\n * A path `a` may be in `modifiedPaths()` but not in `directModifiedPaths()`\n * because a child of `a` was directly modified.\n *\n * ####Example\n *     const schema = new Schema({ foo: String, nested: { bar: String } });\n *     const Model = mongoose.model('Test', schema);\n *     await Model.create({ foo: 'original', nested: { bar: 'original' } });\n *\n *     const doc = await Model.findOne();\n *     doc.nested.bar = 'modified';\n *     doc.directModifiedPaths(); // ['nested.bar']\n *     doc.modifiedPaths(); // ['nested', 'nested.bar']\n *\n * @return {Array}\n * @api public\n */\n\n\nDocument.prototype.directModifiedPaths = function () {\n  return Object.keys(this.$__.activePaths.states.modify);\n};\n/**\n * Returns true if the given path is nullish or only contains empty objects.\n * Useful for determining whether this subdoc will get stripped out by the\n * [minimize option](/docs/guide.html#minimize).\n *\n * ####Example:\n *     const schema = new Schema({ nested: { foo: String } });\n *     const Model = mongoose.model('Test', schema);\n *     const doc = new Model({});\n *     doc.$isEmpty('nested'); // true\n *     doc.nested.$isEmpty(); // true\n *\n *     doc.nested.foo = 'bar';\n *     doc.$isEmpty('nested'); // false\n *     doc.nested.$isEmpty(); // false\n *\n * @memberOf Document\n * @instance\n * @api public\n * @method $isEmpty\n * @return {Boolean}\n */\n\n\nDocument.prototype.$isEmpty = function (path) {\n  const isEmptyOptions = {\n    minimize: true,\n    virtuals: false,\n    getters: false,\n    transform: false\n  };\n\n  if (arguments.length > 0) {\n    const v = this.get(path);\n\n    if (v == null) {\n      return true;\n    }\n\n    if (typeof v !== 'object') {\n      return false;\n    }\n\n    if (utils.isPOJO(v)) {\n      return _isEmpty(v);\n    }\n\n    return Object.keys(v.toObject(isEmptyOptions)).length === 0;\n  }\n\n  return Object.keys(this.toObject(isEmptyOptions)).length === 0;\n};\n\nfunction _isEmpty(v) {\n  if (v == null) {\n    return true;\n  }\n\n  if (typeof v !== 'object' || Array.isArray(v)) {\n    return false;\n  }\n\n  for (const key of Object.keys(v)) {\n    if (!_isEmpty(v[key])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Returns the list of paths that have been modified.\n *\n * @param {Object} [options]\n * @param {Boolean} [options.includeChildren=false] if true, returns children of modified paths as well. For example, if false, the list of modified paths for `doc.colors = { primary: 'blue' };` will **not** contain `colors.primary`. If true, `modifiedPaths()` will return an array that contains `colors.primary`.\n * @return {Array}\n * @api public\n */\n\n\nDocument.prototype.modifiedPaths = function (options) {\n  options = options || {};\n  const directModifiedPaths = Object.keys(this.$__.activePaths.states.modify);\n\n  const _this = this;\n\n  return directModifiedPaths.reduce(function (list, path) {\n    const parts = path.split('.');\n    list = list.concat(parts.reduce(function (chains, part, i) {\n      return chains.concat(parts.slice(0, i).concat(part).join('.'));\n    }, []).filter(function (chain) {\n      return list.indexOf(chain) === -1;\n    }));\n\n    if (!options.includeChildren) {\n      return list;\n    }\n\n    let cur = _this.get(path);\n\n    if (cur != null && typeof cur === 'object') {\n      if (cur._doc) {\n        cur = cur._doc;\n      }\n\n      if (Array.isArray(cur)) {\n        const len = cur.length;\n\n        for (let i = 0; i < len; ++i) {\n          if (list.indexOf(path + '.' + i) === -1) {\n            list.push(path + '.' + i);\n\n            if (cur[i] != null && cur[i].$__) {\n              const modified = cur[i].modifiedPaths();\n\n              for (const childPath of modified) {\n                list.push(path + '.' + i + '.' + childPath);\n              }\n            }\n          }\n        }\n      } else {\n        Object.keys(cur).filter(function (key) {\n          return list.indexOf(path + '.' + key) === -1;\n        }).forEach(function (key) {\n          list.push(path + '.' + key);\n        });\n      }\n    }\n\n    return list;\n  }, []);\n};\n\nDocument.prototype[documentModifiedPaths] = Document.prototype.modifiedPaths;\n/**\n * Returns true if any of the given paths is modified, else false. If no arguments, returns `true` if any path\n * in this document is modified.\n *\n * If `path` is given, checks if a path or any full path containing `path` as part of its path chain has been modified.\n *\n * ####Example\n *\n *     doc.set('documents.0.title', 'changed');\n *     doc.isModified()                      // true\n *     doc.isModified('documents')           // true\n *     doc.isModified('documents.0.title')   // true\n *     doc.isModified('documents otherProp') // true\n *     doc.isDirectModified('documents')     // false\n *\n * @param {String} [path] optional\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isModified = function (paths, modifiedPaths) {\n  if (paths) {\n    if (!Array.isArray(paths)) {\n      paths = paths.split(' ');\n    }\n\n    const modified = modifiedPaths || this[documentModifiedPaths]();\n    const directModifiedPaths = Object.keys(this.$__.activePaths.states.modify);\n    const isModifiedChild = paths.some(function (path) {\n      return !!~modified.indexOf(path);\n    });\n    return isModifiedChild || paths.some(function (path) {\n      return directModifiedPaths.some(function (mod) {\n        return mod === path || path.startsWith(mod + '.');\n      });\n    });\n  }\n\n  return this.$__.activePaths.some('modify');\n};\n\nDocument.prototype[documentIsModified] = Document.prototype.isModified;\n/**\n * Checks if a path is set to its default.\n *\n * ####Example\n *\n *     MyModel = mongoose.model('test', { name: { type: String, default: 'Val '} });\n *     const m = new MyModel();\n *     m.$isDefault('name'); // true\n *\n * @memberOf Document\n * @instance\n * @method $isDefault\n * @param {String} [path]\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.$isDefault = function (path) {\n  if (path == null) {\n    return this.$__.activePaths.some('default');\n  }\n\n  if (typeof path === 'string' && path.indexOf(' ') === -1) {\n    return this.$__.activePaths.states.default.hasOwnProperty(path);\n  }\n\n  let paths = path;\n\n  if (!Array.isArray(paths)) {\n    paths = paths.split(' ');\n  }\n\n  return paths.some(path => this.$__.activePaths.states.default.hasOwnProperty(path));\n};\n/**\n * Getter/setter, determines whether the document was removed or not.\n *\n * ####Example:\n *     product.remove(function (err, product) {\n *       product.$isDeleted(); // true\n *       product.remove(); // no-op, doesn't send anything to the db\n *\n *       product.$isDeleted(false);\n *       product.$isDeleted(); // false\n *       product.remove(); // will execute a remove against the db\n *     })\n *\n * @param {Boolean} [val] optional, overrides whether mongoose thinks the doc is deleted\n * @return {Boolean} whether mongoose thinks this doc is deleted.\n * @method $isDeleted\n * @memberOf Document\n * @instance\n * @api public\n */\n\n\nDocument.prototype.$isDeleted = function (val) {\n  if (arguments.length === 0) {\n    return !!this.$__.isDeleted;\n  }\n\n  this.$__.isDeleted = !!val;\n  return this;\n};\n/**\n * Returns true if `path` was directly set and modified, else false.\n *\n * ####Example\n *\n *     doc.set('documents.0.title', 'changed');\n *     doc.isDirectModified('documents.0.title') // true\n *     doc.isDirectModified('documents') // false\n *\n * @param {String|Array<String>} path\n * @return {Boolean}\n * @api public\n */\n\n\nDocument.prototype.isDirectModified = function (path) {\n  if (path == null) {\n    return this.$__.activePaths.some('modify');\n  }\n\n  if (typeof path === 'string' && path.indexOf(' ') === -1) {\n    return this.$__.activePaths.states.modify.hasOwnProperty(path);\n  }\n\n  let paths = path;\n\n  if (!Array.isArray(paths)) {\n    paths = paths.split(' ');\n  }\n\n  return paths.some(path => this.$__.activePaths.states.modify.hasOwnProperty(path));\n};\n/**\n * Checks if `path` is in the `init` state, that is, it was set by `Document#init()` and not modified since.\n *\n * @param {String} path\n * @return {Boolean}\n * @api public\n */\n\n\nDocument.prototype.isInit = function (path) {\n  if (path == null) {\n    return this.$__.activePaths.some('init');\n  }\n\n  if (typeof path === 'string' && path.indexOf(' ') === -1) {\n    return this.$__.activePaths.states.init.hasOwnProperty(path);\n  }\n\n  let paths = path;\n\n  if (!Array.isArray(paths)) {\n    paths = paths.split(' ');\n  }\n\n  return paths.some(path => this.$__.activePaths.states.init.hasOwnProperty(path));\n};\n/**\n * Checks if `path` was selected in the source query which initialized this document.\n *\n * ####Example\n *\n *     Thing.findOne().select('name').exec(function (err, doc) {\n *        doc.isSelected('name') // true\n *        doc.isSelected('age')  // false\n *     })\n *\n * @param {String|Array<String>} path\n * @return {Boolean}\n * @api public\n */\n\n\nDocument.prototype.isSelected = function isSelected(path) {\n  if (this.$__.selected == null) {\n    return true;\n  }\n\n  if (path === '_id') {\n    return this.$__.selected._id !== 0;\n  }\n\n  if (path.indexOf(' ') !== -1) {\n    path = path.split(' ');\n  }\n\n  if (Array.isArray(path)) {\n    return path.some(p => this.$__isSelected(p));\n  }\n\n  const paths = Object.keys(this.$__.selected);\n  let inclusive = null;\n\n  if (paths.length === 1 && paths[0] === '_id') {\n    // only _id was selected.\n    return this.$__.selected._id === 0;\n  }\n\n  for (const cur of paths) {\n    if (cur === '_id') {\n      continue;\n    }\n\n    if (!isDefiningProjection(this.$__.selected[cur])) {\n      continue;\n    }\n\n    inclusive = !!this.$__.selected[cur];\n    break;\n  }\n\n  if (inclusive === null) {\n    return true;\n  }\n\n  if (path in this.$__.selected) {\n    return inclusive;\n  }\n\n  const pathDot = path + '.';\n\n  for (const cur of paths) {\n    if (cur === '_id') {\n      continue;\n    }\n\n    if (cur.startsWith(pathDot)) {\n      return inclusive || cur !== pathDot;\n    }\n\n    if (pathDot.startsWith(cur + '.')) {\n      return inclusive;\n    }\n  }\n\n  return !inclusive;\n};\n\nDocument.prototype.$__isSelected = Document.prototype.isSelected;\n/**\n * Checks if `path` was explicitly selected. If no projection, always returns\n * true.\n *\n * ####Example\n *\n *     Thing.findOne().select('nested.name').exec(function (err, doc) {\n *        doc.isDirectSelected('nested.name') // true\n *        doc.isDirectSelected('nested.otherName') // false\n *        doc.isDirectSelected('nested')  // false\n *     })\n *\n * @param {String} path\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isDirectSelected = function isDirectSelected(path) {\n  if (this.$__.selected == null) {\n    return true;\n  }\n\n  if (path === '_id') {\n    return this.$__.selected._id !== 0;\n  }\n\n  if (path.indexOf(' ') !== -1) {\n    path = path.split(' ');\n  }\n\n  if (Array.isArray(path)) {\n    return path.some(p => this.isDirectSelected(p));\n  }\n\n  const paths = Object.keys(this.$__.selected);\n  let inclusive = null;\n\n  if (paths.length === 1 && paths[0] === '_id') {\n    // only _id was selected.\n    return this.$__.selected._id === 0;\n  }\n\n  for (const cur of paths) {\n    if (cur === '_id') {\n      continue;\n    }\n\n    if (!isDefiningProjection(this.$__.selected[cur])) {\n      continue;\n    }\n\n    inclusive = !!this.$__.selected[cur];\n    break;\n  }\n\n  if (inclusive === null) {\n    return true;\n  }\n\n  if (this.$__.selected.hasOwnProperty(path)) {\n    return inclusive;\n  }\n\n  return !inclusive;\n};\n/**\n * Executes registered validation rules for this document.\n *\n * ####Note:\n *\n * This method is called `pre` save and if a validation rule is violated, [save](#model_Model-save) is aborted and the error is returned to your `callback`.\n *\n * ####Example:\n *\n *     doc.validate(function (err) {\n *       if (err) handleError(err);\n *       else // validation passed\n *     });\n *\n * @param {Array|String} [pathsToValidate] list of paths to validate. If set, Mongoose will validate only the modified paths that are in the given list.\n * @param {Object} [options] internal options\n * @param {Boolean} [options.validateModifiedOnly=false] if `true` mongoose validates only modified paths.\n * @param {Function} [callback] optional callback called after validation completes, passing an error if one occurred\n * @return {Promise} Promise\n * @api public\n */\n\n\nDocument.prototype.validate = function (pathsToValidate, options, callback) {\n  let parallelValidate;\n  this.$op = 'validate';\n\n  if (this.ownerDocument != null) {// Skip parallel validate check for subdocuments\n  } else if (this.$__.validating) {\n    parallelValidate = new ParallelValidateError(this, {\n      parentStack: options && options.parentStack,\n      conflictStack: this.$__.validating.stack\n    });\n  } else {\n    this.$__.validating = new ParallelValidateError(this, {\n      parentStack: options && options.parentStack\n    });\n  }\n\n  if (arguments.length === 1) {\n    if (typeof arguments[0] === 'object' && !Array.isArray(arguments[0])) {\n      options = arguments[0];\n      callback = null;\n      pathsToValidate = null;\n    } else if (typeof arguments[0] === 'function') {\n      callback = arguments[0];\n      options = null;\n      pathsToValidate = null;\n    }\n  } else if (typeof pathsToValidate === 'function') {\n    callback = pathsToValidate;\n    options = null;\n    pathsToValidate = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = pathsToValidate;\n    pathsToValidate = null;\n  }\n\n  return promiseOrCallback(callback, cb => {\n    if (parallelValidate != null) {\n      return cb(parallelValidate);\n    }\n\n    this.$__validate(pathsToValidate, options, error => {\n      this.$op = null;\n      cb(error);\n    });\n  }, this.constructor.events);\n};\n/*!\n * ignore\n */\n\n\nfunction _evaluateRequiredFunctions(doc) {\n  Object.keys(doc.$__.activePaths.states.require).forEach(path => {\n    const p = doc.$__schema.path(path);\n\n    if (p != null && typeof p.originalRequiredValue === 'function') {\n      doc.$__.cachedRequired[path] = p.originalRequiredValue.call(doc, doc);\n    }\n  });\n}\n/*!\n * ignore\n */\n\n\nfunction _getPathsToValidate(doc) {\n  const skipSchemaValidators = {};\n\n  _evaluateRequiredFunctions(doc); // only validate required fields when necessary\n\n\n  let paths = new Set(Object.keys(doc.$__.activePaths.states.require).filter(function (path) {\n    if (!doc.$__isSelected(path) && !doc.isModified(path)) {\n      return false;\n    }\n\n    if (path in doc.$__.cachedRequired) {\n      return doc.$__.cachedRequired[path];\n    }\n\n    return true;\n  }));\n  Object.keys(doc.$__.activePaths.states.init).forEach(addToPaths);\n  Object.keys(doc.$__.activePaths.states.modify).forEach(addToPaths);\n  Object.keys(doc.$__.activePaths.states.default).forEach(addToPaths);\n\n  function addToPaths(p) {\n    paths.add(p);\n  }\n\n  const subdocs = doc.$getAllSubdocs();\n  const modifiedPaths = doc.modifiedPaths();\n\n  for (const subdoc of subdocs) {\n    if (subdoc.$basePath) {\n      // Remove child paths for now, because we'll be validating the whole\n      // subdoc\n      for (const p of paths) {\n        if (p === null || p.startsWith(subdoc.$basePath + '.')) {\n          paths.delete(p);\n        }\n      }\n\n      if (doc.isModified(subdoc.$basePath, modifiedPaths) && !doc.isDirectModified(subdoc.$basePath) && !doc.$isDefault(subdoc.$basePath)) {\n        paths.add(subdoc.$basePath);\n        skipSchemaValidators[subdoc.$basePath] = true;\n      }\n    }\n  } // from here on we're not removing items from paths\n  // gh-661: if a whole array is modified, make sure to run validation on all\n  // the children as well\n\n\n  for (const path of paths) {\n    const _pathType = doc.$__schema.path(path);\n\n    if (!_pathType || !_pathType.$isMongooseArray || // To avoid potential performance issues, skip doc arrays whose children\n    // are not required. `getPositionalPathType()` may be slow, so avoid\n    // it unless we have a case of #6364\n    _pathType.$isMongooseDocumentArray && !get(_pathType, 'schemaOptions.required')) {\n      continue;\n    }\n\n    const val = doc.$__getValue(path);\n\n    _pushNestedArrayPaths(val, paths, path);\n  }\n\n  function _pushNestedArrayPaths(val, paths, path) {\n    if (val != null) {\n      const numElements = val.length;\n\n      for (let j = 0; j < numElements; ++j) {\n        if (Array.isArray(val[j])) {\n          _pushNestedArrayPaths(val[j], paths, path + '.' + j);\n        } else {\n          paths.add(path + '.' + j);\n        }\n      }\n    }\n  }\n\n  const flattenOptions = {\n    skipArrays: true\n  };\n\n  for (const pathToCheck of paths) {\n    if (doc.$__schema.nested[pathToCheck]) {\n      let _v = doc.$__getValue(pathToCheck);\n\n      if (isMongooseObject(_v)) {\n        _v = _v.toObject({\n          transform: false\n        });\n      }\n\n      const flat = flatten(_v, pathToCheck, flattenOptions, doc.$__schema);\n      Object.keys(flat).forEach(addToPaths);\n    }\n  }\n\n  for (const path of paths) {\n    // Single nested paths (paths embedded under single nested subdocs) will\n    // be validated on their own when we call `validate()` on the subdoc itself.\n    // Re: gh-8468\n    if (doc.$__schema.singleNestedPaths.hasOwnProperty(path)) {\n      paths.delete(path);\n      continue;\n    }\n\n    const _pathType = doc.$__schema.path(path);\n\n    if (!_pathType || !_pathType.$isSchemaMap) {\n      continue;\n    }\n\n    const val = doc.$__getValue(path);\n\n    if (val == null) {\n      continue;\n    }\n\n    for (const key of val.keys()) {\n      paths.add(path + '.' + key);\n    }\n  }\n\n  paths = Array.from(paths);\n  return [paths, skipSchemaValidators];\n}\n/*!\n * ignore\n */\n\n\nDocument.prototype.$__validate = function (pathsToValidate, options, callback) {\n  if (typeof pathsToValidate === 'function') {\n    callback = pathsToValidate;\n    options = null;\n    pathsToValidate = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  const hasValidateModifiedOnlyOption = options && typeof options === 'object' && 'validateModifiedOnly' in options;\n  let shouldValidateModifiedOnly;\n\n  if (hasValidateModifiedOnlyOption) {\n    shouldValidateModifiedOnly = !!options.validateModifiedOnly;\n  } else {\n    shouldValidateModifiedOnly = this.$__schema.options.validateModifiedOnly;\n  }\n\n  const _this = this;\n\n  const _complete = () => {\n    let validationError = this.$__.validationError;\n    this.$__.validationError = undefined;\n\n    if (shouldValidateModifiedOnly && validationError != null) {\n      // Remove any validation errors that aren't from modified paths\n      const errors = Object.keys(validationError.errors);\n\n      for (const errPath of errors) {\n        if (!this.isModified(errPath)) {\n          delete validationError.errors[errPath];\n        }\n      }\n\n      if (Object.keys(validationError.errors).length === 0) {\n        validationError = void 0;\n      }\n    }\n\n    this.$__.cachedRequired = {};\n    this.emit('validate', _this);\n    this.constructor.emit('validate', _this);\n    this.$__.validating = null;\n\n    if (validationError) {\n      for (const key in validationError.errors) {\n        // Make sure cast errors persist\n        if (!this[documentArrayParent] && validationError.errors[key] instanceof MongooseError.CastError) {\n          this.invalidate(key, validationError.errors[key]);\n        }\n      }\n\n      return validationError;\n    }\n  }; // only validate required fields when necessary\n\n\n  const pathDetails = _getPathsToValidate(this);\n\n  let paths = shouldValidateModifiedOnly ? pathDetails[0].filter(path => this.isModified(path)) : pathDetails[0];\n  const skipSchemaValidators = pathDetails[1];\n\n  if (typeof pathsToValidate === 'string') {\n    pathsToValidate = pathsToValidate.split(' ');\n  }\n\n  if (Array.isArray(pathsToValidate)) {\n    paths = _handlePathsToValidate(paths, pathsToValidate);\n  }\n\n  if (paths.length === 0) {\n    return immediate(function () {\n      const error = _complete();\n\n      if (error) {\n        return _this.$__schema.s.hooks.execPost('validate:error', _this, [_this], {\n          error: error\n        }, function (error) {\n          callback(error);\n        });\n      }\n\n      callback(null, _this);\n    });\n  }\n\n  const validated = {};\n  let total = 0;\n\n  const complete = function () {\n    const error = _complete();\n\n    if (error) {\n      return _this.$__schema.s.hooks.execPost('validate:error', _this, [_this], {\n        error: error\n      }, function (error) {\n        callback(error);\n      });\n    }\n\n    callback(null, _this);\n  };\n\n  const validatePath = function (path) {\n    if (path == null || validated[path]) {\n      return;\n    }\n\n    validated[path] = true;\n    total++;\n    immediate(function () {\n      const schemaType = _this.$__schema.path(path);\n\n      if (!schemaType) {\n        return --total || complete();\n      } // If user marked as invalid or there was a cast error, don't validate\n\n\n      if (!_this.$isValid(path)) {\n        --total || complete();\n        return;\n      } // If setting a path under a mixed path, avoid using the mixed path validator (gh-10141)\n\n\n      if (schemaType[schemaMixedSymbol] != null && path !== schemaType.path) {\n        return --total || complete();\n      }\n\n      let val = _this.$__getValue(path); // If you `populate()` and get back a null value, required validators\n      // shouldn't fail (gh-8018). We should always fall back to the populated\n      // value.\n\n\n      let pop;\n\n      if (val == null && (pop = _this.populated(path))) {\n        val = pop;\n      }\n\n      const scope = path in _this.$__.pathsToScopes ? _this.$__.pathsToScopes[path] : _this;\n      const doValidateOptions = {\n        skipSchemaValidators: skipSchemaValidators[path],\n        path: path,\n        validateModifiedOnly: shouldValidateModifiedOnly\n      };\n      schemaType.doValidate(val, function (err) {\n        if (err && (!schemaType.$isMongooseDocumentArray || err.$isArrayValidatorError)) {\n          if (schemaType.$isSingleNested && err instanceof ValidationError && schemaType.schema.options.storeSubdocValidationError === false) {\n            return --total || complete();\n          }\n\n          _this.invalidate(path, err, undefined, true);\n        }\n\n        --total || complete();\n      }, scope, doValidateOptions);\n    });\n  };\n\n  const numPaths = paths.length;\n\n  for (let i = 0; i < numPaths; ++i) {\n    validatePath(paths[i]);\n  }\n};\n/*!\n * ignore\n */\n\n\nfunction _handlePathsToValidate(paths, pathsToValidate) {\n  const _pathsToValidate = new Set(pathsToValidate);\n\n  const parentPaths = new Map([]);\n\n  for (const path of pathsToValidate) {\n    if (path.indexOf('.') === -1) {\n      continue;\n    }\n\n    const pieces = path.split('.');\n    let cur = pieces[0];\n\n    for (let i = 1; i < pieces.length; ++i) {\n      // Since we skip subpaths under single nested subdocs to\n      // avoid double validation, we need to add back the\n      // single nested subpath if the user asked for it (gh-8626)\n      parentPaths.set(cur, path);\n      cur = cur + '.' + pieces[i];\n    }\n  }\n\n  const ret = [];\n\n  for (const path of paths) {\n    if (_pathsToValidate.has(path)) {\n      ret.push(path);\n    } else if (parentPaths.has(path)) {\n      ret.push(parentPaths.get(path));\n    }\n  }\n\n  return ret;\n}\n/**\n * Executes registered validation rules (skipping asynchronous validators) for this document.\n *\n * ####Note:\n *\n * This method is useful if you need synchronous validation.\n *\n * ####Example:\n *\n *     const err = doc.validateSync();\n *     if (err) {\n *       handleError(err);\n *     } else {\n *       // validation passed\n *     }\n *\n * @param {Array|string} pathsToValidate only validate the given paths\n * @param {Object} [options] options for validation\n * @param {Boolean} [options.validateModifiedOnly=false] If `true`, Mongoose will only validate modified paths, as opposed to modified paths and `required` paths.\n * @return {ValidationError|undefined} ValidationError if there are errors during validation, or undefined if there is no error.\n * @api public\n */\n\n\nDocument.prototype.validateSync = function (pathsToValidate, options) {\n  const _this = this;\n\n  if (arguments.length === 1 && typeof arguments[0] === 'object' && !Array.isArray(arguments[0])) {\n    options = arguments[0];\n    pathsToValidate = null;\n  }\n\n  const hasValidateModifiedOnlyOption = options && typeof options === 'object' && 'validateModifiedOnly' in options;\n  let shouldValidateModifiedOnly;\n\n  if (hasValidateModifiedOnlyOption) {\n    shouldValidateModifiedOnly = !!options.validateModifiedOnly;\n  } else {\n    shouldValidateModifiedOnly = this.$__schema.options.validateModifiedOnly;\n  }\n\n  if (typeof pathsToValidate === 'string') {\n    pathsToValidate = pathsToValidate.split(' ');\n  } // only validate required fields when necessary\n\n\n  const pathDetails = _getPathsToValidate(this);\n\n  let paths = shouldValidateModifiedOnly ? pathDetails[0].filter(path => this.isModified(path)) : pathDetails[0];\n  const skipSchemaValidators = pathDetails[1];\n\n  if (typeof pathsToValidate === 'string') {\n    pathsToValidate = pathsToValidate.split(' ');\n  }\n\n  if (Array.isArray(pathsToValidate)) {\n    paths = _handlePathsToValidate(paths, pathsToValidate);\n  }\n\n  const validating = {};\n  paths.forEach(function (path) {\n    if (validating[path]) {\n      return;\n    }\n\n    validating[path] = true;\n\n    const p = _this.$__schema.path(path);\n\n    if (!p) {\n      return;\n    }\n\n    if (!_this.$isValid(path)) {\n      return;\n    }\n\n    const val = _this.$__getValue(path);\n\n    const err = p.doValidateSync(val, _this, {\n      skipSchemaValidators: skipSchemaValidators[path],\n      path: path,\n      validateModifiedOnly: shouldValidateModifiedOnly\n    });\n\n    if (err && (!p.$isMongooseDocumentArray || err.$isArrayValidatorError)) {\n      if (p.$isSingleNested && err instanceof ValidationError && p.schema.options.storeSubdocValidationError === false) {\n        return;\n      }\n\n      _this.invalidate(path, err, undefined, true);\n    }\n  });\n  const err = _this.$__.validationError;\n  _this.$__.validationError = undefined;\n\n  _this.emit('validate', _this);\n\n  _this.constructor.emit('validate', _this);\n\n  if (err) {\n    for (const key in err.errors) {\n      // Make sure cast errors persist\n      if (err.errors[key] instanceof MongooseError.CastError) {\n        _this.invalidate(key, err.errors[key]);\n      }\n    }\n  }\n\n  return err;\n};\n/**\n * Marks a path as invalid, causing validation to fail.\n *\n * The `errorMsg` argument will become the message of the `ValidationError`.\n *\n * The `value` argument (if passed) will be available through the `ValidationError.value` property.\n *\n *     doc.invalidate('size', 'must be less than 20', 14);\n\n *     doc.validate(function (err) {\n *       console.log(err)\n *       // prints\n *       { message: 'Validation failed',\n *         name: 'ValidationError',\n *         errors:\n *          { size:\n *             { message: 'must be less than 20',\n *               name: 'ValidatorError',\n *               path: 'size',\n *               type: 'user defined',\n *               value: 14 } } }\n *     })\n *\n * @param {String} path the field to invalidate. For array elements, use the `array.i.field` syntax, where `i` is the 0-based index in the array.\n * @param {String|Error} errorMsg the error which states the reason `path` was invalid\n * @param {Object|String|Number|any} value optional invalid value\n * @param {String} [kind] optional `kind` property for the error\n * @return {ValidationError} the current ValidationError, with all currently invalidated paths\n * @api public\n */\n\n\nDocument.prototype.invalidate = function (path, err, val, kind) {\n  if (!this.$__.validationError) {\n    this.$__.validationError = new ValidationError(this);\n  }\n\n  if (this.$__.validationError.errors[path]) {\n    return;\n  }\n\n  if (!err || typeof err === 'string') {\n    err = new ValidatorError({\n      path: path,\n      message: err,\n      type: kind || 'user defined',\n      value: val\n    });\n  }\n\n  if (this.$__.validationError === err) {\n    return this.$__.validationError;\n  }\n\n  this.$__.validationError.addError(path, err);\n  return this.$__.validationError;\n};\n/**\n * Marks a path as valid, removing existing validation errors.\n *\n * @param {String} path the field to mark as valid\n * @api public\n * @memberOf Document\n * @instance\n * @method $markValid\n */\n\n\nDocument.prototype.$markValid = function (path) {\n  if (!this.$__.validationError || !this.$__.validationError.errors[path]) {\n    return;\n  }\n\n  delete this.$__.validationError.errors[path];\n\n  if (Object.keys(this.$__.validationError.errors).length === 0) {\n    this.$__.validationError = null;\n  }\n};\n/*!\n * ignore\n */\n\n\nfunction _markValidSubpaths(doc, path) {\n  if (!doc.$__.validationError) {\n    return;\n  }\n\n  const keys = Object.keys(doc.$__.validationError.errors);\n\n  for (const key of keys) {\n    if (key.startsWith(path + '.')) {\n      delete doc.$__.validationError.errors[key];\n    }\n  }\n\n  if (Object.keys(doc.$__.validationError.errors).length === 0) {\n    doc.$__.validationError = null;\n  }\n}\n/*!\n * ignore\n */\n\n\nfunction _checkImmutableSubpaths(subdoc, schematype, priorVal) {\n  const schema = schematype.schema;\n\n  if (schema == null) {\n    return;\n  }\n\n  for (const key of Object.keys(schema.paths)) {\n    const path = schema.paths[key];\n\n    if (path.$immutableSetter == null) {\n      continue;\n    }\n\n    const oldVal = priorVal == null ? void 0 : priorVal.$__getValue(key); // Calling immutableSetter with `oldVal` even though it expects `newVal`\n    // is intentional. That's because `$immutableSetter` compares its param\n    // to the current value.\n\n    path.$immutableSetter.call(subdoc, oldVal);\n  }\n}\n/**\n * Saves this document by inserting a new document into the database if [document.isNew](/docs/api.html#document_Document-isNew) is `true`,\n * or sends an [updateOne](/docs/api.html#document_Document-updateOne) operation **only** with the modifications to the database, it does not replace the whole document in the latter case.\n *\n * ####Example:\n *\n *     product.sold = Date.now();\n *     product = await product.save();\n *\n * If save is successful, the returned promise will fulfill with the document\n * saved.\n *\n * ####Example:\n *\n *     const newProduct = await product.save();\n *     newProduct === product; // true\n *\n * @param {Object} [options] options optional options\n * @param {Session} [options.session=null] the [session](https://docs.mongodb.com/manual/reference/server-sessions/) associated with this save operation. If not specified, defaults to the [document's associated session](api.html#document_Document-$session).\n * @param {Object} [options.safe] (DEPRECATED) overrides [schema's safe option](http://mongoosejs.com//docs/guide.html#safe). Use the `w` option instead.\n * @param {Boolean} [options.validateBeforeSave] set to false to save without validating.\n * @param {Boolean} [options.validateModifiedOnly=false] If `true`, Mongoose will only validate modified paths, as opposed to modified paths and `required` paths.\n * @param {Number|String} [options.w] set the [write concern](https://docs.mongodb.com/manual/reference/write-concern/#w-option). Overrides the [schema-level `writeConcern` option](/docs/guide.html#writeConcern)\n * @param {Boolean} [options.j] set to true for MongoDB to wait until this `save()` has been [journaled before resolving the returned promise](https://docs.mongodb.com/manual/reference/write-concern/#j-option). Overrides the [schema-level `writeConcern` option](/docs/guide.html#writeConcern)\n * @param {Number} [options.wtimeout] sets a [timeout for the write concern](https://docs.mongodb.com/manual/reference/write-concern/#wtimeout). Overrides the [schema-level `writeConcern` option](/docs/guide.html#writeConcern).\n * @param {Boolean} [options.checkKeys=true] the MongoDB driver prevents you from saving keys that start with '$' or contain '.' by default. Set this option to `false` to skip that check. See [restrictions on field names](https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names)\n * @param {Boolean} [options.timestamps=true] if `false` and [timestamps](./guide.html#timestamps) are enabled, skip timestamps for this `save()`.\n * @param {Function} [fn] optional callback\n * @method save\n * @memberOf Document\n * @instance\n * @throws {DocumentNotFoundError} if this [save updates an existing document](api.html#document_Document-isNew) but the document doesn't exist in the database. For example, you will get this error if the document is [deleted between when you retrieved the document and when you saved it](documents.html#updating).\n * @return {Promise|undefined} Returns undefined if used with callback or a Promise otherwise.\n * @api public\n * @see middleware http://mongoosejs.com/docs/middleware.html\n */\n\n/**\n * Checks if a path is invalid\n *\n * @param {String|Array<String>} path the field to check\n * @method $isValid\n * @memberOf Document\n * @instance\n * @api private\n */\n\n\nDocument.prototype.$isValid = function (path) {\n  if (this.$__.validationError == null || Object.keys(this.$__.validationError.errors).length === 0) {\n    return true;\n  }\n\n  if (path == null) {\n    return false;\n  }\n\n  if (path.indexOf(' ') !== -1) {\n    path = path.split(' ');\n  }\n\n  if (Array.isArray(path)) {\n    return path.some(p => this.$__.validationError.errors[p] == null);\n  }\n\n  return this.$__.validationError.errors[path] == null;\n};\n/**\n * Resets the internal modified state of this document.\n *\n * @api private\n * @return {Document}\n * @method $__reset\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.$__reset = function reset() {\n  let _this = this;\n\n  DocumentArray || (DocumentArray = require('./types/documentarray'));\n  this.$__.activePaths.map('init', 'modify', function (i) {\n    return _this.$__getValue(i);\n  }).filter(function (val) {\n    return val && val instanceof Array && val.isMongooseDocumentArray && val.length;\n  }).forEach(function (array) {\n    let i = array.length;\n\n    while (i--) {\n      const doc = array[i];\n\n      if (!doc) {\n        continue;\n      }\n\n      doc.$__reset();\n    }\n\n    _this.$__.activePaths.init(array.$path());\n\n    array[arrayAtomicsBackupSymbol] = array[arrayAtomicsSymbol];\n    array[arrayAtomicsSymbol] = {};\n  });\n  this.$__.activePaths.map('init', 'modify', function (i) {\n    return _this.$__getValue(i);\n  }).filter(function (val) {\n    return val && val.$isSingleNested;\n  }).forEach(function (doc) {\n    doc.$__reset();\n\n    if (doc.$__parent === _this) {\n      _this.$__.activePaths.init(doc.$basePath);\n    } else if (doc.$__parent != null && doc.$__parent.ownerDocument) {\n      // If map path underneath subdocument, may end up with a case where\n      // map path is modified but parent still needs to be reset. See gh-10295\n      doc.$__parent.$__reset();\n    }\n  }); // clear atomics\n\n  this.$__dirty().forEach(function (dirt) {\n    const type = dirt.value;\n\n    if (type && type[arrayAtomicsSymbol]) {\n      type[arrayAtomicsBackupSymbol] = type[arrayAtomicsSymbol];\n      type[arrayAtomicsSymbol] = {};\n    }\n  });\n  this.$__.backup = {};\n  this.$__.backup.activePaths = {\n    modify: Object.assign({}, this.$__.activePaths.states.modify),\n    default: Object.assign({}, this.$__.activePaths.states.default)\n  };\n  this.$__.backup.validationError = this.$__.validationError;\n  this.$__.backup.errors = this.errors; // Clear 'dirty' cache\n\n  this.$__.activePaths.clear('modify');\n  this.$__.activePaths.clear('default');\n  this.$__.validationError = undefined;\n  this.errors = undefined;\n  _this = this;\n  this.$__schema.requiredPaths().forEach(function (path) {\n    _this.$__.activePaths.require(path);\n  });\n  return this;\n};\n/*!\n * ignore\n */\n\n\nDocument.prototype.$__undoReset = function $__undoReset() {\n  if (this.$__.backup == null || this.$__.backup.activePaths == null) {\n    return;\n  }\n\n  this.$__.activePaths.states.modify = this.$__.backup.activePaths.modify;\n  this.$__.activePaths.states.default = this.$__.backup.activePaths.default;\n  this.$__.validationError = this.$__.backup.validationError;\n  this.errors = this.$__.backup.errors;\n\n  for (const dirt of this.$__dirty()) {\n    const type = dirt.value;\n\n    if (type && type[arrayAtomicsSymbol] && type[arrayAtomicsBackupSymbol]) {\n      type[arrayAtomicsSymbol] = type[arrayAtomicsBackupSymbol];\n    }\n  }\n\n  for (const subdoc of this.$getAllSubdocs()) {\n    subdoc.$__undoReset();\n  }\n};\n/**\n * Returns this documents dirty paths / vals.\n *\n * @api private\n * @method $__dirty\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.$__dirty = function () {\n  const _this = this;\n\n  let all = this.$__.activePaths.map('modify', function (path) {\n    return {\n      path: path,\n      value: _this.$__getValue(path),\n      schema: _this.$__path(path)\n    };\n  }); // gh-2558: if we had to set a default and the value is not undefined,\n  // we have to save as well\n\n  all = all.concat(this.$__.activePaths.map('default', function (path) {\n    if (path === '_id' || _this.$__getValue(path) == null) {\n      return;\n    }\n\n    return {\n      path: path,\n      value: _this.$__getValue(path),\n      schema: _this.$__path(path)\n    };\n  })); // Sort dirty paths in a flat hierarchy.\n\n  all.sort(function (a, b) {\n    return a.path < b.path ? -1 : a.path > b.path ? 1 : 0;\n  }); // Ignore \"foo.a\" if \"foo\" is dirty already.\n\n  const minimal = [];\n  let lastPath;\n  let top;\n  all.forEach(function (item) {\n    if (!item) {\n      return;\n    }\n\n    if (lastPath == null || item.path.indexOf(lastPath) !== 0) {\n      lastPath = item.path + '.';\n      minimal.push(item);\n      top = item;\n    } else if (top != null && top.value != null && top.value[arrayAtomicsSymbol] != null && top.value.hasAtomics()) {\n      // special case for top level MongooseArrays\n      // the `top` array itself and a sub path of `top` are being modified.\n      // the only way to honor all of both modifications is through a $set\n      // of entire array.\n      top.value[arrayAtomicsSymbol] = {};\n      top.value[arrayAtomicsSymbol].$set = top.value;\n    }\n  });\n  top = lastPath = null;\n  return minimal;\n};\n/**\n * Assigns/compiles `schema` into this documents prototype.\n *\n * @param {Schema} schema\n * @api private\n * @method $__setSchema\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.$__setSchema = function (schema) {\n  schema.plugin(idGetter, {\n    deduplicate: true\n  });\n  compile(schema.tree, this, undefined, schema.options); // Apply default getters if virtual doesn't have any (gh-6262)\n\n  for (const key of Object.keys(schema.virtuals)) {\n    schema.virtuals[key]._applyDefaultGetters();\n  }\n\n  if (schema.path('schema') == null) {\n    this.schema = schema;\n  }\n\n  this.$__schema = schema;\n  this[documentSchemaSymbol] = schema;\n};\n/**\n * Get active path that were changed and are arrays\n *\n * @api private\n * @method $__getArrayPathsToValidate\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.$__getArrayPathsToValidate = function () {\n  DocumentArray || (DocumentArray = require('./types/documentarray')); // validate all document arrays.\n\n  return this.$__.activePaths.map('init', 'modify', function (i) {\n    return this.$__getValue(i);\n  }.bind(this)).filter(function (val) {\n    return val && val instanceof Array && val.isMongooseDocumentArray && val.length;\n  }).reduce(function (seed, array) {\n    return seed.concat(array);\n  }, []).filter(function (doc) {\n    return doc;\n  });\n};\n/**\n * Get all subdocs (by bfs)\n *\n * @api public\n * @method $getAllSubdocs\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.$getAllSubdocs = function $getAllSubdocs() {\n  DocumentArray || (DocumentArray = require('./types/documentarray'));\n  Embedded = Embedded || require('./types/embedded');\n\n  function docReducer(doc, seed, path) {\n    let val = doc;\n    let isNested = false;\n\n    if (path) {\n      if (doc instanceof Document && doc[documentSchemaSymbol].paths[path]) {\n        val = doc._doc[path];\n      } else if (doc instanceof Document && doc[documentSchemaSymbol].nested[path]) {\n        val = doc._doc[path];\n        isNested = true;\n      } else {\n        val = doc[path];\n      }\n    }\n\n    if (val instanceof Embedded) {\n      seed.push(val);\n    } else if (val instanceof Map) {\n      seed = Array.from(val.keys()).reduce(function (seed, path) {\n        return docReducer(val.get(path), seed, null);\n      }, seed);\n    } else if (val && val.$isSingleNested) {\n      seed = Object.keys(val._doc).reduce(function (seed, path) {\n        return docReducer(val._doc, seed, path);\n      }, seed);\n      seed.push(val);\n    } else if (val && val.isMongooseDocumentArray) {\n      val.forEach(function _docReduce(doc) {\n        if (!doc || !doc._doc) {\n          return;\n        }\n\n        seed = Object.keys(doc._doc).reduce(function (seed, path) {\n          return docReducer(doc._doc, seed, path);\n        }, seed);\n\n        if (doc instanceof Embedded) {\n          seed.push(doc);\n        }\n      });\n    } else if (isNested && val != null) {\n      for (const path of Object.keys(val)) {\n        docReducer(val, seed, path);\n      }\n    }\n\n    return seed;\n  }\n\n  const subDocs = [];\n\n  for (const path of Object.keys(this._doc)) {\n    docReducer(this, subDocs, path);\n  }\n\n  return subDocs;\n};\n/*!\n * Runs queued functions\n */\n\n\nfunction applyQueue(doc) {\n  const q = doc.$__schema && doc.$__schema.callQueue;\n\n  if (!q.length) {\n    return;\n  }\n\n  for (const pair of q) {\n    if (pair[0] !== 'pre' && pair[0] !== 'post' && pair[0] !== 'on') {\n      doc[pair[0]].apply(doc, pair[1]);\n    }\n  }\n}\n/*!\n * ignore\n */\n\n\nDocument.prototype.$__handleReject = function handleReject(err) {\n  // emit on the Model if listening\n  if (this.listeners('error').length) {\n    this.emit('error', err);\n  } else if (this.constructor.listeners && this.constructor.listeners('error').length) {\n    this.constructor.emit('error', err);\n  }\n};\n/**\n * Internal helper for toObject() and toJSON() that doesn't manipulate options\n *\n * @api private\n * @method $toObject\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.$toObject = function (options, json) {\n  let defaultOptions = {\n    transform: true,\n    flattenDecimals: true\n  };\n  const path = json ? 'toJSON' : 'toObject';\n  const baseOptions = get(this, 'constructor.base.options.' + path, {});\n  const schemaOptions = get(this, '$__schema.options', {}); // merge base default options with Schema's set default options if available.\n  // `clone` is necessary here because `utils.options` directly modifies the second input.\n\n  defaultOptions = utils.options(defaultOptions, clone(baseOptions));\n  defaultOptions = utils.options(defaultOptions, clone(schemaOptions[path] || {})); // If options do not exist or is not an object, set it to empty object\n\n  options = utils.isPOJO(options) ? clone(options) : {};\n  options._calledWithOptions = options._calledWithOptions || clone(options);\n\n  let _minimize;\n\n  if (options._calledWithOptions.minimize != null) {\n    _minimize = options.minimize;\n  } else if (defaultOptions.minimize != null) {\n    _minimize = defaultOptions.minimize;\n  } else {\n    _minimize = schemaOptions.minimize;\n  }\n\n  let flattenMaps;\n\n  if (options._calledWithOptions.flattenMaps != null) {\n    flattenMaps = options.flattenMaps;\n  } else if (defaultOptions.flattenMaps != null) {\n    flattenMaps = defaultOptions.flattenMaps;\n  } else {\n    flattenMaps = schemaOptions.flattenMaps;\n  } // The original options that will be passed to `clone()`. Important because\n  // `clone()` will recursively call `$toObject()` on embedded docs, so we\n  // need the original options the user passed in, plus `_isNested` and\n  // `_parentOptions` for checking whether we need to depopulate.\n\n\n  const cloneOptions = Object.assign(utils.clone(options), {\n    _isNested: true,\n    json: json,\n    minimize: _minimize,\n    flattenMaps: flattenMaps\n  });\n\n  if (utils.hasUserDefinedProperty(options, 'getters')) {\n    cloneOptions.getters = options.getters;\n  }\n\n  if (utils.hasUserDefinedProperty(options, 'virtuals')) {\n    cloneOptions.virtuals = options.virtuals;\n  }\n\n  const depopulate = options.depopulate || get(options, '_parentOptions.depopulate', false); // _isNested will only be true if this is not the top level document, we\n  // should never depopulate\n\n  if (depopulate && options._isNested && this.$__.wasPopulated) {\n    // populated paths that we set to a document\n    return clone(this._id, cloneOptions);\n  } // merge default options with input options.\n\n\n  options = utils.options(defaultOptions, options);\n  options._isNested = true;\n  options.json = json;\n  options.minimize = _minimize;\n  cloneOptions._parentOptions = options;\n  cloneOptions._skipSingleNestedGetters = true;\n  const gettersOptions = Object.assign({}, cloneOptions);\n  gettersOptions._skipSingleNestedGetters = false; // remember the root transform function\n  // to save it from being overwritten by sub-transform functions\n\n  const originalTransform = options.transform;\n  let ret = clone(this._doc, cloneOptions) || {};\n\n  if (options.getters) {\n    applyGetters(this, ret, gettersOptions);\n\n    if (options.minimize) {\n      ret = minimize(ret) || {};\n    }\n  }\n\n  if (options.virtuals || options.getters && options.virtuals !== false) {\n    applyVirtuals(this, ret, gettersOptions, options);\n  }\n\n  if (options.versionKey === false && this.$__schema.options.versionKey) {\n    delete ret[this.$__schema.options.versionKey];\n  }\n\n  let transform = options.transform; // In the case where a subdocument has its own transform function, we need to\n  // check and see if the parent has a transform (options.transform) and if the\n  // child schema has a transform (this.schema.options.toObject) In this case,\n  // we need to adjust options.transform to be the child schema's transform and\n  // not the parent schema's\n\n  if (transform) {\n    applySchemaTypeTransforms(this, ret);\n  }\n\n  if (options.useProjection) {\n    omitDeselectedFields(this, ret);\n  }\n\n  if (transform === true || schemaOptions.toObject && transform) {\n    const opts = options.json ? schemaOptions.toJSON : schemaOptions.toObject;\n\n    if (opts) {\n      transform = typeof options.transform === 'function' ? options.transform : opts.transform;\n    }\n  } else {\n    options.transform = originalTransform;\n  }\n\n  if (typeof transform === 'function') {\n    const xformed = transform(this, ret, options);\n\n    if (typeof xformed !== 'undefined') {\n      ret = xformed;\n    }\n  }\n\n  return ret;\n};\n/**\n * Converts this document into a plain-old JavaScript object ([POJO](https://masteringjs.io/tutorials/fundamentals/pojo)).\n *\n * Buffers are converted to instances of [mongodb.Binary](http://mongodb.github.com/node-mongodb-native/api-bson-generated/binary.html) for proper storage.\n *\n * ####Options:\n *\n * - `getters` apply all getters (path and virtual getters), defaults to false\n * - `aliases` apply all aliases if `virtuals=true`, defaults to true\n * - `virtuals` apply virtual getters (can override `getters` option), defaults to false\n * - `minimize` remove empty objects, defaults to true\n * - `transform` a transform function to apply to the resulting document before returning\n * - `depopulate` depopulate any populated paths, replacing them with their original refs, defaults to false\n * - `versionKey` whether to include the version key, defaults to true\n * - `flattenMaps` convert Maps to POJOs. Useful if you want to JSON.stringify() the result of toObject(), defaults to false\n * - `useProjection` set to `true` to omit fields that are excluded in this document's projection. Unless you specified a projection, this will omit any field that has `select: false` in the schema.\n *\n * ####Getters/Virtuals\n *\n * Example of only applying path getters\n *\n *     doc.toObject({ getters: true, virtuals: false })\n *\n * Example of only applying virtual getters\n *\n *     doc.toObject({ virtuals: true })\n *\n * Example of applying both path and virtual getters\n *\n *     doc.toObject({ getters: true })\n *\n * To apply these options to every document of your schema by default, set your [schemas](#schema_Schema) `toObject` option to the same argument.\n *\n *     schema.set('toObject', { virtuals: true })\n *\n * ####Transform\n *\n * We may need to perform a transformation of the resulting object based on some criteria, say to remove some sensitive information or return a custom object. In this case we set the optional `transform` function.\n *\n * Transform functions receive three arguments\n *\n *     function (doc, ret, options) {}\n *\n * - `doc` The mongoose document which is being converted\n * - `ret` The plain object representation which has been converted\n * - `options` The options in use (either schema options or the options passed inline)\n *\n * ####Example\n *\n *     // specify the transform schema option\n *     if (!schema.options.toObject) schema.options.toObject = {};\n *     schema.options.toObject.transform = function (doc, ret, options) {\n *       // remove the _id of every document before returning the result\n *       delete ret._id;\n *       return ret;\n *     }\n *\n *     // without the transformation in the schema\n *     doc.toObject(); // { _id: 'anId', name: 'Wreck-it Ralph' }\n *\n *     // with the transformation\n *     doc.toObject(); // { name: 'Wreck-it Ralph' }\n *\n * With transformations we can do a lot more than remove properties. We can even return completely new customized objects:\n *\n *     if (!schema.options.toObject) schema.options.toObject = {};\n *     schema.options.toObject.transform = function (doc, ret, options) {\n *       return { movie: ret.name }\n *     }\n *\n *     // without the transformation in the schema\n *     doc.toObject(); // { _id: 'anId', name: 'Wreck-it Ralph' }\n *\n *     // with the transformation\n *     doc.toObject(); // { movie: 'Wreck-it Ralph' }\n *\n * _Note: if a transform function returns `undefined`, the return value will be ignored._\n *\n * Transformations may also be applied inline, overridding any transform set in the options:\n *\n *     function xform (doc, ret, options) {\n *       return { inline: ret.name, custom: true }\n *     }\n *\n *     // pass the transform as an inline option\n *     doc.toObject({ transform: xform }); // { inline: 'Wreck-it Ralph', custom: true }\n *\n * If you want to skip transformations, use `transform: false`:\n *\n *     schema.options.toObject.hide = '_id';\n *     schema.options.toObject.transform = function (doc, ret, options) {\n *       if (options.hide) {\n *         options.hide.split(' ').forEach(function (prop) {\n *           delete ret[prop];\n *         });\n *       }\n *       return ret;\n *     }\n *\n *     const doc = new Doc({ _id: 'anId', secret: 47, name: 'Wreck-it Ralph' });\n *     doc.toObject();                                        // { secret: 47, name: 'Wreck-it Ralph' }\n *     doc.toObject({ hide: 'secret _id', transform: false });// { _id: 'anId', secret: 47, name: 'Wreck-it Ralph' }\n *     doc.toObject({ hide: 'secret _id', transform: true }); // { name: 'Wreck-it Ralph' }\n *\n * If you pass a transform in `toObject()` options, Mongoose will apply the transform\n * to [subdocuments](/docs/subdocs.html) in addition to the top-level document.\n * Similarly, `transform: false` skips transforms for all subdocuments.\n * Note that this is behavior is different for transforms defined in the schema:\n * if you define a transform in `schema.options.toObject.transform`, that transform\n * will **not** apply to subdocuments.\n *\n *     const memberSchema = new Schema({ name: String, email: String });\n *     const groupSchema = new Schema({ members: [memberSchema], name: String, email });\n *     const Group = mongoose.model('Group', groupSchema);\n *\n *     const doc = new Group({\n *       name: 'Engineering',\n *       email: 'dev@mongoosejs.io',\n *       members: [{ name: 'Val', email: 'val@mongoosejs.io' }]\n *     });\n *\n *     // Removes `email` from both top-level document **and** array elements\n *     // { name: 'Engineering', members: [{ name: 'Val' }] }\n *     doc.toObject({ transform: (doc, ret) => { delete ret.email; return ret; } });\n *\n * Transforms, like all of these options, are also available for `toJSON`. See [this guide to `JSON.stringify()`](https://thecodebarbarian.com/the-80-20-guide-to-json-stringify-in-javascript.html) to learn why `toJSON()` and `toObject()` are separate functions.\n *\n * See [schema options](/docs/guide.html#toObject) for some more details.\n *\n * _During save, no custom options are applied to the document before being sent to the database._\n *\n * @param {Object} [options]\n * @param {Boolean} [options.getters=false] if true, apply all getters, including virtuals\n * @param {Boolean} [options.virtuals=false] if true, apply virtuals, including aliases. Use `{ getters: true, virtuals: false }` to just apply getters, not virtuals\n * @param {Boolean} [options.aliases=true] if `options.virtuals = true`, you can set `options.aliases = false` to skip applying aliases. This option is a no-op if `options.virtuals = false`.\n * @param {Boolean} [options.minimize=true] if true, omit any empty objects from the output\n * @param {Function|null} [options.transform=null] if set, mongoose will call this function to allow you to transform the returned object\n * @param {Boolean} [options.depopulate=false] if true, replace any conventionally populated paths with the original id in the output. Has no affect on virtual populated paths.\n * @param {Boolean} [options.versionKey=true] if false, exclude the version key (`__v` by default) from the output\n * @param {Boolean} [options.flattenMaps=false] if true, convert Maps to POJOs. Useful if you want to `JSON.stringify()` the result of `toObject()`.\n * @param {Boolean} [options.useProjection=false] - If true, omits fields that are excluded in this document's projection. Unless you specified a projection, this will omit any field that has `select: false` in the schema.\n * @return {Object} js object\n * @see mongodb.Binary http://mongodb.github.com/node-mongodb-native/api-bson-generated/binary.html\n * @api public\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.toObject = function (options) {\n  return this.$toObject(options);\n};\n/*!\n * Minimizes an object, removing undefined values and empty objects\n *\n * @param {Object} object to minimize\n * @return {Object}\n */\n\n\nfunction minimize(obj) {\n  const keys = Object.keys(obj);\n  let i = keys.length;\n  let hasKeys;\n  let key;\n  let val;\n\n  while (i--) {\n    key = keys[i];\n    val = obj[key];\n\n    if (utils.isObject(val) && !Buffer.isBuffer(val)) {\n      obj[key] = minimize(val);\n    }\n\n    if (undefined === obj[key]) {\n      delete obj[key];\n      continue;\n    }\n\n    hasKeys = true;\n  }\n\n  return hasKeys ? obj : undefined;\n}\n/*!\n * Applies virtuals properties to `json`.\n */\n\n\nfunction applyVirtuals(self, json, options, toObjectOptions) {\n  const schema = self.$__schema;\n  const paths = Object.keys(schema.virtuals);\n  let i = paths.length;\n  const numPaths = i;\n  let path;\n  let assignPath;\n  let cur = self._doc;\n  let v;\n  const aliases = get(toObjectOptions, 'aliases', true);\n\n  if (!cur) {\n    return json;\n  }\n\n  options = options || {};\n\n  for (i = 0; i < numPaths; ++i) {\n    path = paths[i]; // Allow skipping aliases with `toObject({ virtuals: true, aliases: false })`\n\n    if (!aliases && schema.aliases.hasOwnProperty(path)) {\n      continue;\n    } // We may be applying virtuals to a nested object, for example if calling\n    // `doc.nestedProp.toJSON()`. If so, the path we assign to, `assignPath`,\n    // will be a trailing substring of the `path`.\n\n\n    assignPath = path;\n\n    if (options.path != null) {\n      if (!path.startsWith(options.path + '.')) {\n        continue;\n      }\n\n      assignPath = path.substr(options.path.length + 1);\n    }\n\n    const parts = assignPath.split('.');\n    v = clone(self.get(path), options);\n\n    if (v === void 0) {\n      continue;\n    }\n\n    const plen = parts.length;\n    cur = json;\n\n    for (let j = 0; j < plen - 1; ++j) {\n      cur[parts[j]] = cur[parts[j]] || {};\n      cur = cur[parts[j]];\n    }\n\n    cur[parts[plen - 1]] = v;\n  }\n\n  return json;\n}\n/*!\n * Applies virtuals properties to `json`.\n *\n * @param {Document} self\n * @param {Object} json\n * @return {Object} `json`\n */\n\n\nfunction applyGetters(self, json, options) {\n  const schema = self.$__schema;\n  const paths = Object.keys(schema.paths);\n  let i = paths.length;\n  let path;\n  let cur = self._doc;\n  let v;\n\n  if (!cur) {\n    return json;\n  }\n\n  while (i--) {\n    path = paths[i];\n    const parts = path.split('.');\n    const plen = parts.length;\n    const last = plen - 1;\n    let branch = json;\n    let part;\n    cur = self._doc;\n\n    if (!self.$__isSelected(path)) {\n      continue;\n    }\n\n    for (let ii = 0; ii < plen; ++ii) {\n      part = parts[ii];\n      v = cur[part];\n\n      if (ii === last) {\n        const val = self.get(path);\n        branch[part] = clone(val, options);\n      } else if (v == null) {\n        if (part in cur) {\n          branch[part] = v;\n        }\n\n        break;\n      } else {\n        branch = branch[part] || (branch[part] = {});\n      }\n\n      cur = v;\n    }\n  }\n\n  return json;\n}\n/*!\n * Applies schema type transforms to `json`.\n *\n * @param {Document} self\n * @param {Object} json\n * @return {Object} `json`\n */\n\n\nfunction applySchemaTypeTransforms(self, json) {\n  const schema = self.$__schema;\n  const paths = Object.keys(schema.paths || {});\n  const cur = self._doc;\n\n  if (!cur) {\n    return json;\n  }\n\n  for (const path of paths) {\n    const schematype = schema.paths[path];\n\n    if (typeof schematype.options.transform === 'function') {\n      const val = self.get(path);\n      const transformedValue = schematype.options.transform.call(self, val);\n      throwErrorIfPromise(path, transformedValue);\n      utils.setValue(path, transformedValue, json);\n    } else if (schematype.$embeddedSchemaType != null && typeof schematype.$embeddedSchemaType.options.transform === 'function') {\n      const vals = [].concat(self.get(path));\n      const transform = schematype.$embeddedSchemaType.options.transform;\n\n      for (let i = 0; i < vals.length; ++i) {\n        const transformedValue = transform.call(self, vals[i]);\n        vals[i] = transformedValue;\n        throwErrorIfPromise(path, transformedValue);\n      }\n\n      json[path] = vals;\n    }\n  }\n\n  return json;\n}\n\nfunction throwErrorIfPromise(path, transformedValue) {\n  if (isPromise(transformedValue)) {\n    throw new Error('`transform` function must be synchronous, but the transform on path `' + path + '` returned a promise.');\n  }\n}\n/*!\n * ignore\n */\n\n\nfunction omitDeselectedFields(self, json) {\n  const schema = self.$__schema;\n  const paths = Object.keys(schema.paths || {});\n  const cur = self._doc;\n\n  if (!cur) {\n    return json;\n  }\n\n  let selected = self.$__.selected;\n\n  if (selected === void 0) {\n    selected = {};\n    queryhelpers.applyPaths(selected, schema);\n  }\n\n  if (selected == null || Object.keys(selected).length === 0) {\n    return json;\n  }\n\n  for (const path of paths) {\n    if (selected[path] != null && !selected[path]) {\n      delete json[path];\n    }\n  }\n\n  return json;\n}\n/**\n * The return value of this method is used in calls to JSON.stringify(doc).\n *\n * This method accepts the same options as [Document#toObject](#document_Document-toObject). To apply the options to every document of your schema by default, set your [schemas](#schema_Schema) `toJSON` option to the same argument.\n *\n *     schema.set('toJSON', { virtuals: true })\n *\n * See [schema options](/docs/guide.html#toJSON) for details.\n *\n * @param {Object} options\n * @return {Object}\n * @see Document#toObject #document_Document-toObject\n * @see JSON.stringify() in JavaScript https://thecodebarbarian.com/the-80-20-guide-to-json-stringify-in-javascript.html\n * @api public\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.toJSON = function (options) {\n  return this.$toObject(options, true);\n};\n/**\n * If this document is a subdocument or populated document, returns the document's\n * parent. Returns `undefined` otherwise.\n *\n * @api public\n * @method parent\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.parent = function () {\n  return this.$__.parent;\n};\n/**\n * Alias for `parent()`. If this document is a subdocument or populated\n * document, returns the document's parent. Returns `undefined` otherwise.\n *\n * @api public\n * @method $parent\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.$parent = Document.prototype.parent;\n/**\n * Helper for console.log\n *\n * @api public\n * @method inspect\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.inspect = function (options) {\n  const isPOJO = utils.isPOJO(options);\n  let opts;\n\n  if (isPOJO) {\n    opts = options;\n    opts.minimize = false;\n  }\n\n  const ret = this.toObject(opts);\n\n  if (ret == null) {\n    // If `toObject()` returns null, `this` is still an object, so if `inspect()`\n    // prints out null this can cause some serious confusion. See gh-7942.\n    return 'MongooseDocument { ' + ret + ' }';\n  }\n\n  return ret;\n};\n\nif (inspect.custom) {\n  /*!\n  * Avoid Node deprecation warning DEP0079\n  */\n  Document.prototype[inspect.custom] = Document.prototype.inspect;\n}\n/**\n * Helper for console.log\n *\n * @api public\n * @method toString\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.toString = function () {\n  const ret = this.inspect();\n\n  if (typeof ret === 'string') {\n    return ret;\n  }\n\n  return inspect(ret);\n};\n/**\n * Returns true if this document is equal to another document.\n *\n * Documents are considered equal when they have matching `_id`s, unless neither\n * document has an `_id`, in which case this function falls back to using\n * `deepEqual()`.\n *\n * @param {Document} doc a document to compare\n * @return {Boolean}\n * @api public\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.equals = function (doc) {\n  if (!doc) {\n    return false;\n  }\n\n  const tid = this.$__getValue('_id');\n  const docid = doc.$__ != null ? doc.$__getValue('_id') : doc;\n\n  if (!tid && !docid) {\n    return deepEqual(this, doc);\n  }\n\n  return tid && tid.equals ? tid.equals(docid) : tid === docid;\n};\n/**\n * Populates document references, executing the `callback` when complete.\n * If you want to use promises instead, use this function with\n * [`execPopulate()`](#document_Document-execPopulate)\n *\n * ####Example:\n *\n *     doc\n *     .populate('company')\n *     .populate({\n *       path: 'notes',\n *       match: /airline/,\n *       select: 'text',\n *       model: 'modelName'\n *       options: opts\n *     }, function (err, user) {\n *       assert(doc._id === user._id) // the document itself is passed\n *     })\n *\n *     // summary\n *     doc.populate(path)                   // not executed\n *     doc.populate(options);               // not executed\n *     doc.populate(path, callback)         // executed\n *     doc.populate(options, callback);     // executed\n *     doc.populate(callback);              // executed\n *     doc.populate(options).execPopulate() // executed, returns promise\n *\n *\n * ####NOTE:\n *\n * Population does not occur unless a `callback` is passed *or* you explicitly\n * call `execPopulate()`.\n * Passing the same path a second time will overwrite the previous path options.\n * See [Model.populate()](#model_Model.populate) for explaination of options.\n *\n * @see Model.populate #model_Model.populate\n * @see Document.execPopulate #document_Document-execPopulate\n * @param {String|Object} [path] The path to populate or an options object\n * @param {Function} [callback] When passed, population is invoked\n * @api public\n * @return {Document} this\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.populate = function populate() {\n  if (arguments.length === 0) {\n    return this;\n  }\n\n  const pop = this.$__.populate || (this.$__.populate = {});\n  const args = utils.args(arguments);\n  let fn;\n\n  if (typeof args[args.length - 1] === 'function') {\n    fn = args.pop();\n  } // allow `doc.populate(callback)`\n\n\n  if (args.length) {\n    // use hash to remove duplicate paths\n    const res = utils.populate.apply(null, args);\n\n    for (const populateOptions of res) {\n      pop[populateOptions.path] = populateOptions;\n    }\n  }\n\n  if (fn) {\n    const paths = utils.object.vals(pop);\n    this.$__.populate = undefined;\n    let topLevelModel = this.constructor;\n\n    if (this.$__isNested) {\n      topLevelModel = this.$__[scopeSymbol].constructor;\n      const nestedPath = this.$__.nestedPath;\n      paths.forEach(function (populateOptions) {\n        populateOptions.path = nestedPath + '.' + populateOptions.path;\n      });\n    } // Use `$session()` by default if the document has an associated session\n    // See gh-6754\n\n\n    if (this.$session() != null) {\n      const session = this.$session();\n      paths.forEach(path => {\n        if (path.options == null) {\n          path.options = {\n            session: session\n          };\n          return;\n        }\n\n        if (!('session' in path.options)) {\n          path.options.session = session;\n        }\n      });\n    }\n\n    topLevelModel.populate(this, paths, fn);\n  }\n\n  return this;\n};\n/**\n * Gets all populated documents associated with this document.\n *\n * @api public\n * @return {Array<Document>} array of populated documents. Empty array if there are no populated documents associated with this document.\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.$getPopulatedDocs = function $getPopulatedDocs() {\n  let keys = [];\n\n  if (this.$__.populated != null) {\n    keys = keys.concat(Object.keys(this.$__.populated));\n  }\n\n  if (this.$$populatedVirtuals != null) {\n    keys = keys.concat(Object.keys(this.$$populatedVirtuals));\n  }\n\n  let result = [];\n\n  for (const key of keys) {\n    const value = this.get(key);\n\n    if (Array.isArray(value)) {\n      result = result.concat(value);\n    } else if (value instanceof Document) {\n      result.push(value);\n    }\n  }\n\n  return result;\n};\n/**\n * Explicitly executes population and returns a promise. Useful for promises integration.\n *\n * ####Example:\n *\n *     const promise = doc.\n *       populate('company').\n *       populate({\n *         path: 'notes',\n *         match: /airline/,\n *         select: 'text',\n *         model: 'modelName'\n *         options: opts\n *       }).\n *       execPopulate();\n *\n *     // summary\n *     doc.execPopulate().then(resolve, reject);\n *\n *   // you can also use doc.execPopulate(options) as a shorthand for\n *   // doc.populate(options).execPopulate()\n *\n *\n * ####Example:\n *   const promise = doc.execPopulate({ path: 'company', select: 'employees' });\n *\n *   // summary\n *   promise.then(resolve,reject);\n *\n * @see Document.populate #document_Document-populate\n * @api public\n * @param {Function} [callback] optional callback. If specified, a promise will **not** be returned\n * @return {Promise} promise that resolves to the document when population is done\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.execPopulate = function (callback) {\n  const isUsingShorthand = callback != null && typeof callback !== 'function';\n\n  if (isUsingShorthand) {\n    return this.populate.apply(this, arguments).execPopulate();\n  }\n\n  return promiseOrCallback(callback, cb => {\n    this.populate(cb);\n  }, this.constructor.events);\n};\n/**\n * Gets _id(s) used during population of the given `path`.\n *\n * ####Example:\n *\n *     Model.findOne().populate('author').exec(function (err, doc) {\n *       console.log(doc.author.name)         // Dr.Seuss\n *       console.log(doc.populated('author')) // '5144cf8050f071d979c118a7'\n *     })\n *\n * If the path was not populated, returns `undefined`.\n *\n * @param {String} path\n * @return {Array|ObjectId|Number|Buffer|String|undefined}\n * @memberOf Document\n * @instance\n * @api public\n */\n\n\nDocument.prototype.populated = function (path, val, options) {\n  // val and options are internal\n  if (val == null || val === true) {\n    if (!this.$__.populated) {\n      return undefined;\n    } // Map paths can be populated with either `path.$*` or just `path`\n\n\n    const _path = path.endsWith('.$*') ? path.replace(/\\.\\$\\*$/, '') : path;\n\n    const v = this.$__.populated[_path];\n\n    if (v) {\n      return val === true ? v : v.value;\n    }\n\n    return undefined;\n  }\n\n  this.$__.populated || (this.$__.populated = {});\n  this.$__.populated[path] = {\n    value: val,\n    options: options\n  }; // If this was a nested populate, make sure each populated doc knows\n  // about its populated children (gh-7685)\n\n  const pieces = path.split('.');\n\n  for (let i = 0; i < pieces.length - 1; ++i) {\n    const subpath = pieces.slice(0, i + 1).join('.');\n    const subdoc = this.get(subpath);\n\n    if (subdoc != null && subdoc.$__ != null && this.populated(subpath)) {\n      const rest = pieces.slice(i + 1).join('.');\n      subdoc.populated(rest, val, options); // No need to continue because the above recursion should take care of\n      // marking the rest of the docs as populated\n\n      break;\n    }\n  }\n\n  return val;\n};\n/**\n * Takes a populated field and returns it to its unpopulated state.\n *\n * ####Example:\n *\n *     Model.findOne().populate('author').exec(function (err, doc) {\n *       console.log(doc.author.name); // Dr.Seuss\n *       console.log(doc.depopulate('author'));\n *       console.log(doc.author); // '5144cf8050f071d979c118a7'\n *     })\n *\n * If the path was not populated, this is a no-op.\n *\n * @param {String} path\n * @return {Document} this\n * @see Document.populate #document_Document-populate\n * @api public\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.depopulate = function (path) {\n  if (typeof path === 'string') {\n    path = path.split(' ');\n  }\n\n  let populatedIds;\n  const virtualKeys = this.$$populatedVirtuals ? Object.keys(this.$$populatedVirtuals) : [];\n  const populated = get(this, '$__.populated', {});\n\n  if (arguments.length === 0) {\n    // Depopulate all\n    for (const virtualKey of virtualKeys) {\n      delete this.$$populatedVirtuals[virtualKey];\n      delete this._doc[virtualKey];\n      delete populated[virtualKey];\n    }\n\n    const keys = Object.keys(populated);\n\n    for (const key of keys) {\n      populatedIds = this.populated(key);\n\n      if (!populatedIds) {\n        continue;\n      }\n\n      delete populated[key];\n      this.$set(key, populatedIds);\n    }\n\n    return this;\n  }\n\n  for (const singlePath of path) {\n    populatedIds = this.populated(singlePath);\n    delete populated[singlePath];\n\n    if (virtualKeys.indexOf(singlePath) !== -1) {\n      delete this.$$populatedVirtuals[singlePath];\n      delete this._doc[singlePath];\n    } else if (populatedIds) {\n      this.$set(singlePath, populatedIds);\n    }\n  }\n\n  return this;\n};\n/**\n * Returns the full path to this document.\n *\n * @param {String} [path]\n * @return {String}\n * @api private\n * @method $__fullPath\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.$__fullPath = function (path) {\n  // overridden in SubDocuments\n  return path || '';\n};\n/**\n * Returns the changes that happened to the document\n * in the format that will be sent to MongoDB.\n *\n * #### Example:\n *\n *     const userSchema = new Schema({\n *       name: String,\n *       age: Number,\n *       country: String\n *     });\n *     const User = mongoose.model('User', userSchema);\n *     const user = await User.create({\n *       name: 'Hafez',\n *       age: 25,\n *       country: 'Egypt'\n *     });\n *\n *     // returns an empty object, no changes happened yet\n *     user.getChanges(); // { }\n *\n *     user.country = undefined;\n *     user.age = 26;\n *\n *     user.getChanges(); // { $set: { age: 26 }, { $unset: { country: 1 } } }\n *\n *     await user.save();\n *\n *     user.getChanges(); // { }\n *\n * Modifying the object that `getChanges()` returns does not affect the document's\n * change tracking state. Even if you `delete user.getChanges().$set`, Mongoose\n * will still send a `$set` to the server.\n *\n * @return {Object}\n * @api public\n * @method getChanges\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.getChanges = function () {\n  const delta = this.$__delta();\n  const changes = delta ? delta[1] : {};\n  return changes;\n};\n/*!\n * Module exports.\n */\n\n\nDocument.ValidationError = ValidationError;\nmodule.exports = exports = Document;","map":{"version":3,"sources":["/home/lucho/Desktop/Heros-SPA/node_modules/mongoose/lib/document.js"],"names":["EventEmitter","require","InternalCache","MongooseError","MixedSchema","ObjectExpectedError","ObjectParameterError","ParallelValidateError","Schema","StrictModeError","ValidationError","ValidatorError","VirtualType","promiseOrCallback","cleanModifiedSubpaths","compile","defineKey","flatten","get","getEmbeddedDiscriminatorPath","handleSpreadDoc","idGetter","immediate","isDefiningProjection","isExclusive","inspect","internalToObjectOptions","mpath","queryhelpers","utils","isPromise","clone","deepEqual","isMongooseObject","arrayAtomicsBackupSymbol","Symbol","arrayAtomicsSymbol","documentArrayParent","documentIsModified","documentModifiedPaths","documentSchemaSymbol","getSymbol","populateModelSymbol","scopeSymbol","schemaMixedSymbol","DocumentArray","MongooseArray","Embedded","specialProperties","Document","obj","fields","skipId","options","Object","assign","defaults","$__schema","_schema","isObject","instanceOfSchema","$__setSchema","arguments","$__","emitter","isNew","errors","undefined","$options","$locals","$op","schema","strictMode","strict","selected","requiredPaths","path","activePaths","setMaxListeners","exclude","isPOJO","hasIncludedChildren","$__hasIncludedChildren","_doc","$__buildDoc","$__applyDefaults","$__original_set","$set","willInit","prototype","once","call","skipDefaults","_id","_this","keys","forEach","key","tree","applyQueue","each","emitterFn","apply","constructor","i","defineProperty","configurable","enumerable","writable","id","parts","split","c","part","push","join","doc","isBeforeSetters","pathsToSkip","paths","plen","length","def","curPath","p","type","splitPath","len","included","doc_","j","piece","defaultValue","$runBeforeSetters","getDefault","err","invalidate","default","filter","includes","ii","last","toBSON","toObject","init","opts","fn","$__init","$init","populated","String","item","isVirtual","getValue","_docs","_childDocs","child","parent","markArraySubdocsPopulated","emit","pieces","subpath","slice","rest","val","isMongooseDocumentArray","self","prefix","index","_init","$isRootDiscriminator","$__isSelected","_castNullish","intCache","wasPopulated","cast","e","message","value","reason","isModified","update","args","unshift","query","$session","session","updateOne","callback","pre","cb","_middleware","execPre","post","execPost","exec","replaceOne","ownerDocument","subdocs","$getAllSubdocs","overwrite","Array","from","Set","concat","versionKey","discriminatorKey","merge","adhoc","constructing","adhocs","pathtype","adhocPaths","interpretAsType","_","$__isNested","_skipMinimizeTopLevel","pathName","pathType","someCondition","isNativeObject","isMongooseType","$__path","ref","$setCalled","add","typeOnly","$isSingleNested","virtuals","transform","hasPriorVal","savedState","hasOwnProperty","priorVal","$__getValue","$__setValue","unmarkModified","markModified","skipDocArrays","CastError","indexOf","aliases","mixed","set","virtualpath","applySetters","cur","pathToMark","getters","priorDoc","$__set","$isMongooseArray","_markValidSubpaths","shouldSet","refMatches","model","modelName","baseModelName","refPath","didPopulate","popOpts","isArray","typeKey","_isManuallyPopulatedArray","$__fullPath","map","v","singleNestedPaths","$isMongooseDocumentArray","populatedPaths","populatedPath","_checkImmutableSubpaths","$markValid","isImmutableError","$originalErrorPath","instance","isDirectModified","el","$__shouldModify","states","shouldModify","isMongooseArray","_registerAtomic","__parentArray","modifiedPath","startsWith","ignore","l","next","has","Map","setValue","virtual","applyGetters","nested","applyVirtuals","adhocType","scope","modify","pathsToScopes","$ignore","directModifiedPaths","$isEmpty","isEmptyOptions","minimize","_isEmpty","modifiedPaths","reduce","list","chains","chain","includeChildren","modified","childPath","isModifiedChild","some","mod","$isDefault","$isDeleted","isDeleted","isInit","isSelected","inclusive","pathDot","isDirectSelected","validate","pathsToValidate","parallelValidate","validating","parentStack","conflictStack","stack","$__validate","error","events","_evaluateRequiredFunctions","originalRequiredValue","cachedRequired","_getPathsToValidate","skipSchemaValidators","addToPaths","subdoc","$basePath","delete","_pathType","_pushNestedArrayPaths","numElements","flattenOptions","skipArrays","pathToCheck","_v","flat","$isSchemaMap","hasValidateModifiedOnlyOption","shouldValidateModifiedOnly","validateModifiedOnly","_complete","validationError","errPath","pathDetails","_handlePathsToValidate","s","hooks","validated","total","complete","validatePath","schemaType","$isValid","pop","doValidateOptions","doValidate","$isArrayValidatorError","storeSubdocValidationError","numPaths","_pathsToValidate","parentPaths","ret","validateSync","doValidateSync","kind","addError","schematype","$immutableSetter","oldVal","$__reset","reset","array","$path","$__parent","$__dirty","dirt","backup","clear","$__undoReset","all","sort","a","b","minimal","lastPath","top","hasAtomics","plugin","deduplicate","_applyDefaultGetters","$__getArrayPathsToValidate","bind","seed","docReducer","isNested","_docReduce","subDocs","q","callQueue","pair","$__handleReject","handleReject","listeners","$toObject","json","defaultOptions","flattenDecimals","baseOptions","schemaOptions","_calledWithOptions","_minimize","flattenMaps","cloneOptions","_isNested","hasUserDefinedProperty","depopulate","_parentOptions","_skipSingleNestedGetters","gettersOptions","originalTransform","applySchemaTypeTransforms","useProjection","omitDeselectedFields","toJSON","xformed","hasKeys","Buffer","isBuffer","toObjectOptions","assignPath","substr","branch","transformedValue","throwErrorIfPromise","$embeddedSchemaType","vals","Error","applyPaths","$parent","custom","toString","equals","tid","docid","populate","res","populateOptions","object","topLevelModel","nestedPath","$getPopulatedDocs","$$populatedVirtuals","result","execPopulate","isUsingShorthand","_path","endsWith","replace","populatedIds","virtualKeys","virtualKey","singlePath","getChanges","delta","$__delta","changes","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst EventEmitter = require('events').EventEmitter;\nconst InternalCache = require('./internal');\nconst MongooseError = require('./error/index');\nconst MixedSchema = require('./schema/mixed');\nconst ObjectExpectedError = require('./error/objectExpected');\nconst ObjectParameterError = require('./error/objectParameter');\nconst ParallelValidateError = require('./error/parallelValidate');\nconst Schema = require('./schema');\nconst StrictModeError = require('./error/strict');\nconst ValidationError = require('./error/validation');\nconst ValidatorError = require('./error/validator');\nconst VirtualType = require('./virtualtype');\nconst promiseOrCallback = require('./helpers/promiseOrCallback');\nconst cleanModifiedSubpaths = require('./helpers/document/cleanModifiedSubpaths');\nconst compile = require('./helpers/document/compile').compile;\nconst defineKey = require('./helpers/document/compile').defineKey;\nconst flatten = require('./helpers/common').flatten;\nconst get = require('./helpers/get');\nconst getEmbeddedDiscriminatorPath = require('./helpers/document/getEmbeddedDiscriminatorPath');\nconst handleSpreadDoc = require('./helpers/document/handleSpreadDoc');\nconst idGetter = require('./plugins/idGetter');\nconst immediate = require('./helpers/immediate');\nconst isDefiningProjection = require('./helpers/projection/isDefiningProjection');\nconst isExclusive = require('./helpers/projection/isExclusive');\nconst inspect = require('util').inspect;\nconst internalToObjectOptions = require('./options').internalToObjectOptions;\nconst mpath = require('mpath');\nconst queryhelpers = require('./queryhelpers');\nconst utils = require('./utils');\nconst isPromise = require('./helpers/isPromise');\n\nconst clone = utils.clone;\nconst deepEqual = utils.deepEqual;\nconst isMongooseObject = utils.isMongooseObject;\n\nconst arrayAtomicsBackupSymbol = Symbol('mongoose.Array#atomicsBackup');\nconst arrayAtomicsSymbol = require('./helpers/symbols').arrayAtomicsSymbol;\nconst documentArrayParent = require('./helpers/symbols').documentArrayParent;\nconst documentIsModified = require('./helpers/symbols').documentIsModified;\nconst documentModifiedPaths = require('./helpers/symbols').documentModifiedPaths;\nconst documentSchemaSymbol = require('./helpers/symbols').documentSchemaSymbol;\nconst getSymbol = require('./helpers/symbols').getSymbol;\nconst populateModelSymbol = require('./helpers/symbols').populateModelSymbol;\nconst scopeSymbol = require('./helpers/symbols').scopeSymbol;\nconst schemaMixedSymbol = require('./schema/symbols').schemaMixedSymbol;\n\nlet DocumentArray;\nlet MongooseArray;\nlet Embedded;\n\nconst specialProperties = utils.specialProperties;\n\n/**\n * The core Mongoose document constructor. You should not call this directly,\n * the Mongoose [Model constructor](./api.html#Model) calls this for you.\n *\n * @param {Object} obj the values to set\n * @param {Object} [fields] optional object containing the fields which were selected in the query returning this document and any populated paths data\n * @param {Object} [options] various configuration options for the document\n * @param {Boolean} [options.defaults=true] if `false`, skip applying default values to this document.\n * @inherits NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter\n * @event `init`: Emitted on a document after it has been retrieved from the db and fully hydrated by Mongoose.\n * @event `save`: Emitted when the document is successfully saved\n * @api private\n */\n\nfunction Document(obj, fields, skipId, options) {\n  if (typeof skipId === 'object' && skipId != null) {\n    options = skipId;\n    skipId = options.skipId;\n  }\n  options = Object.assign({}, options);\n  const defaults = get(options, 'defaults', true);\n  options.defaults = defaults;\n  // Support `browserDocument.js` syntax\n  if (this.$__schema == null) {\n    const _schema = utils.isObject(fields) && !fields.instanceOfSchema ?\n      new Schema(fields) :\n      fields;\n    this.$__setSchema(_schema);\n    fields = skipId;\n    skipId = options;\n    options = arguments[4] || {};\n  }\n\n  this.$__ = new InternalCache;\n  this.$__.emitter = new EventEmitter();\n  this.isNew = 'isNew' in options ? options.isNew : true;\n  this.errors = undefined;\n  this.$__.$options = options || {};\n  this.$locals = {};\n  this.$op = null;\n  if (obj != null && typeof obj !== 'object') {\n    throw new ObjectParameterError(obj, 'obj', 'Document');\n  }\n\n  const schema = this.$__schema;\n\n  if (typeof fields === 'boolean' || fields === 'throw') {\n    this.$__.strictMode = fields;\n    fields = undefined;\n  } else {\n    this.$__.strictMode = schema.options.strict;\n    this.$__.selected = fields;\n  }\n\n  const requiredPaths = schema.requiredPaths(true);\n  for (const path of requiredPaths) {\n    this.$__.activePaths.require(path);\n  }\n\n  this.$__.emitter.setMaxListeners(0);\n\n  let exclude = null;\n\n  // determine if this doc is a result of a query with\n  // excluded fields\n  if (utils.isPOJO(fields)) {\n    exclude = isExclusive(fields);\n  }\n\n  const hasIncludedChildren = exclude === false && fields ?\n    $__hasIncludedChildren(fields) :\n    {};\n\n  if (this._doc == null) {\n    this.$__buildDoc(obj, fields, skipId, exclude, hasIncludedChildren, false);\n\n    // By default, defaults get applied **before** setting initial values\n    // Re: gh-6155\n    if (defaults) {\n      $__applyDefaults(this, fields, skipId, exclude, hasIncludedChildren, true, {\n        isNew: this.isNew\n      });\n    }\n  }\n  if (obj) {\n    // Skip set hooks\n    if (this.$__original_set) {\n      this.$__original_set(obj, undefined, true);\n    } else {\n      this.$set(obj, undefined, true);\n    }\n\n    if (obj instanceof Document) {\n      this.isNew = obj.isNew;\n    }\n  }\n\n  // Function defaults get applied **after** setting initial values so they\n  // see the full doc rather than an empty one, unless they opt out.\n  // Re: gh-3781, gh-6155\n  if (options.willInit && defaults) {\n    EventEmitter.prototype.once.call(this, 'init', () => {\n      $__applyDefaults(this, fields, skipId, exclude, hasIncludedChildren, false, options.skipDefaults, {\n        isNew: this.isNew\n      });\n    });\n  } else if (defaults) {\n    $__applyDefaults(this, fields, skipId, exclude, hasIncludedChildren, false, options.skipDefaults, {\n      isNew: this.isNew\n    });\n  }\n\n  this.$__._id = this._id;\n\n  if (!this.$__.strictMode && obj) {\n    const _this = this;\n    const keys = Object.keys(this._doc);\n\n    keys.forEach(function(key) {\n      if (!(key in schema.tree)) {\n        defineKey(key, null, _this);\n      }\n    });\n  }\n\n  applyQueue(this);\n}\n\n/*!\n * Document exposes the NodeJS event emitter API, so you can use\n * `on`, `once`, etc.\n */\nutils.each(\n  ['on', 'once', 'emit', 'listeners', 'removeListener', 'setMaxListeners',\n    'removeAllListeners', 'addListener'],\n  function(emitterFn) {\n    Document.prototype[emitterFn] = function() {\n      return this.$__.emitter[emitterFn].apply(this.$__.emitter, arguments);\n    };\n  });\n\nDocument.prototype.constructor = Document;\n\nfor (const i in EventEmitter.prototype) {\n  Document[i] = EventEmitter.prototype[i];\n}\n\n/**\n * The document's internal schema.\n *\n * @api private\n * @property schema\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__schema;\n\n/**\n * The document's schema.\n *\n * @api public\n * @property schema\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.schema;\n\n/**\n * Empty object that you can use for storing properties on the document. This\n * is handy for passing data to middleware without conflicting with Mongoose\n * internals.\n *\n * ####Example:\n *\n *     schema.pre('save', function() {\n *       // Mongoose will set `isNew` to `false` if `save()` succeeds\n *       this.$locals.wasNew = this.isNew;\n *     });\n *\n *     schema.post('save', function() {\n *       // Prints true if `isNew` was set before `save()`\n *       console.log(this.$locals.wasNew);\n *     });\n *\n * @api public\n * @property $locals\n * @memberOf Document\n * @instance\n */\n\nObject.defineProperty(Document.prototype, '$locals', {\n  configurable: false,\n  enumerable: false,\n  writable: true\n});\n\n/**\n * Boolean flag specifying if the document is new.\n *\n * @api public\n * @property isNew\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.isNew;\n\n/**\n * The string version of this documents _id.\n *\n * ####Note:\n *\n * This getter exists on all documents by default. The getter can be disabled by setting the `id` [option](/docs/guide.html#id) of its `Schema` to false at construction time.\n *\n *     new Schema({ name: String }, { id: false });\n *\n * @api public\n * @see Schema options /docs/guide.html#options\n * @property id\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.id;\n\n/**\n * Hash containing current validation errors.\n *\n * @api public\n * @property errors\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.errors;\n\n/**\n * A string containing the current operation that Mongoose is executing\n * on this document. May be `null`, `'save'`, `'validate'`, or `'remove'`.\n *\n * ####Example:\n *\n *     const doc = new Model({ name: 'test' });\n *     doc.$op; // null\n *\n *     const promise = doc.save();\n *     doc.$op; // 'save'\n *\n *     await promise;\n *     doc.$op; // null\n *\n * @api public\n * @property $op\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$op;\n\n/*!\n * ignore\n */\n\nfunction $__hasIncludedChildren(fields) {\n  const hasIncludedChildren = {};\n  const keys = Object.keys(fields);\n\n  for (const key of keys) {\n    const parts = key.split('.');\n    const c = [];\n\n    for (const part of parts) {\n      c.push(part);\n      hasIncludedChildren[c.join('.')] = 1;\n    }\n  }\n\n  return hasIncludedChildren;\n}\n\n/*!\n * ignore\n */\n\nfunction $__applyDefaults(doc, fields, skipId, exclude, hasIncludedChildren, isBeforeSetters, pathsToSkip) {\n  const paths = Object.keys(doc.$__schema.paths);\n  const plen = paths.length;\n\n  for (let i = 0; i < plen; ++i) {\n    let def;\n    let curPath = '';\n    const p = paths[i];\n\n    if (p === '_id' && skipId) {\n      continue;\n    }\n\n    const type = doc.$__schema.paths[p];\n    const path = type.splitPath();\n    const len = path.length;\n    let included = false;\n    let doc_ = doc._doc;\n    for (let j = 0; j < len; ++j) {\n      if (doc_ == null) {\n        break;\n      }\n\n      const piece = path[j];\n      curPath += (!curPath.length ? '' : '.') + piece;\n\n      if (exclude === true) {\n        if (curPath in fields) {\n          break;\n        }\n      } else if (exclude === false && fields && !included) {\n        if (curPath in fields) {\n          included = true;\n        } else if (!hasIncludedChildren[curPath]) {\n          break;\n        }\n      }\n\n      if (j === len - 1) {\n        if (doc_[piece] !== void 0) {\n          break;\n        }\n\n        if (typeof type.defaultValue === 'function') {\n          if (!type.defaultValue.$runBeforeSetters && isBeforeSetters) {\n            break;\n          }\n          if (type.defaultValue.$runBeforeSetters && !isBeforeSetters) {\n            break;\n          }\n        } else if (!isBeforeSetters) {\n          // Non-function defaults should always run **before** setters\n          continue;\n        }\n\n        if (pathsToSkip && pathsToSkip[curPath]) {\n          break;\n        }\n\n        if (fields && exclude !== null) {\n          if (exclude === true) {\n            // apply defaults to all non-excluded fields\n            if (p in fields) {\n              continue;\n            }\n\n            try {\n              def = type.getDefault(doc, false);\n            } catch (err) {\n              doc.invalidate(p, err);\n              break;\n            }\n\n            if (typeof def !== 'undefined') {\n              doc_[piece] = def;\n              doc.$__.activePaths.default(p);\n            }\n          } else if (included) {\n            // selected field\n            try {\n              def = type.getDefault(doc, false);\n            } catch (err) {\n              doc.invalidate(p, err);\n              break;\n            }\n\n            if (typeof def !== 'undefined') {\n              doc_[piece] = def;\n              doc.$__.activePaths.default(p);\n            }\n          }\n        } else {\n          try {\n            def = type.getDefault(doc, false);\n          } catch (err) {\n            doc.invalidate(p, err);\n            break;\n          }\n\n          if (typeof def !== 'undefined') {\n            doc_[piece] = def;\n            doc.$__.activePaths.default(p);\n          }\n        }\n      } else {\n        doc_ = doc_[piece];\n      }\n    }\n  }\n}\n\n/**\n * Builds the default doc structure\n *\n * @param {Object} obj\n * @param {Object} [fields]\n * @param {Boolean} [skipId]\n * @api private\n * @method $__buildDoc\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__buildDoc = function(obj, fields, skipId, exclude, hasIncludedChildren) {\n  const doc = {};\n\n  const paths = Object.keys(this.$__schema.paths).\n    // Don't build up any paths that are underneath a map, we don't know\n    // what the keys will be\n    filter(p => !p.includes('$*'));\n  const plen = paths.length;\n  let ii = 0;\n\n  for (; ii < plen; ++ii) {\n    const p = paths[ii];\n\n    if (p === '_id') {\n      if (skipId) {\n        continue;\n      }\n      if (obj && '_id' in obj) {\n        continue;\n      }\n    }\n\n    const path = this.$__schema.paths[p].splitPath();\n    const len = path.length;\n    const last = len - 1;\n    let curPath = '';\n    let doc_ = doc;\n    let included = false;\n\n    for (let i = 0; i < len; ++i) {\n      const piece = path[i];\n\n      curPath += (!curPath.length ? '' : '.') + piece;\n\n      // support excluding intermediary levels\n      if (exclude === true) {\n        if (curPath in fields) {\n          break;\n        }\n      } else if (exclude === false && fields && !included) {\n        if (curPath in fields) {\n          included = true;\n        } else if (!hasIncludedChildren[curPath]) {\n          break;\n        }\n      }\n\n      if (i < last) {\n        doc_ = doc_[piece] || (doc_[piece] = {});\n      }\n    }\n  }\n\n  this._doc = doc;\n};\n\n/*!\n * Converts to POJO when you use the document for querying\n */\n\nDocument.prototype.toBSON = function() {\n  return this.toObject(internalToObjectOptions);\n};\n\n/**\n * Initializes the document without setters or marking anything modified.\n *\n * Called internally after a document is returned from mongodb. Normally,\n * you do **not** need to call this function on your own.\n *\n * This function triggers `init` [middleware](/docs/middleware.html).\n * Note that `init` hooks are [synchronous](/docs/middleware.html#synchronous).\n *\n * @param {Object} doc document returned by mongo\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.init = function(doc, opts, fn) {\n  if (typeof opts === 'function') {\n    fn = opts;\n    opts = null;\n  }\n\n  this.$__init(doc, opts);\n\n  if (fn) {\n    fn(null, this);\n  }\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nDocument.prototype.$__init = function(doc, opts) {\n  this.isNew = false;\n  this.$init = true;\n  opts = opts || {};\n\n  // handle docs with populated paths\n  // If doc._id is not null or undefined\n  if (doc._id != null && opts.populated && opts.populated.length) {\n    const id = String(doc._id);\n    for (const item of opts.populated) {\n      if (item.isVirtual) {\n        this.populated(item.path, utils.getValue(item.path, doc), item);\n      } else {\n        this.populated(item.path, item._docs[id], item);\n      }\n\n      if (item._childDocs == null) {\n        continue;\n      }\n      for (const child of item._childDocs) {\n        if (child == null || child.$__ == null) {\n          continue;\n        }\n        child.$__.parent = this;\n      }\n      item._childDocs = [];\n    }\n  }\n\n  init(this, doc, this._doc, opts);\n\n  markArraySubdocsPopulated(this, opts.populated);\n\n  this.emit('init', this);\n  this.constructor.emit('init', this);\n\n  this.$__._id = this._id;\n  return this;\n};\n\n/*!\n * If populating a path within a document array, make sure each\n * subdoc within the array knows its subpaths are populated.\n *\n * ####Example:\n *     const doc = await Article.findOne().populate('comments.author');\n *     doc.comments[0].populated('author'); // Should be set\n */\n\nfunction markArraySubdocsPopulated(doc, populated) {\n  if (doc._id == null || populated == null || populated.length === 0) {\n    return;\n  }\n\n  const id = String(doc._id);\n  for (const item of populated) {\n    if (item.isVirtual) {\n      continue;\n    }\n    const path = item.path;\n    const pieces = path.split('.');\n    for (let i = 0; i < pieces.length - 1; ++i) {\n      const subpath = pieces.slice(0, i + 1).join('.');\n      const rest = pieces.slice(i + 1).join('.');\n      const val = doc.get(subpath);\n      if (val == null) {\n        continue;\n      }\n\n      if (val.isMongooseDocumentArray) {\n        for (let j = 0; j < val.length; ++j) {\n          val[j].populated(rest, item._docs[id] == null ? [] : item._docs[id][j], item);\n        }\n        break;\n      }\n    }\n  }\n}\n\n/*!\n * Init helper.\n *\n * @param {Object} self document instance\n * @param {Object} obj raw mongodb doc\n * @param {Object} doc object we are initializing\n * @api private\n */\n\nfunction init(self, obj, doc, opts, prefix) {\n  prefix = prefix || '';\n\n  const keys = Object.keys(obj);\n  const len = keys.length;\n  let schema;\n  let path;\n  let i;\n  let index = 0;\n\n  while (index < len) {\n    _init(index++);\n  }\n\n  function _init(index) {\n    i = keys[index];\n    path = prefix + i;\n    schema = self.$__schema.path(path);\n\n    // Should still work if not a model-level discriminator, but should not be\n    // necessary. This is *only* to catch the case where we queried using the\n    // base model and the discriminated model has a projection\n    if (self.$__schema.$isRootDiscriminator && !self.$__isSelected(path)) {\n      return;\n    }\n\n    if (!schema && utils.isPOJO(obj[i])) {\n      // assume nested object\n      if (!doc[i]) {\n        doc[i] = {};\n      }\n      init(self, obj[i], doc[i], opts, path + '.');\n    } else if (!schema) {\n      doc[i] = obj[i];\n    } else {\n      if (obj[i] === null) {\n        doc[i] = schema._castNullish(null);\n      } else if (obj[i] !== undefined) {\n        const intCache = obj[i].$__ || {};\n        const wasPopulated = intCache.wasPopulated || null;\n\n        if (schema && !wasPopulated) {\n          try {\n            doc[i] = schema.cast(obj[i], self, true);\n          } catch (e) {\n            self.invalidate(e.path, new ValidatorError({\n              path: e.path,\n              message: e.message,\n              type: 'cast',\n              value: e.value,\n              reason: e\n            }));\n          }\n        } else {\n          doc[i] = obj[i];\n        }\n      }\n      // mark as hydrated\n      if (!self.isModified(path)) {\n        self.$__.activePaths.init(path);\n      }\n    }\n  }\n}\n\n/**\n * Sends an update command with this document `_id` as the query selector.\n *\n * ####Example:\n *\n *     weirdCar.update({$inc: {wheels:1}}, { w: 1 }, callback);\n *\n * ####Valid options:\n *\n *  - same as in [Model.update](#model_Model.update)\n *\n * @see Model.update #model_Model.update\n * @param {Object} doc\n * @param {Object} options\n * @param {Function} callback\n * @return {Query}\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.update = function update() {\n  const args = utils.args(arguments);\n  args.unshift({ _id: this._id });\n  const query = this.constructor.update.apply(this.constructor, args);\n\n  if (this.$session() != null) {\n    if (!('session' in query.options)) {\n      query.options.session = this.$session();\n    }\n  }\n\n  return query;\n};\n\n/**\n * Sends an updateOne command with this document `_id` as the query selector.\n *\n * ####Example:\n *\n *     weirdCar.updateOne({$inc: {wheels:1}}, { w: 1 }, callback);\n *\n * ####Valid options:\n *\n *  - same as in [Model.updateOne](#model_Model.updateOne)\n *\n * @see Model.updateOne #model_Model.updateOne\n * @param {Object} doc\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](/docs/api.html#query_Query-lean) and the [Mongoose lean tutorial](/docs/tutorials/lean.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.omitUndefined=false] If true, delete any properties whose value is `undefined` when casting an update. In other words, if this is set, Mongoose will delete `baz` from the update in `Model.updateOne({}, { foo: 'bar', baz: undefined })` before sending the update to the server.\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Function} callback\n * @return {Query}\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.updateOne = function updateOne(doc, options, callback) {\n  const query = this.constructor.updateOne({ _id: this._id }, doc, options);\n  query.pre(cb => {\n    this.constructor._middleware.execPre('updateOne', this, [this], cb);\n  });\n  query.post(cb => {\n    this.constructor._middleware.execPost('updateOne', this, [this], {}, cb);\n  });\n\n  if (this.$session() != null) {\n    if (!('session' in query.options)) {\n      query.options.session = this.$session();\n    }\n  }\n\n  if (callback != null) {\n    return query.exec(callback);\n  }\n\n  return query;\n};\n\n/**\n * Sends a replaceOne command with this document `_id` as the query selector.\n *\n * ####Valid options:\n *\n *  - same as in [Model.replaceOne](https://mongoosejs.com/docs/api/model.html#model_Model.replaceOne)\n *\n * @see Model.replaceOne #model_Model.replaceOne\n * @param {Object} doc\n * @param {Object} options\n * @param {Function} callback\n * @return {Query}\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.replaceOne = function replaceOne() {\n  const args = utils.args(arguments);\n  args.unshift({ _id: this._id });\n  return this.constructor.replaceOne.apply(this.constructor, args);\n};\n\n/**\n * Getter/setter around the session associated with this document. Used to\n * automatically set `session` if you `save()` a doc that you got from a\n * query with an associated session.\n *\n * ####Example:\n *\n *     const session = MyModel.startSession();\n *     const doc = await MyModel.findOne().session(session);\n *     doc.$session() === session; // true\n *     doc.$session(null);\n *     doc.$session() === null; // true\n *\n * If this is a top-level document, setting the session propagates to all child\n * docs.\n *\n * @param {ClientSession} [session] overwrite the current session\n * @return {ClientSession}\n * @method $session\n * @api public\n * @memberOf Document\n */\n\nDocument.prototype.$session = function $session(session) {\n  if (arguments.length === 0) {\n    return this.$__.session;\n  }\n  this.$__.session = session;\n\n  if (!this.ownerDocument) {\n    const subdocs = this.$getAllSubdocs();\n    for (const child of subdocs) {\n      child.$session(session);\n    }\n  }\n\n  return session;\n};\n\n/**\n * Overwrite all values in this document with the values of `obj`, except\n * for immutable properties. Behaves similarly to `set()`, except for it\n * unsets all properties that aren't in `obj`.\n *\n * @param {Object} obj the object to overwrite this document with\n * @method overwrite\n * @name overwrite\n * @memberOf Document\n * @instance\n * @api public\n */\n\nDocument.prototype.overwrite = function overwrite(obj) {\n  const keys = Array.from(new Set(Object.keys(this._doc).concat(Object.keys(obj))));\n\n  for (const key of keys) {\n    if (key === '_id') {\n      continue;\n    }\n    // Explicitly skip version key\n    if (this.$__schema.options.versionKey && key === this.$__schema.options.versionKey) {\n      continue;\n    }\n    if (this.$__schema.options.discriminatorKey && key === this.$__schema.options.discriminatorKey) {\n      continue;\n    }\n    this.$set(key, obj[key]);\n  }\n\n  return this;\n};\n\n/**\n * Alias for `set()`, used internally to avoid conflicts\n *\n * @param {String|Object} path path or object of key/vals to set\n * @param {Any} val the value to set\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for \"on-the-fly\" attributes\n * @param {Object} [options] optionally specify options that modify the behavior of the set\n * @method $set\n * @name $set\n * @memberOf Document\n * @instance\n * @api public\n */\n\nDocument.prototype.$set = function $set(path, val, type, options) {\n\n  if (utils.isPOJO(type)) {\n    options = type;\n    type = undefined;\n  }\n\n  options = options || {};\n  const merge = options.merge;\n  const adhoc = type && type !== true;\n  const constructing = type === true;\n  let adhocs;\n  let keys;\n  let i = 0;\n  let pathtype;\n  let key;\n  let prefix;\n\n  const strict = 'strict' in options\n    ? options.strict\n    : this.$__.strictMode;\n\n  if (adhoc) {\n    adhocs = this.$__.adhocPaths || (this.$__.adhocPaths = {});\n    adhocs[path] = this.$__schema.interpretAsType(path, type, this.$__schema.options);\n  }\n\n  if (path == null) {\n    const _ = path;\n    path = val;\n    val = _;\n  } else if (typeof path !== 'string') {\n    // new Document({ key: val })\n    if (path instanceof Document) {\n      if (path.$__isNested) {\n        path = path.toObject();\n      } else {\n        path = path._doc;\n      }\n    }\n    if (path == null) {\n      const _ = path;\n      path = val;\n      val = _;\n    }\n\n    prefix = val ? val + '.' : '';\n    keys = Object.keys(path);\n    const len = keys.length;\n\n    // `_skipMinimizeTopLevel` is because we may have deleted the top-level\n    // nested key to ensure key order.\n    const _skipMinimizeTopLevel = get(options, '_skipMinimizeTopLevel', false);\n    if (len === 0 && _skipMinimizeTopLevel) {\n      delete options._skipMinimizeTopLevel;\n      if (val) {\n        this.$set(val, {});\n      }\n      return this;\n    }\n\n    for (let i = 0; i < len; ++i) {\n      key = keys[i];\n      const pathName = prefix + key;\n      pathtype = this.$__schema.pathType(pathName);\n\n      // On initial set, delete any nested keys if we're going to overwrite\n      // them to ensure we keep the user's key order.\n      if (type === true &&\n          !prefix &&\n          path[key] != null &&\n          pathtype === 'nested' &&\n          this._doc[key] != null &&\n          Object.keys(this._doc[key]).length === 0) {\n        delete this._doc[key];\n        // Make sure we set `{}` back even if we minimize re: gh-8565\n        options = Object.assign({}, options, { _skipMinimizeTopLevel: true });\n      }\n\n      const someCondition = typeof path[key] === 'object' &&\n                            !utils.isNativeObject(path[key]) &&\n                            !utils.isMongooseType(path[key]) &&\n                            path[key] != null &&\n                            pathtype !== 'virtual' &&\n                            pathtype !== 'real' &&\n                            pathtype !== 'adhocOrUndefined' &&\n                            !(this.$__path(pathName) instanceof MixedSchema) &&\n                            !(this.$__schema.paths[pathName] &&\n                            this.$__schema.paths[pathName].options &&\n                            this.$__schema.paths[pathName].options.ref);\n\n      if (someCondition) {\n        this.$__.$setCalled.add(prefix + key);\n        this.$set(path[key], prefix + key, constructing, options);\n      } else if (strict) {\n        // Don't overwrite defaults with undefined keys (gh-3981) (gh-9039)\n        if (constructing && path[key] === void 0 &&\n            this.get(pathName) !== void 0) {\n          continue;\n        }\n\n        if (pathtype === 'adhocOrUndefined') {\n          pathtype = getEmbeddedDiscriminatorPath(this, pathName, { typeOnly: true });\n        }\n\n        if (pathtype === 'real' || pathtype === 'virtual') {\n          // Check for setting single embedded schema to document (gh-3535)\n          let p = path[key];\n          if (this.$__schema.paths[pathName] &&\n              this.$__schema.paths[pathName].$isSingleNested &&\n              path[key] instanceof Document) {\n            p = p.toObject({ virtuals: false, transform: false });\n          }\n          this.$set(prefix + key, p, constructing, options);\n        } else if (pathtype === 'nested' && path[key] instanceof Document) {\n          this.$set(prefix + key,\n            path[key].toObject({ transform: false }), constructing, options);\n        } else if (strict === 'throw') {\n          if (pathtype === 'nested') {\n            throw new ObjectExpectedError(key, path[key]);\n          } else {\n            throw new StrictModeError(key);\n          }\n        }\n      } else if (path[key] !== void 0) {\n        this.$set(prefix + key, path[key], constructing, options);\n      }\n    }\n\n    return this;\n  } else {\n    this.$__.$setCalled.add(path);\n  }\n\n  let pathType = this.$__schema.pathType(path);\n  if (pathType === 'adhocOrUndefined') {\n    pathType = getEmbeddedDiscriminatorPath(this, path, { typeOnly: true });\n  }\n\n  // Assume this is a Mongoose document that was copied into a POJO using\n  // `Object.assign()` or `{...doc}`\n  val = handleSpreadDoc(val);\n\n  if (pathType === 'nested' && val) {\n    if (typeof val === 'object' && val != null) {\n      const hasPriorVal = this.$__.savedState != null && this.$__.savedState.hasOwnProperty(path);\n      if (this.$__.savedState != null && !this.isNew && !this.$__.savedState.hasOwnProperty(path)) {\n        const priorVal = this.$__getValue(path);\n        this.$__.savedState[path] = priorVal;\n\n        const keys = Object.keys(priorVal || {});\n        for (const key of keys) {\n          this.$__.savedState[path + '.' + key] = priorVal[key];\n        }\n      }\n\n      if (!merge) {\n        this.$__setValue(path, null);\n        cleanModifiedSubpaths(this, path);\n      } else {\n        return this.$set(val, path, constructing);\n      }\n\n      const keys = Object.keys(val);\n      this.$__setValue(path, {});\n      for (const key of keys) {\n        this.$set(path + '.' + key, val[key], constructing);\n      }\n\n      if (hasPriorVal && utils.deepEqual(this.$__.savedState[path], val)) {\n        this.unmarkModified(path);\n      } else {\n        this.markModified(path);\n      }\n      cleanModifiedSubpaths(this, path, { skipDocArrays: true });\n      return this;\n    }\n    this.invalidate(path, new MongooseError.CastError('Object', val, path));\n    return this;\n  }\n\n  let schema;\n  const parts = path.indexOf('.') === -1 ? [path] : path.split('.');\n\n  // Might need to change path for top-level alias\n  if (typeof this.$__schema.aliases[parts[0]] == 'string') {\n    parts[0] = this.$__schema.aliases[parts[0]];\n  }\n\n  if (pathType === 'adhocOrUndefined' && strict) {\n    // check for roots that are Mixed types\n    let mixed;\n\n    for (i = 0; i < parts.length; ++i) {\n      const subpath = parts.slice(0, i + 1).join('.');\n\n      // If path is underneath a virtual, bypass everything and just set it.\n      if (i + 1 < parts.length && this.$__schema.pathType(subpath) === 'virtual') {\n        mpath.set(path, val, this);\n        return this;\n      }\n\n      schema = this.$__schema.path(subpath);\n      if (schema == null) {\n        continue;\n      }\n\n      if (schema instanceof MixedSchema) {\n        // allow changes to sub paths of mixed types\n        mixed = true;\n        break;\n      }\n    }\n\n    if (schema == null) {\n      // Check for embedded discriminators\n      schema = getEmbeddedDiscriminatorPath(this, path);\n    }\n\n    if (!mixed && !schema) {\n      if (strict === 'throw') {\n        throw new StrictModeError(path);\n      }\n      return this;\n    }\n  } else if (pathType === 'virtual') {\n    schema = this.$__schema.virtualpath(path);\n    schema.applySetters(val, this);\n    return this;\n  } else {\n    schema = this.$__path(path);\n  }\n\n  // gh-4578, if setting a deeply nested path that doesn't exist yet, create it\n  let cur = this._doc;\n  let curPath = '';\n  for (i = 0; i < parts.length - 1; ++i) {\n    cur = cur[parts[i]];\n    curPath += (curPath.length > 0 ? '.' : '') + parts[i];\n    if (!cur) {\n      this.$set(curPath, {});\n      // Hack re: gh-5800. If nested field is not selected, it probably exists\n      // so `MongoError: cannot use the part (nested of nested.num) to\n      // traverse the element ({nested: null})` is not likely. If user gets\n      // that error, its their fault for now. We should reconsider disallowing\n      // modifying not selected paths for 6.x\n      if (!this.$__isSelected(curPath)) {\n        this.unmarkModified(curPath);\n      }\n      cur = this.$__getValue(curPath);\n    }\n  }\n\n  let pathToMark;\n\n  // When using the $set operator the path to the field must already exist.\n  // Else mongodb throws: \"LEFT_SUBFIELD only supports Object\"\n\n  if (parts.length <= 1) {\n    pathToMark = path;\n  } else {\n    for (i = 0; i < parts.length; ++i) {\n      const subpath = parts.slice(0, i + 1).join('.');\n      if (this.get(subpath, null, { getters: false }) === null) {\n        pathToMark = subpath;\n        break;\n      }\n    }\n\n    if (!pathToMark) {\n      pathToMark = path;\n    }\n  }\n\n  // if this doc is being constructed we should not trigger getters\n  const priorVal = (() => {\n    if (this.$__.$options.priorDoc != null) {\n      return this.$__.$options.priorDoc.$__getValue(path);\n    }\n    if (constructing) {\n      return void 0;\n    }\n    return this.$__getValue(path);\n  })();\n\n  if (!schema) {\n    this.$__set(pathToMark, path, constructing, parts, schema, val, priorVal);\n    return this;\n  }\n\n  // If overwriting a subdocument path, make sure to clear out\n  // any errors _before_ setting, so new errors that happen\n  // get persisted. Re: #9080\n  if (schema.$isSingleNested || schema.$isMongooseArray) {\n    _markValidSubpaths(this, path);\n  }\n\n  if (schema.$isSingleNested && val != null && merge) {\n    if (val instanceof Document) {\n      val = val.toObject({ virtuals: false, transform: false });\n    }\n    const keys = Object.keys(val);\n    for (const key of keys) {\n      this.$set(path + '.' + key, val[key], constructing, options);\n    }\n\n    return this;\n  }\n\n  let shouldSet = true;\n  try {\n    // If the user is trying to set a ref path to a document with\n    // the correct model name, treat it as populated\n    const refMatches = (() => {\n      if (schema.options == null) {\n        return false;\n      }\n      if (!(val instanceof Document)) {\n        return false;\n      }\n      const model = val.constructor;\n\n      // Check ref\n      const ref = schema.options.ref;\n      if (ref != null && (ref === model.modelName || ref === model.baseModelName)) {\n        return true;\n      }\n\n      // Check refPath\n      const refPath = schema.options.refPath;\n      if (refPath == null) {\n        return false;\n      }\n      const modelName = val.get(refPath);\n      return modelName === model.modelName || modelName === model.baseModelName;\n    })();\n\n    let didPopulate = false;\n    if (refMatches && val instanceof Document) {\n      this.populated(path, val._id, { [populateModelSymbol]: val.constructor });\n      val.$__.wasPopulated = true;\n      didPopulate = true;\n    }\n\n    let popOpts;\n    if (schema.options &&\n        Array.isArray(schema.options[this.$__schema.options.typeKey]) &&\n        schema.options[this.$__schema.options.typeKey].length &&\n        schema.options[this.$__schema.options.typeKey][0].ref &&\n        _isManuallyPopulatedArray(val, schema.options[this.$__schema.options.typeKey][0].ref)) {\n      if (this.ownerDocument) {\n        popOpts = { [populateModelSymbol]: val[0].constructor };\n        this.ownerDocument().populated(this.$__fullPath(path),\n          val.map(function(v) { return v._id; }), popOpts);\n      } else {\n        popOpts = { [populateModelSymbol]: val[0].constructor };\n        this.populated(path, val.map(function(v) { return v._id; }), popOpts);\n      }\n      for (const doc of val) {\n        doc.$__.wasPopulated = true;\n      }\n      didPopulate = true;\n    }\n\n    if (this.$__schema.singleNestedPaths[path] == null) {\n      // If this path is underneath a single nested schema, we'll call the setter\n      // later in `$__set()` because we don't take `_doc` when we iterate through\n      // a single nested doc. That's to make sure we get the correct context.\n      // Otherwise we would double-call the setter, see gh-7196.\n      val = schema.applySetters(val, this, false, priorVal);\n    }\n\n    if (schema.$isMongooseDocumentArray &&\n        Array.isArray(val) &&\n        val.length > 0 &&\n        val[0] != null &&\n        val[0].$__ != null &&\n        val[0].$__.populated != null) {\n      const populatedPaths = Object.keys(val[0].$__.populated);\n      for (const populatedPath of populatedPaths) {\n        this.populated(path + '.' + populatedPath,\n          val.map(v => v.populated(populatedPath)),\n          val[0].$__.populated[populatedPath].options);\n      }\n      didPopulate = true;\n    }\n\n    if (!didPopulate && this.$__.populated) {\n      // If this array partially contains populated documents, convert them\n      // all to ObjectIds re: #8443\n      if (Array.isArray(val) && this.$__.populated[path]) {\n        for (let i = 0; i < val.length; ++i) {\n          if (val[i] instanceof Document) {\n            val[i] = val[i]._id;\n          }\n        }\n      }\n      delete this.$__.populated[path];\n    }\n\n    if (schema.$isSingleNested && val != null) {\n      _checkImmutableSubpaths(val, schema, priorVal);\n    }\n\n    this.$markValid(path);\n  } catch (e) {\n    if (e instanceof MongooseError.StrictModeError && e.isImmutableError) {\n      this.invalidate(path, e);\n    } else if (e instanceof MongooseError.CastError) {\n      this.invalidate(e.path, e);\n      if (e.$originalErrorPath) {\n        this.invalidate(path,\n          new MongooseError.CastError(schema.instance, val, path, e.$originalErrorPath));\n      }\n    } else {\n      this.invalidate(path,\n        new MongooseError.CastError(schema.instance, val, path, e));\n    }\n    shouldSet = false;\n  }\n\n  if (shouldSet) {\n    this.$__set(pathToMark, path, constructing, parts, schema, val, priorVal);\n\n    if (this.$__.savedState != null) {\n      if (!this.isNew && !this.$__.savedState.hasOwnProperty(path)) {\n        this.$__.savedState[path] = priorVal;\n      } else if (this.$__.savedState.hasOwnProperty(path) && utils.deepEqual(val, this.$__.savedState[path])) {\n        this.unmarkModified(path);\n      }\n    }\n  }\n\n  if (schema.$isSingleNested && (this.isDirectModified(path) || val == null)) {\n    cleanModifiedSubpaths(this, path);\n  }\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _isManuallyPopulatedArray(val, ref) {\n  if (!Array.isArray(val)) {\n    return false;\n  }\n  if (val.length === 0) {\n    return false;\n  }\n\n  for (const el of val) {\n    if (!(el instanceof Document)) {\n      return false;\n    }\n    const modelName = el.constructor.modelName;\n    if (modelName == null) {\n      return false;\n    }\n    if (el.constructor.modelName != ref && el.constructor.baseModelName != ref) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Sets the value of a path, or many paths.\n *\n * ####Example:\n *\n *     // path, value\n *     doc.set(path, value)\n *\n *     // object\n *     doc.set({\n *         path  : value\n *       , path2 : {\n *            path  : value\n *         }\n *     })\n *\n *     // on-the-fly cast to number\n *     doc.set(path, value, Number)\n *\n *     // on-the-fly cast to string\n *     doc.set(path, value, String)\n *\n *     // changing strict mode behavior\n *     doc.set(path, value, { strict: false });\n *\n * @param {String|Object} path path or object of key/vals to set\n * @param {Any} val the value to set\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for \"on-the-fly\" attributes\n * @param {Object} [options] optionally specify options that modify the behavior of the set\n * @api public\n * @method set\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.set = Document.prototype.$set;\n\n/**\n * Determine if we should mark this change as modified.\n *\n * @return {Boolean}\n * @api private\n * @method $__shouldModify\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__shouldModify = function(pathToMark, path, constructing, parts, schema, val, priorVal) {\n  if (this.isNew) {\n    return true;\n  }\n\n  // Re: the note about gh-7196, `val` is the raw value without casting or\n  // setters if the full path is under a single nested subdoc because we don't\n  // want to double run setters. So don't set it as modified. See gh-7264.\n  if (this.$__schema.singleNestedPaths[path] != null) {\n    return false;\n  }\n\n  if (val === void 0 && !this.$__isSelected(path)) {\n    // when a path is not selected in a query, its initial\n    // value will be undefined.\n    return true;\n  }\n\n  if (val === void 0 && path in this.$__.activePaths.states.default) {\n    // we're just unsetting the default value which was never saved\n    return false;\n  }\n\n  // gh-3992: if setting a populated field to a doc, don't mark modified\n  // if they have the same _id\n  if (this.populated(path) &&\n      val instanceof Document &&\n      deepEqual(val._id, priorVal)) {\n    return false;\n  }\n\n  if (!deepEqual(val, priorVal || utils.getValue(path, this))) {\n    return true;\n  }\n\n  if (!constructing &&\n      val !== null &&\n      val !== undefined &&\n      path in this.$__.activePaths.states.default &&\n      deepEqual(val, schema.getDefault(this, constructing))) {\n    // a path with a default was $unset on the server\n    // and the user is setting it to the same value again\n    return true;\n  }\n  return false;\n};\n\n/**\n * Handles the actual setting of the value and marking the path modified if appropriate.\n *\n * @api private\n * @method $__set\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__set = function(pathToMark, path, constructing, parts, schema, val, priorVal) {\n  Embedded = Embedded || require('./types/embedded');\n\n  const shouldModify = this.$__shouldModify(pathToMark, path, constructing, parts,\n    schema, val, priorVal);\n  const _this = this;\n\n  if (shouldModify) {\n    this.markModified(pathToMark);\n\n    // handle directly setting arrays (gh-1126)\n    MongooseArray || (MongooseArray = require('./types/array'));\n    if (val && val.isMongooseArray) {\n      val._registerAtomic('$set', val);\n\n      // Update embedded document parent references (gh-5189)\n      if (val.isMongooseDocumentArray) {\n        val.forEach(function(item) {\n          item && item.__parentArray && (item.__parentArray = val);\n        });\n      }\n\n      // Small hack for gh-1638: if we're overwriting the entire array, ignore\n      // paths that were modified before the array overwrite\n      this.$__.activePaths.forEach(function(modifiedPath) {\n        if (modifiedPath.startsWith(path + '.')) {\n          _this.$__.activePaths.ignore(modifiedPath);\n        }\n      });\n    }\n  }\n\n  let obj = this._doc;\n  let i = 0;\n  const l = parts.length;\n  let cur = '';\n\n  for (; i < l; i++) {\n    const next = i + 1;\n    const last = next === l;\n    cur += (cur ? '.' + parts[i] : parts[i]);\n    if (specialProperties.has(parts[i])) {\n      return;\n    }\n\n    if (last) {\n      if (obj instanceof Map) {\n        obj.set(parts[i], val);\n      } else {\n        obj[parts[i]] = val;\n      }\n    } else {\n      if (utils.isPOJO(obj[parts[i]])) {\n        obj = obj[parts[i]];\n      } else if (obj[parts[i]] && obj[parts[i]] instanceof Embedded) {\n        obj = obj[parts[i]];\n      } else if (obj[parts[i]] && obj[parts[i]].$isSingleNested) {\n        obj = obj[parts[i]];\n      } else if (obj[parts[i]] && Array.isArray(obj[parts[i]])) {\n        obj = obj[parts[i]];\n      } else {\n        obj[parts[i]] = obj[parts[i]] || {};\n        obj = obj[parts[i]];\n      }\n    }\n  }\n};\n\n/**\n * Gets a raw value from a path (no getters)\n *\n * @param {String} path\n * @api private\n */\n\nDocument.prototype.$__getValue = function(path) {\n  return utils.getValue(path, this._doc);\n};\n\n/**\n * Sets a raw value for a path (no casting, setters, transformations)\n *\n * @param {String} path\n * @param {Object} value\n * @api private\n */\n\nDocument.prototype.$__setValue = function(path, val) {\n  utils.setValue(path, val, this._doc);\n  return this;\n};\n\n/**\n * Returns the value of a path.\n *\n * ####Example\n *\n *     // path\n *     doc.get('age') // 47\n *\n *     // dynamic casting to a string\n *     doc.get('age', String) // \"47\"\n *\n * @param {String} path\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for on-the-fly attributes\n * @param {Object} [options]\n * @param {Boolean} [options.virtuals=false] Apply virtuals before getting this path\n * @param {Boolean} [options.getters=true] If false, skip applying getters and just get the raw value\n * @api public\n */\n\nDocument.prototype.get = function(path, type, options) {\n  let adhoc;\n  options = options || {};\n  if (type) {\n    adhoc = this.$__schema.interpretAsType(path, type, this.$__schema.options);\n  }\n\n  let schema = this.$__path(path);\n  if (schema == null) {\n    schema = this.$__schema.virtualpath(path);\n  }\n  if (schema instanceof MixedSchema) {\n    const virtual = this.$__schema.virtualpath(path);\n    if (virtual != null) {\n      schema = virtual;\n    }\n  }\n  const pieces = path.indexOf('.') === -1 ? [path] : path.split('.');\n  let obj = this._doc;\n\n  if (schema instanceof VirtualType) {\n    return schema.applyGetters(void 0, this);\n  }\n\n  // Might need to change path for top-level alias\n  if (typeof this.$__schema.aliases[pieces[0]] == 'string') {\n    pieces[0] = this.$__schema.aliases[pieces[0]];\n  }\n\n  for (let i = 0, l = pieces.length; i < l; i++) {\n    if (obj && obj._doc) {\n      obj = obj._doc;\n    }\n\n    if (obj == null) {\n      obj = void 0;\n    } else if (obj instanceof Map) {\n      obj = obj.get(pieces[i], { getters: false });\n    } else if (i === l - 1) {\n      obj = utils.getValue(pieces[i], obj);\n    } else {\n      obj = obj[pieces[i]];\n    }\n  }\n\n  if (adhoc) {\n    obj = adhoc.cast(obj);\n  }\n\n  if (schema != null && options.getters !== false) {\n    obj = schema.applyGetters(obj, this);\n  } else if (this.$__schema.nested[path] && options.virtuals) {\n    // Might need to apply virtuals if this is a nested path\n    return applyVirtuals(this, utils.clone(obj) || {}, { path: path });\n  }\n\n  return obj;\n};\n\n/*!\n * ignore\n */\n\nDocument.prototype[getSymbol] = Document.prototype.get;\n\n/**\n * Returns the schematype for the given `path`.\n *\n * @param {String} path\n * @api private\n * @method $__path\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__path = function(path) {\n  const adhocs = this.$__.adhocPaths;\n  const adhocType = adhocs && adhocs.hasOwnProperty(path) ? adhocs[path] : null;\n\n  if (adhocType) {\n    return adhocType;\n  }\n  return this.$__schema.path(path);\n};\n\n/**\n * Marks the path as having pending changes to write to the db.\n *\n * _Very helpful when using [Mixed](./schematypes.html#mixed) types._\n *\n * ####Example:\n *\n *     doc.mixed.type = 'changed';\n *     doc.markModified('mixed.type');\n *     doc.save() // changes to mixed.type are now persisted\n *\n * @param {String} path the path to mark modified\n * @param {Document} [scope] the scope to run validators with\n * @api public\n */\n\nDocument.prototype.markModified = function(path, scope) {\n  this.$__.activePaths.modify(path);\n  if (scope != null && !this.ownerDocument) {\n    this.$__.pathsToScopes[path] = scope;\n  }\n};\n\n/**\n * Clears the modified state on the specified path.\n *\n * ####Example:\n *\n *     doc.foo = 'bar';\n *     doc.unmarkModified('foo');\n *     doc.save(); // changes to foo will not be persisted\n *\n * @param {String} path the path to unmark modified\n * @api public\n */\n\nDocument.prototype.unmarkModified = function(path) {\n  this.$__.activePaths.init(path);\n  delete this.$__.pathsToScopes[path];\n};\n\n/**\n * Don't run validation on this path or persist changes to this path.\n *\n * ####Example:\n *\n *     doc.foo = null;\n *     doc.$ignore('foo');\n *     doc.save(); // changes to foo will not be persisted and validators won't be run\n *\n * @memberOf Document\n * @instance\n * @method $ignore\n * @param {String} path the path to ignore\n * @api public\n */\n\nDocument.prototype.$ignore = function(path) {\n  this.$__.activePaths.ignore(path);\n};\n\n/**\n * Returns the list of paths that have been directly modified. A direct\n * modified path is a path that you explicitly set, whether via `doc.foo = 'bar'`,\n * `Object.assign(doc, { foo: 'bar' })`, or `doc.set('foo', 'bar')`.\n *\n * A path `a` may be in `modifiedPaths()` but not in `directModifiedPaths()`\n * because a child of `a` was directly modified.\n *\n * ####Example\n *     const schema = new Schema({ foo: String, nested: { bar: String } });\n *     const Model = mongoose.model('Test', schema);\n *     await Model.create({ foo: 'original', nested: { bar: 'original' } });\n *\n *     const doc = await Model.findOne();\n *     doc.nested.bar = 'modified';\n *     doc.directModifiedPaths(); // ['nested.bar']\n *     doc.modifiedPaths(); // ['nested', 'nested.bar']\n *\n * @return {Array}\n * @api public\n */\n\nDocument.prototype.directModifiedPaths = function() {\n  return Object.keys(this.$__.activePaths.states.modify);\n};\n\n/**\n * Returns true if the given path is nullish or only contains empty objects.\n * Useful for determining whether this subdoc will get stripped out by the\n * [minimize option](/docs/guide.html#minimize).\n *\n * ####Example:\n *     const schema = new Schema({ nested: { foo: String } });\n *     const Model = mongoose.model('Test', schema);\n *     const doc = new Model({});\n *     doc.$isEmpty('nested'); // true\n *     doc.nested.$isEmpty(); // true\n *\n *     doc.nested.foo = 'bar';\n *     doc.$isEmpty('nested'); // false\n *     doc.nested.$isEmpty(); // false\n *\n * @memberOf Document\n * @instance\n * @api public\n * @method $isEmpty\n * @return {Boolean}\n */\n\nDocument.prototype.$isEmpty = function(path) {\n  const isEmptyOptions = {\n    minimize: true,\n    virtuals: false,\n    getters: false,\n    transform: false\n  };\n\n  if (arguments.length > 0) {\n    const v = this.get(path);\n    if (v == null) {\n      return true;\n    }\n    if (typeof v !== 'object') {\n      return false;\n    }\n    if (utils.isPOJO(v)) {\n      return _isEmpty(v);\n    }\n    return Object.keys(v.toObject(isEmptyOptions)).length === 0;\n  }\n\n  return Object.keys(this.toObject(isEmptyOptions)).length === 0;\n};\n\nfunction _isEmpty(v) {\n  if (v == null) {\n    return true;\n  }\n  if (typeof v !== 'object' || Array.isArray(v)) {\n    return false;\n  }\n  for (const key of Object.keys(v)) {\n    if (!_isEmpty(v[key])) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Returns the list of paths that have been modified.\n *\n * @param {Object} [options]\n * @param {Boolean} [options.includeChildren=false] if true, returns children of modified paths as well. For example, if false, the list of modified paths for `doc.colors = { primary: 'blue' };` will **not** contain `colors.primary`. If true, `modifiedPaths()` will return an array that contains `colors.primary`.\n * @return {Array}\n * @api public\n */\n\nDocument.prototype.modifiedPaths = function(options) {\n  options = options || {};\n  const directModifiedPaths = Object.keys(this.$__.activePaths.states.modify);\n  const _this = this;\n  return directModifiedPaths.reduce(function(list, path) {\n    const parts = path.split('.');\n    list = list.concat(parts.reduce(function(chains, part, i) {\n      return chains.concat(parts.slice(0, i).concat(part).join('.'));\n    }, []).filter(function(chain) {\n      return (list.indexOf(chain) === -1);\n    }));\n\n    if (!options.includeChildren) {\n      return list;\n    }\n\n    let cur = _this.get(path);\n    if (cur != null && typeof cur === 'object') {\n      if (cur._doc) {\n        cur = cur._doc;\n      }\n      if (Array.isArray(cur)) {\n        const len = cur.length;\n        for (let i = 0; i < len; ++i) {\n          if (list.indexOf(path + '.' + i) === -1) {\n            list.push(path + '.' + i);\n            if (cur[i] != null && cur[i].$__) {\n              const modified = cur[i].modifiedPaths();\n              for (const childPath of modified) {\n                list.push(path + '.' + i + '.' + childPath);\n              }\n            }\n          }\n        }\n      } else {\n        Object.keys(cur).\n          filter(function(key) {\n            return list.indexOf(path + '.' + key) === -1;\n          }).\n          forEach(function(key) {\n            list.push(path + '.' + key);\n          });\n      }\n    }\n\n    return list;\n  }, []);\n};\n\nDocument.prototype[documentModifiedPaths] = Document.prototype.modifiedPaths;\n\n/**\n * Returns true if any of the given paths is modified, else false. If no arguments, returns `true` if any path\n * in this document is modified.\n *\n * If `path` is given, checks if a path or any full path containing `path` as part of its path chain has been modified.\n *\n * ####Example\n *\n *     doc.set('documents.0.title', 'changed');\n *     doc.isModified()                      // true\n *     doc.isModified('documents')           // true\n *     doc.isModified('documents.0.title')   // true\n *     doc.isModified('documents otherProp') // true\n *     doc.isDirectModified('documents')     // false\n *\n * @param {String} [path] optional\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isModified = function(paths, modifiedPaths) {\n  if (paths) {\n    if (!Array.isArray(paths)) {\n      paths = paths.split(' ');\n    }\n    const modified = modifiedPaths || this[documentModifiedPaths]();\n    const directModifiedPaths = Object.keys(this.$__.activePaths.states.modify);\n    const isModifiedChild = paths.some(function(path) {\n      return !!~modified.indexOf(path);\n    });\n\n    return isModifiedChild || paths.some(function(path) {\n      return directModifiedPaths.some(function(mod) {\n        return mod === path || path.startsWith(mod + '.');\n      });\n    });\n  }\n\n  return this.$__.activePaths.some('modify');\n};\n\nDocument.prototype[documentIsModified] = Document.prototype.isModified;\n\n/**\n * Checks if a path is set to its default.\n *\n * ####Example\n *\n *     MyModel = mongoose.model('test', { name: { type: String, default: 'Val '} });\n *     const m = new MyModel();\n *     m.$isDefault('name'); // true\n *\n * @memberOf Document\n * @instance\n * @method $isDefault\n * @param {String} [path]\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.$isDefault = function(path) {\n  if (path == null) {\n    return this.$__.activePaths.some('default');\n  }\n\n  if (typeof path === 'string' && path.indexOf(' ') === -1) {\n    return this.$__.activePaths.states.default.hasOwnProperty(path);\n  }\n\n  let paths = path;\n  if (!Array.isArray(paths)) {\n    paths = paths.split(' ');\n  }\n\n  return paths.some(path => this.$__.activePaths.states.default.hasOwnProperty(path));\n};\n\n/**\n * Getter/setter, determines whether the document was removed or not.\n *\n * ####Example:\n *     product.remove(function (err, product) {\n *       product.$isDeleted(); // true\n *       product.remove(); // no-op, doesn't send anything to the db\n *\n *       product.$isDeleted(false);\n *       product.$isDeleted(); // false\n *       product.remove(); // will execute a remove against the db\n *     })\n *\n * @param {Boolean} [val] optional, overrides whether mongoose thinks the doc is deleted\n * @return {Boolean} whether mongoose thinks this doc is deleted.\n * @method $isDeleted\n * @memberOf Document\n * @instance\n * @api public\n */\n\nDocument.prototype.$isDeleted = function(val) {\n  if (arguments.length === 0) {\n    return !!this.$__.isDeleted;\n  }\n\n  this.$__.isDeleted = !!val;\n  return this;\n};\n\n/**\n * Returns true if `path` was directly set and modified, else false.\n *\n * ####Example\n *\n *     doc.set('documents.0.title', 'changed');\n *     doc.isDirectModified('documents.0.title') // true\n *     doc.isDirectModified('documents') // false\n *\n * @param {String|Array<String>} path\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isDirectModified = function(path) {\n  if (path == null) {\n    return this.$__.activePaths.some('modify');\n  }\n\n  if (typeof path === 'string' && path.indexOf(' ') === -1) {\n    return this.$__.activePaths.states.modify.hasOwnProperty(path);\n  }\n\n  let paths = path;\n  if (!Array.isArray(paths)) {\n    paths = paths.split(' ');\n  }\n\n  return paths.some(path => this.$__.activePaths.states.modify.hasOwnProperty(path));\n};\n\n/**\n * Checks if `path` is in the `init` state, that is, it was set by `Document#init()` and not modified since.\n *\n * @param {String} path\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isInit = function(path) {\n  if (path == null) {\n    return this.$__.activePaths.some('init');\n  }\n\n  if (typeof path === 'string' && path.indexOf(' ') === -1) {\n    return this.$__.activePaths.states.init.hasOwnProperty(path);\n  }\n\n  let paths = path;\n  if (!Array.isArray(paths)) {\n    paths = paths.split(' ');\n  }\n\n  return paths.some(path => this.$__.activePaths.states.init.hasOwnProperty(path));\n};\n\n/**\n * Checks if `path` was selected in the source query which initialized this document.\n *\n * ####Example\n *\n *     Thing.findOne().select('name').exec(function (err, doc) {\n *        doc.isSelected('name') // true\n *        doc.isSelected('age')  // false\n *     })\n *\n * @param {String|Array<String>} path\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isSelected = function isSelected(path) {\n  if (this.$__.selected == null) {\n    return true;\n  }\n\n  if (path === '_id') {\n    return this.$__.selected._id !== 0;\n  }\n\n  if (path.indexOf(' ') !== -1) {\n    path = path.split(' ');\n  }\n  if (Array.isArray(path)) {\n    return path.some(p => this.$__isSelected(p));\n  }\n\n  const paths = Object.keys(this.$__.selected);\n  let inclusive = null;\n\n  if (paths.length === 1 && paths[0] === '_id') {\n    // only _id was selected.\n    return this.$__.selected._id === 0;\n  }\n\n  for (const cur of paths) {\n    if (cur === '_id') {\n      continue;\n    }\n    if (!isDefiningProjection(this.$__.selected[cur])) {\n      continue;\n    }\n    inclusive = !!this.$__.selected[cur];\n    break;\n  }\n\n  if (inclusive === null) {\n    return true;\n  }\n\n  if (path in this.$__.selected) {\n    return inclusive;\n  }\n\n  const pathDot = path + '.';\n\n  for (const cur of paths) {\n    if (cur === '_id') {\n      continue;\n    }\n\n    if (cur.startsWith(pathDot)) {\n      return inclusive || cur !== pathDot;\n    }\n\n    if (pathDot.startsWith(cur + '.')) {\n      return inclusive;\n    }\n  }\n\n  return !inclusive;\n};\n\nDocument.prototype.$__isSelected = Document.prototype.isSelected;\n\n/**\n * Checks if `path` was explicitly selected. If no projection, always returns\n * true.\n *\n * ####Example\n *\n *     Thing.findOne().select('nested.name').exec(function (err, doc) {\n *        doc.isDirectSelected('nested.name') // true\n *        doc.isDirectSelected('nested.otherName') // false\n *        doc.isDirectSelected('nested')  // false\n *     })\n *\n * @param {String} path\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isDirectSelected = function isDirectSelected(path) {\n  if (this.$__.selected == null) {\n    return true;\n  }\n\n  if (path === '_id') {\n    return this.$__.selected._id !== 0;\n  }\n\n  if (path.indexOf(' ') !== -1) {\n    path = path.split(' ');\n  }\n  if (Array.isArray(path)) {\n    return path.some(p => this.isDirectSelected(p));\n  }\n\n  const paths = Object.keys(this.$__.selected);\n  let inclusive = null;\n\n  if (paths.length === 1 && paths[0] === '_id') {\n    // only _id was selected.\n    return this.$__.selected._id === 0;\n  }\n\n  for (const cur of paths) {\n    if (cur === '_id') {\n      continue;\n    }\n    if (!isDefiningProjection(this.$__.selected[cur])) {\n      continue;\n    }\n    inclusive = !!this.$__.selected[cur];\n    break;\n  }\n\n  if (inclusive === null) {\n    return true;\n  }\n\n  if (this.$__.selected.hasOwnProperty(path)) {\n    return inclusive;\n  }\n\n  return !inclusive;\n};\n\n/**\n * Executes registered validation rules for this document.\n *\n * ####Note:\n *\n * This method is called `pre` save and if a validation rule is violated, [save](#model_Model-save) is aborted and the error is returned to your `callback`.\n *\n * ####Example:\n *\n *     doc.validate(function (err) {\n *       if (err) handleError(err);\n *       else // validation passed\n *     });\n *\n * @param {Array|String} [pathsToValidate] list of paths to validate. If set, Mongoose will validate only the modified paths that are in the given list.\n * @param {Object} [options] internal options\n * @param {Boolean} [options.validateModifiedOnly=false] if `true` mongoose validates only modified paths.\n * @param {Function} [callback] optional callback called after validation completes, passing an error if one occurred\n * @return {Promise} Promise\n * @api public\n */\n\nDocument.prototype.validate = function(pathsToValidate, options, callback) {\n  let parallelValidate;\n  this.$op = 'validate';\n\n  if (this.ownerDocument != null) {\n    // Skip parallel validate check for subdocuments\n  } else if (this.$__.validating) {\n    parallelValidate = new ParallelValidateError(this, {\n      parentStack: options && options.parentStack,\n      conflictStack: this.$__.validating.stack\n    });\n  } else {\n    this.$__.validating = new ParallelValidateError(this, { parentStack: options && options.parentStack });\n  }\n\n  if (arguments.length === 1) {\n    if (typeof arguments[0] === 'object' && !Array.isArray(arguments[0])) {\n      options = arguments[0];\n      callback = null;\n      pathsToValidate = null;\n    } else if (typeof arguments[0] === 'function') {\n      callback = arguments[0];\n      options = null;\n      pathsToValidate = null;\n    }\n  } else if (typeof pathsToValidate === 'function') {\n    callback = pathsToValidate;\n    options = null;\n    pathsToValidate = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = pathsToValidate;\n    pathsToValidate = null;\n  }\n\n  return promiseOrCallback(callback, cb => {\n    if (parallelValidate != null) {\n      return cb(parallelValidate);\n    }\n\n    this.$__validate(pathsToValidate, options, (error) => {\n      this.$op = null;\n      cb(error);\n    });\n  }, this.constructor.events);\n};\n\n/*!\n * ignore\n */\n\nfunction _evaluateRequiredFunctions(doc) {\n  Object.keys(doc.$__.activePaths.states.require).forEach(path => {\n    const p = doc.$__schema.path(path);\n\n    if (p != null && typeof p.originalRequiredValue === 'function') {\n      doc.$__.cachedRequired[path] = p.originalRequiredValue.call(doc, doc);\n    }\n  });\n}\n\n/*!\n * ignore\n */\n\nfunction _getPathsToValidate(doc) {\n  const skipSchemaValidators = {};\n\n  _evaluateRequiredFunctions(doc);\n  // only validate required fields when necessary\n  let paths = new Set(Object.keys(doc.$__.activePaths.states.require).filter(function(path) {\n    if (!doc.$__isSelected(path) && !doc.isModified(path)) {\n      return false;\n    }\n    if (path in doc.$__.cachedRequired) {\n      return doc.$__.cachedRequired[path];\n    }\n    return true;\n  }));\n\n\n  Object.keys(doc.$__.activePaths.states.init).forEach(addToPaths);\n  Object.keys(doc.$__.activePaths.states.modify).forEach(addToPaths);\n  Object.keys(doc.$__.activePaths.states.default).forEach(addToPaths);\n  function addToPaths(p) { paths.add(p); }\n\n  const subdocs = doc.$getAllSubdocs();\n  const modifiedPaths = doc.modifiedPaths();\n  for (const subdoc of subdocs) {\n    if (subdoc.$basePath) {\n      // Remove child paths for now, because we'll be validating the whole\n      // subdoc\n      for (const p of paths) {\n        if (p === null || p.startsWith(subdoc.$basePath + '.')) {\n          paths.delete(p);\n        }\n      }\n\n      if (doc.isModified(subdoc.$basePath, modifiedPaths) &&\n            !doc.isDirectModified(subdoc.$basePath) &&\n            !doc.$isDefault(subdoc.$basePath)) {\n        paths.add(subdoc.$basePath);\n\n        skipSchemaValidators[subdoc.$basePath] = true;\n      }\n    }\n  }\n\n  // from here on we're not removing items from paths\n\n  // gh-661: if a whole array is modified, make sure to run validation on all\n  // the children as well\n  for (const path of paths) {\n    const _pathType = doc.$__schema.path(path);\n    if (!_pathType ||\n        !_pathType.$isMongooseArray ||\n        // To avoid potential performance issues, skip doc arrays whose children\n        // are not required. `getPositionalPathType()` may be slow, so avoid\n        // it unless we have a case of #6364\n        (_pathType.$isMongooseDocumentArray && !get(_pathType, 'schemaOptions.required'))) {\n      continue;\n    }\n\n    const val = doc.$__getValue(path);\n    _pushNestedArrayPaths(val, paths, path);\n  }\n\n  function _pushNestedArrayPaths(val, paths, path) {\n    if (val != null) {\n      const numElements = val.length;\n      for (let j = 0; j < numElements; ++j) {\n        if (Array.isArray(val[j])) {\n          _pushNestedArrayPaths(val[j], paths, path + '.' + j);\n        } else {\n          paths.add(path + '.' + j);\n        }\n      }\n    }\n  }\n\n  const flattenOptions = { skipArrays: true };\n  for (const pathToCheck of paths) {\n    if (doc.$__schema.nested[pathToCheck]) {\n      let _v = doc.$__getValue(pathToCheck);\n      if (isMongooseObject(_v)) {\n        _v = _v.toObject({ transform: false });\n      }\n      const flat = flatten(_v, pathToCheck, flattenOptions, doc.$__schema);\n      Object.keys(flat).forEach(addToPaths);\n    }\n  }\n\n  for (const path of paths) {\n    // Single nested paths (paths embedded under single nested subdocs) will\n    // be validated on their own when we call `validate()` on the subdoc itself.\n    // Re: gh-8468\n    if (doc.$__schema.singleNestedPaths.hasOwnProperty(path)) {\n      paths.delete(path);\n      continue;\n    }\n    const _pathType = doc.$__schema.path(path);\n    if (!_pathType || !_pathType.$isSchemaMap) {\n      continue;\n    }\n\n    const val = doc.$__getValue(path);\n    if (val == null) {\n      continue;\n    }\n    for (const key of val.keys()) {\n      paths.add(path + '.' + key);\n    }\n  }\n\n  paths = Array.from(paths);\n  return [paths, skipSchemaValidators];\n}\n\n/*!\n * ignore\n */\n\nDocument.prototype.$__validate = function(pathsToValidate, options, callback) {\n  if (typeof pathsToValidate === 'function') {\n    callback = pathsToValidate;\n    options = null;\n    pathsToValidate = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  const hasValidateModifiedOnlyOption = options &&\n      (typeof options === 'object') &&\n      ('validateModifiedOnly' in options);\n\n  let shouldValidateModifiedOnly;\n  if (hasValidateModifiedOnlyOption) {\n    shouldValidateModifiedOnly = !!options.validateModifiedOnly;\n  } else {\n    shouldValidateModifiedOnly = this.$__schema.options.validateModifiedOnly;\n  }\n\n  const _this = this;\n  const _complete = () => {\n    let validationError = this.$__.validationError;\n    this.$__.validationError = undefined;\n\n    if (shouldValidateModifiedOnly && validationError != null) {\n      // Remove any validation errors that aren't from modified paths\n      const errors = Object.keys(validationError.errors);\n      for (const errPath of errors) {\n        if (!this.isModified(errPath)) {\n          delete validationError.errors[errPath];\n        }\n      }\n      if (Object.keys(validationError.errors).length === 0) {\n        validationError = void 0;\n      }\n    }\n\n    this.$__.cachedRequired = {};\n    this.emit('validate', _this);\n    this.constructor.emit('validate', _this);\n\n    this.$__.validating = null;\n    if (validationError) {\n      for (const key in validationError.errors) {\n        // Make sure cast errors persist\n        if (!this[documentArrayParent] &&\n            validationError.errors[key] instanceof MongooseError.CastError) {\n          this.invalidate(key, validationError.errors[key]);\n        }\n      }\n\n      return validationError;\n    }\n  };\n\n  // only validate required fields when necessary\n  const pathDetails = _getPathsToValidate(this);\n  let paths = shouldValidateModifiedOnly ?\n    pathDetails[0].filter((path) => this.isModified(path)) :\n    pathDetails[0];\n  const skipSchemaValidators = pathDetails[1];\n\n  if (typeof pathsToValidate === 'string') {\n    pathsToValidate = pathsToValidate.split(' ');\n  }\n  if (Array.isArray(pathsToValidate)) {\n    paths = _handlePathsToValidate(paths, pathsToValidate);\n  }\n  if (paths.length === 0) {\n    return immediate(function() {\n      const error = _complete();\n      if (error) {\n        return _this.$__schema.s.hooks.execPost('validate:error', _this, [_this], { error: error }, function(error) {\n          callback(error);\n        });\n      }\n      callback(null, _this);\n    });\n  }\n\n  const validated = {};\n  let total = 0;\n\n  const complete = function() {\n    const error = _complete();\n    if (error) {\n      return _this.$__schema.s.hooks.execPost('validate:error', _this, [_this], { error: error }, function(error) {\n        callback(error);\n      });\n    }\n    callback(null, _this);\n  };\n\n  const validatePath = function(path) {\n    if (path == null || validated[path]) {\n      return;\n    }\n\n    validated[path] = true;\n    total++;\n\n    immediate(function() {\n      const schemaType = _this.$__schema.path(path);\n\n      if (!schemaType) {\n        return --total || complete();\n      }\n\n      // If user marked as invalid or there was a cast error, don't validate\n      if (!_this.$isValid(path)) {\n        --total || complete();\n        return;\n      }\n\n      // If setting a path under a mixed path, avoid using the mixed path validator (gh-10141)\n      if (schemaType[schemaMixedSymbol] != null && path !== schemaType.path) {\n        return --total || complete();\n      }\n\n      let val = _this.$__getValue(path);\n\n      // If you `populate()` and get back a null value, required validators\n      // shouldn't fail (gh-8018). We should always fall back to the populated\n      // value.\n      let pop;\n      if (val == null && (pop = _this.populated(path))) {\n        val = pop;\n      }\n      const scope = path in _this.$__.pathsToScopes ?\n        _this.$__.pathsToScopes[path] :\n        _this;\n\n      const doValidateOptions = {\n        skipSchemaValidators: skipSchemaValidators[path],\n        path: path,\n        validateModifiedOnly: shouldValidateModifiedOnly\n      };\n      schemaType.doValidate(val, function(err) {\n        if (err && (!schemaType.$isMongooseDocumentArray || err.$isArrayValidatorError)) {\n          if (schemaType.$isSingleNested &&\n              err instanceof ValidationError &&\n              schemaType.schema.options.storeSubdocValidationError === false) {\n            return --total || complete();\n          }\n          _this.invalidate(path, err, undefined, true);\n        }\n        --total || complete();\n      }, scope, doValidateOptions);\n    });\n  };\n\n  const numPaths = paths.length;\n  for (let i = 0; i < numPaths; ++i) {\n    validatePath(paths[i]);\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction _handlePathsToValidate(paths, pathsToValidate) {\n  const _pathsToValidate = new Set(pathsToValidate);\n  const parentPaths = new Map([]);\n  for (const path of pathsToValidate) {\n    if (path.indexOf('.') === -1) {\n      continue;\n    }\n    const pieces = path.split('.');\n    let cur = pieces[0];\n    for (let i = 1; i < pieces.length; ++i) {\n      // Since we skip subpaths under single nested subdocs to\n      // avoid double validation, we need to add back the\n      // single nested subpath if the user asked for it (gh-8626)\n      parentPaths.set(cur, path);\n      cur = cur + '.' + pieces[i];\n    }\n  }\n\n  const ret = [];\n  for (const path of paths) {\n    if (_pathsToValidate.has(path)) {\n      ret.push(path);\n    } else if (parentPaths.has(path)) {\n      ret.push(parentPaths.get(path));\n    }\n  }\n  return ret;\n}\n\n/**\n * Executes registered validation rules (skipping asynchronous validators) for this document.\n *\n * ####Note:\n *\n * This method is useful if you need synchronous validation.\n *\n * ####Example:\n *\n *     const err = doc.validateSync();\n *     if (err) {\n *       handleError(err);\n *     } else {\n *       // validation passed\n *     }\n *\n * @param {Array|string} pathsToValidate only validate the given paths\n * @param {Object} [options] options for validation\n * @param {Boolean} [options.validateModifiedOnly=false] If `true`, Mongoose will only validate modified paths, as opposed to modified paths and `required` paths.\n * @return {ValidationError|undefined} ValidationError if there are errors during validation, or undefined if there is no error.\n * @api public\n */\n\nDocument.prototype.validateSync = function(pathsToValidate, options) {\n  const _this = this;\n\n  if (arguments.length === 1 && typeof arguments[0] === 'object' && !Array.isArray(arguments[0])) {\n    options = arguments[0];\n    pathsToValidate = null;\n  }\n\n  const hasValidateModifiedOnlyOption = options &&\n      (typeof options === 'object') &&\n      ('validateModifiedOnly' in options);\n\n  let shouldValidateModifiedOnly;\n  if (hasValidateModifiedOnlyOption) {\n    shouldValidateModifiedOnly = !!options.validateModifiedOnly;\n  } else {\n    shouldValidateModifiedOnly = this.$__schema.options.validateModifiedOnly;\n  }\n\n  if (typeof pathsToValidate === 'string') {\n    pathsToValidate = pathsToValidate.split(' ');\n  }\n\n  // only validate required fields when necessary\n  const pathDetails = _getPathsToValidate(this);\n  let paths = shouldValidateModifiedOnly ?\n    pathDetails[0].filter((path) => this.isModified(path)) :\n    pathDetails[0];\n  const skipSchemaValidators = pathDetails[1];\n\n  if (typeof pathsToValidate === 'string') {\n    pathsToValidate = pathsToValidate.split(' ');\n  }\n  if (Array.isArray(pathsToValidate)) {\n    paths = _handlePathsToValidate(paths, pathsToValidate);\n  }\n  const validating = {};\n\n  paths.forEach(function(path) {\n    if (validating[path]) {\n      return;\n    }\n\n    validating[path] = true;\n\n    const p = _this.$__schema.path(path);\n    if (!p) {\n      return;\n    }\n    if (!_this.$isValid(path)) {\n      return;\n    }\n\n    const val = _this.$__getValue(path);\n    const err = p.doValidateSync(val, _this, {\n      skipSchemaValidators: skipSchemaValidators[path],\n      path: path,\n      validateModifiedOnly: shouldValidateModifiedOnly\n    });\n    if (err && (!p.$isMongooseDocumentArray || err.$isArrayValidatorError)) {\n      if (p.$isSingleNested &&\n          err instanceof ValidationError &&\n          p.schema.options.storeSubdocValidationError === false) {\n        return;\n      }\n      _this.invalidate(path, err, undefined, true);\n    }\n  });\n\n  const err = _this.$__.validationError;\n  _this.$__.validationError = undefined;\n  _this.emit('validate', _this);\n  _this.constructor.emit('validate', _this);\n\n  if (err) {\n    for (const key in err.errors) {\n      // Make sure cast errors persist\n      if (err.errors[key] instanceof MongooseError.CastError) {\n        _this.invalidate(key, err.errors[key]);\n      }\n    }\n  }\n\n  return err;\n};\n\n/**\n * Marks a path as invalid, causing validation to fail.\n *\n * The `errorMsg` argument will become the message of the `ValidationError`.\n *\n * The `value` argument (if passed) will be available through the `ValidationError.value` property.\n *\n *     doc.invalidate('size', 'must be less than 20', 14);\n\n *     doc.validate(function (err) {\n *       console.log(err)\n *       // prints\n *       { message: 'Validation failed',\n *         name: 'ValidationError',\n *         errors:\n *          { size:\n *             { message: 'must be less than 20',\n *               name: 'ValidatorError',\n *               path: 'size',\n *               type: 'user defined',\n *               value: 14 } } }\n *     })\n *\n * @param {String} path the field to invalidate. For array elements, use the `array.i.field` syntax, where `i` is the 0-based index in the array.\n * @param {String|Error} errorMsg the error which states the reason `path` was invalid\n * @param {Object|String|Number|any} value optional invalid value\n * @param {String} [kind] optional `kind` property for the error\n * @return {ValidationError} the current ValidationError, with all currently invalidated paths\n * @api public\n */\n\nDocument.prototype.invalidate = function(path, err, val, kind) {\n  if (!this.$__.validationError) {\n    this.$__.validationError = new ValidationError(this);\n  }\n\n  if (this.$__.validationError.errors[path]) {\n    return;\n  }\n\n  if (!err || typeof err === 'string') {\n    err = new ValidatorError({\n      path: path,\n      message: err,\n      type: kind || 'user defined',\n      value: val\n    });\n  }\n\n  if (this.$__.validationError === err) {\n    return this.$__.validationError;\n  }\n\n  this.$__.validationError.addError(path, err);\n  return this.$__.validationError;\n};\n\n/**\n * Marks a path as valid, removing existing validation errors.\n *\n * @param {String} path the field to mark as valid\n * @api public\n * @memberOf Document\n * @instance\n * @method $markValid\n */\n\nDocument.prototype.$markValid = function(path) {\n  if (!this.$__.validationError || !this.$__.validationError.errors[path]) {\n    return;\n  }\n\n  delete this.$__.validationError.errors[path];\n  if (Object.keys(this.$__.validationError.errors).length === 0) {\n    this.$__.validationError = null;\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction _markValidSubpaths(doc, path) {\n  if (!doc.$__.validationError) {\n    return;\n  }\n\n  const keys = Object.keys(doc.$__.validationError.errors);\n  for (const key of keys) {\n    if (key.startsWith(path + '.')) {\n      delete doc.$__.validationError.errors[key];\n    }\n  }\n  if (Object.keys(doc.$__.validationError.errors).length === 0) {\n    doc.$__.validationError = null;\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _checkImmutableSubpaths(subdoc, schematype, priorVal) {\n  const schema = schematype.schema;\n  if (schema == null) {\n    return;\n  }\n\n  for (const key of Object.keys(schema.paths)) {\n    const path = schema.paths[key];\n    if (path.$immutableSetter == null) {\n      continue;\n    }\n    const oldVal = priorVal == null ? void 0 : priorVal.$__getValue(key);\n    // Calling immutableSetter with `oldVal` even though it expects `newVal`\n    // is intentional. That's because `$immutableSetter` compares its param\n    // to the current value.\n    path.$immutableSetter.call(subdoc, oldVal);\n  }\n}\n\n/**\n * Saves this document by inserting a new document into the database if [document.isNew](/docs/api.html#document_Document-isNew) is `true`,\n * or sends an [updateOne](/docs/api.html#document_Document-updateOne) operation **only** with the modifications to the database, it does not replace the whole document in the latter case.\n *\n * ####Example:\n *\n *     product.sold = Date.now();\n *     product = await product.save();\n *\n * If save is successful, the returned promise will fulfill with the document\n * saved.\n *\n * ####Example:\n *\n *     const newProduct = await product.save();\n *     newProduct === product; // true\n *\n * @param {Object} [options] options optional options\n * @param {Session} [options.session=null] the [session](https://docs.mongodb.com/manual/reference/server-sessions/) associated with this save operation. If not specified, defaults to the [document's associated session](api.html#document_Document-$session).\n * @param {Object} [options.safe] (DEPRECATED) overrides [schema's safe option](http://mongoosejs.com//docs/guide.html#safe). Use the `w` option instead.\n * @param {Boolean} [options.validateBeforeSave] set to false to save without validating.\n * @param {Boolean} [options.validateModifiedOnly=false] If `true`, Mongoose will only validate modified paths, as opposed to modified paths and `required` paths.\n * @param {Number|String} [options.w] set the [write concern](https://docs.mongodb.com/manual/reference/write-concern/#w-option). Overrides the [schema-level `writeConcern` option](/docs/guide.html#writeConcern)\n * @param {Boolean} [options.j] set to true for MongoDB to wait until this `save()` has been [journaled before resolving the returned promise](https://docs.mongodb.com/manual/reference/write-concern/#j-option). Overrides the [schema-level `writeConcern` option](/docs/guide.html#writeConcern)\n * @param {Number} [options.wtimeout] sets a [timeout for the write concern](https://docs.mongodb.com/manual/reference/write-concern/#wtimeout). Overrides the [schema-level `writeConcern` option](/docs/guide.html#writeConcern).\n * @param {Boolean} [options.checkKeys=true] the MongoDB driver prevents you from saving keys that start with '$' or contain '.' by default. Set this option to `false` to skip that check. See [restrictions on field names](https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names)\n * @param {Boolean} [options.timestamps=true] if `false` and [timestamps](./guide.html#timestamps) are enabled, skip timestamps for this `save()`.\n * @param {Function} [fn] optional callback\n * @method save\n * @memberOf Document\n * @instance\n * @throws {DocumentNotFoundError} if this [save updates an existing document](api.html#document_Document-isNew) but the document doesn't exist in the database. For example, you will get this error if the document is [deleted between when you retrieved the document and when you saved it](documents.html#updating).\n * @return {Promise|undefined} Returns undefined if used with callback or a Promise otherwise.\n * @api public\n * @see middleware http://mongoosejs.com/docs/middleware.html\n */\n\n/**\n * Checks if a path is invalid\n *\n * @param {String|Array<String>} path the field to check\n * @method $isValid\n * @memberOf Document\n * @instance\n * @api private\n */\n\nDocument.prototype.$isValid = function(path) {\n  if (this.$__.validationError == null || Object.keys(this.$__.validationError.errors).length === 0) {\n    return true;\n  }\n  if (path == null) {\n    return false;\n  }\n\n  if (path.indexOf(' ') !== -1) {\n    path = path.split(' ');\n  }\n  if (Array.isArray(path)) {\n    return path.some(p => this.$__.validationError.errors[p] == null);\n  }\n\n  return this.$__.validationError.errors[path] == null;\n};\n\n/**\n * Resets the internal modified state of this document.\n *\n * @api private\n * @return {Document}\n * @method $__reset\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__reset = function reset() {\n  let _this = this;\n  DocumentArray || (DocumentArray = require('./types/documentarray'));\n\n  this.$__.activePaths\n    .map('init', 'modify', function(i) {\n      return _this.$__getValue(i);\n    })\n    .filter(function(val) {\n      return val && val instanceof Array && val.isMongooseDocumentArray && val.length;\n    })\n    .forEach(function(array) {\n      let i = array.length;\n      while (i--) {\n        const doc = array[i];\n        if (!doc) {\n          continue;\n        }\n        doc.$__reset();\n      }\n\n      _this.$__.activePaths.init(array.$path());\n\n      array[arrayAtomicsBackupSymbol] = array[arrayAtomicsSymbol];\n      array[arrayAtomicsSymbol] = {};\n    });\n\n  this.$__.activePaths.\n    map('init', 'modify', function(i) {\n      return _this.$__getValue(i);\n    }).\n    filter(function(val) {\n      return val && val.$isSingleNested;\n    }).\n    forEach(function(doc) {\n      doc.$__reset();\n      if (doc.$__parent === _this) {\n        _this.$__.activePaths.init(doc.$basePath);\n      } else if (doc.$__parent != null && doc.$__parent.ownerDocument) {\n        // If map path underneath subdocument, may end up with a case where\n        // map path is modified but parent still needs to be reset. See gh-10295\n        doc.$__parent.$__reset();\n      }\n    });\n\n  // clear atomics\n  this.$__dirty().forEach(function(dirt) {\n    const type = dirt.value;\n\n    if (type && type[arrayAtomicsSymbol]) {\n      type[arrayAtomicsBackupSymbol] = type[arrayAtomicsSymbol];\n      type[arrayAtomicsSymbol] = {};\n    }\n  });\n\n  this.$__.backup = {};\n  this.$__.backup.activePaths = {\n    modify: Object.assign({}, this.$__.activePaths.states.modify),\n    default: Object.assign({}, this.$__.activePaths.states.default)\n  };\n  this.$__.backup.validationError = this.$__.validationError;\n  this.$__.backup.errors = this.errors;\n\n  // Clear 'dirty' cache\n  this.$__.activePaths.clear('modify');\n  this.$__.activePaths.clear('default');\n  this.$__.validationError = undefined;\n  this.errors = undefined;\n  _this = this;\n  this.$__schema.requiredPaths().forEach(function(path) {\n    _this.$__.activePaths.require(path);\n  });\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nDocument.prototype.$__undoReset = function $__undoReset() {\n  if (this.$__.backup == null || this.$__.backup.activePaths == null) {\n    return;\n  }\n\n  this.$__.activePaths.states.modify = this.$__.backup.activePaths.modify;\n  this.$__.activePaths.states.default = this.$__.backup.activePaths.default;\n\n  this.$__.validationError = this.$__.backup.validationError;\n  this.errors = this.$__.backup.errors;\n\n  for (const dirt of this.$__dirty()) {\n    const type = dirt.value;\n\n    if (type && type[arrayAtomicsSymbol] && type[arrayAtomicsBackupSymbol]) {\n      type[arrayAtomicsSymbol] = type[arrayAtomicsBackupSymbol];\n    }\n  }\n\n  for (const subdoc of this.$getAllSubdocs()) {\n    subdoc.$__undoReset();\n  }\n};\n\n/**\n * Returns this documents dirty paths / vals.\n *\n * @api private\n * @method $__dirty\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__dirty = function() {\n  const _this = this;\n\n  let all = this.$__.activePaths.map('modify', function(path) {\n    return {\n      path: path,\n      value: _this.$__getValue(path),\n      schema: _this.$__path(path)\n    };\n  });\n  // gh-2558: if we had to set a default and the value is not undefined,\n  // we have to save as well\n  all = all.concat(this.$__.activePaths.map('default', function(path) {\n    if (path === '_id' || _this.$__getValue(path) == null) {\n      return;\n    }\n    return {\n      path: path,\n      value: _this.$__getValue(path),\n      schema: _this.$__path(path)\n    };\n  }));\n\n  // Sort dirty paths in a flat hierarchy.\n  all.sort(function(a, b) {\n    return (a.path < b.path ? -1 : (a.path > b.path ? 1 : 0));\n  });\n\n  // Ignore \"foo.a\" if \"foo\" is dirty already.\n  const minimal = [];\n  let lastPath;\n  let top;\n\n  all.forEach(function(item) {\n    if (!item) {\n      return;\n    }\n    if (lastPath == null || item.path.indexOf(lastPath) !== 0) {\n      lastPath = item.path + '.';\n      minimal.push(item);\n      top = item;\n    } else if (top != null &&\n        top.value != null &&\n        top.value[arrayAtomicsSymbol] != null &&\n        top.value.hasAtomics()) {\n      // special case for top level MongooseArrays\n      // the `top` array itself and a sub path of `top` are being modified.\n      // the only way to honor all of both modifications is through a $set\n      // of entire array.\n      top.value[arrayAtomicsSymbol] = {};\n      top.value[arrayAtomicsSymbol].$set = top.value;\n    }\n  });\n  top = lastPath = null;\n  return minimal;\n};\n\n/**\n * Assigns/compiles `schema` into this documents prototype.\n *\n * @param {Schema} schema\n * @api private\n * @method $__setSchema\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__setSchema = function(schema) {\n  schema.plugin(idGetter, { deduplicate: true });\n  compile(schema.tree, this, undefined, schema.options);\n\n  // Apply default getters if virtual doesn't have any (gh-6262)\n  for (const key of Object.keys(schema.virtuals)) {\n    schema.virtuals[key]._applyDefaultGetters();\n  }\n  if (schema.path('schema') == null) {\n    this.schema = schema;\n  }\n  this.$__schema = schema;\n  this[documentSchemaSymbol] = schema;\n};\n\n\n/**\n * Get active path that were changed and are arrays\n *\n * @api private\n * @method $__getArrayPathsToValidate\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__getArrayPathsToValidate = function() {\n  DocumentArray || (DocumentArray = require('./types/documentarray'));\n\n  // validate all document arrays.\n  return this.$__.activePaths\n    .map('init', 'modify', function(i) {\n      return this.$__getValue(i);\n    }.bind(this))\n    .filter(function(val) {\n      return val && val instanceof Array && val.isMongooseDocumentArray && val.length;\n    }).reduce(function(seed, array) {\n      return seed.concat(array);\n    }, [])\n    .filter(function(doc) {\n      return doc;\n    });\n};\n\n\n/**\n * Get all subdocs (by bfs)\n *\n * @api public\n * @method $getAllSubdocs\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$getAllSubdocs = function $getAllSubdocs() {\n  DocumentArray || (DocumentArray = require('./types/documentarray'));\n  Embedded = Embedded || require('./types/embedded');\n\n  function docReducer(doc, seed, path) {\n    let val = doc;\n    let isNested = false;\n    if (path) {\n      if (doc instanceof Document && doc[documentSchemaSymbol].paths[path]) {\n        val = doc._doc[path];\n      } else if (doc instanceof Document && doc[documentSchemaSymbol].nested[path]) {\n        val = doc._doc[path];\n        isNested = true;\n      } else {\n        val = doc[path];\n      }\n    }\n    if (val instanceof Embedded) {\n      seed.push(val);\n    } else if (val instanceof Map) {\n      seed = Array.from(val.keys()).reduce(function(seed, path) {\n        return docReducer(val.get(path), seed, null);\n      }, seed);\n    } else if (val && val.$isSingleNested) {\n      seed = Object.keys(val._doc).reduce(function(seed, path) {\n        return docReducer(val._doc, seed, path);\n      }, seed);\n      seed.push(val);\n    } else if (val && val.isMongooseDocumentArray) {\n      val.forEach(function _docReduce(doc) {\n        if (!doc || !doc._doc) {\n          return;\n        }\n        seed = Object.keys(doc._doc).reduce(function(seed, path) {\n          return docReducer(doc._doc, seed, path);\n        }, seed);\n        if (doc instanceof Embedded) {\n          seed.push(doc);\n        }\n      });\n    } else if (isNested && val != null) {\n      for (const path of Object.keys(val)) {\n        docReducer(val, seed, path);\n      }\n    }\n    return seed;\n  }\n\n  const subDocs = [];\n  for (const path of Object.keys(this._doc)) {\n    docReducer(this, subDocs, path);\n  }\n\n  return subDocs;\n};\n\n/*!\n * Runs queued functions\n */\n\nfunction applyQueue(doc) {\n  const q = doc.$__schema && doc.$__schema.callQueue;\n  if (!q.length) {\n    return;\n  }\n\n  for (const pair of q) {\n    if (pair[0] !== 'pre' && pair[0] !== 'post' && pair[0] !== 'on') {\n      doc[pair[0]].apply(doc, pair[1]);\n    }\n  }\n}\n\n/*!\n * ignore\n */\n\nDocument.prototype.$__handleReject = function handleReject(err) {\n  // emit on the Model if listening\n  if (this.listeners('error').length) {\n    this.emit('error', err);\n  } else if (this.constructor.listeners && this.constructor.listeners('error').length) {\n    this.constructor.emit('error', err);\n  }\n};\n\n/**\n * Internal helper for toObject() and toJSON() that doesn't manipulate options\n *\n * @api private\n * @method $toObject\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$toObject = function(options, json) {\n  let defaultOptions = {\n    transform: true,\n    flattenDecimals: true\n  };\n\n  const path = json ? 'toJSON' : 'toObject';\n  const baseOptions = get(this, 'constructor.base.options.' + path, {});\n  const schemaOptions = get(this, '$__schema.options', {});\n  // merge base default options with Schema's set default options if available.\n  // `clone` is necessary here because `utils.options` directly modifies the second input.\n  defaultOptions = utils.options(defaultOptions, clone(baseOptions));\n  defaultOptions = utils.options(defaultOptions, clone(schemaOptions[path] || {}));\n\n  // If options do not exist or is not an object, set it to empty object\n  options = utils.isPOJO(options) ? clone(options) : {};\n  options._calledWithOptions = options._calledWithOptions || clone(options);\n\n  let _minimize;\n  if (options._calledWithOptions.minimize != null) {\n    _minimize = options.minimize;\n  } else if (defaultOptions.minimize != null) {\n    _minimize = defaultOptions.minimize;\n  } else {\n    _minimize = schemaOptions.minimize;\n  }\n\n  let flattenMaps;\n  if (options._calledWithOptions.flattenMaps != null) {\n    flattenMaps = options.flattenMaps;\n  } else if (defaultOptions.flattenMaps != null) {\n    flattenMaps = defaultOptions.flattenMaps;\n  } else {\n    flattenMaps = schemaOptions.flattenMaps;\n  }\n\n  // The original options that will be passed to `clone()`. Important because\n  // `clone()` will recursively call `$toObject()` on embedded docs, so we\n  // need the original options the user passed in, plus `_isNested` and\n  // `_parentOptions` for checking whether we need to depopulate.\n  const cloneOptions = Object.assign(utils.clone(options), {\n    _isNested: true,\n    json: json,\n    minimize: _minimize,\n    flattenMaps: flattenMaps\n  });\n\n  if (utils.hasUserDefinedProperty(options, 'getters')) {\n    cloneOptions.getters = options.getters;\n  }\n  if (utils.hasUserDefinedProperty(options, 'virtuals')) {\n    cloneOptions.virtuals = options.virtuals;\n  }\n\n  const depopulate = options.depopulate ||\n    get(options, '_parentOptions.depopulate', false);\n  // _isNested will only be true if this is not the top level document, we\n  // should never depopulate\n  if (depopulate && options._isNested && this.$__.wasPopulated) {\n    // populated paths that we set to a document\n    return clone(this._id, cloneOptions);\n  }\n\n  // merge default options with input options.\n  options = utils.options(defaultOptions, options);\n  options._isNested = true;\n  options.json = json;\n  options.minimize = _minimize;\n\n  cloneOptions._parentOptions = options;\n  cloneOptions._skipSingleNestedGetters = true;\n\n  const gettersOptions = Object.assign({}, cloneOptions);\n  gettersOptions._skipSingleNestedGetters = false;\n\n  // remember the root transform function\n  // to save it from being overwritten by sub-transform functions\n  const originalTransform = options.transform;\n\n  let ret = clone(this._doc, cloneOptions) || {};\n\n  if (options.getters) {\n    applyGetters(this, ret, gettersOptions);\n\n    if (options.minimize) {\n      ret = minimize(ret) || {};\n    }\n  }\n\n  if (options.virtuals || (options.getters && options.virtuals !== false)) {\n    applyVirtuals(this, ret, gettersOptions, options);\n  }\n\n  if (options.versionKey === false && this.$__schema.options.versionKey) {\n    delete ret[this.$__schema.options.versionKey];\n  }\n\n  let transform = options.transform;\n\n  // In the case where a subdocument has its own transform function, we need to\n  // check and see if the parent has a transform (options.transform) and if the\n  // child schema has a transform (this.schema.options.toObject) In this case,\n  // we need to adjust options.transform to be the child schema's transform and\n  // not the parent schema's\n  if (transform) {\n    applySchemaTypeTransforms(this, ret);\n  }\n\n  if (options.useProjection) {\n    omitDeselectedFields(this, ret);\n  }\n\n  if (transform === true || (schemaOptions.toObject && transform)) {\n    const opts = options.json ? schemaOptions.toJSON : schemaOptions.toObject;\n\n    if (opts) {\n      transform = (typeof options.transform === 'function' ? options.transform : opts.transform);\n    }\n  } else {\n    options.transform = originalTransform;\n  }\n\n  if (typeof transform === 'function') {\n    const xformed = transform(this, ret, options);\n    if (typeof xformed !== 'undefined') {\n      ret = xformed;\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Converts this document into a plain-old JavaScript object ([POJO](https://masteringjs.io/tutorials/fundamentals/pojo)).\n *\n * Buffers are converted to instances of [mongodb.Binary](http://mongodb.github.com/node-mongodb-native/api-bson-generated/binary.html) for proper storage.\n *\n * ####Options:\n *\n * - `getters` apply all getters (path and virtual getters), defaults to false\n * - `aliases` apply all aliases if `virtuals=true`, defaults to true\n * - `virtuals` apply virtual getters (can override `getters` option), defaults to false\n * - `minimize` remove empty objects, defaults to true\n * - `transform` a transform function to apply to the resulting document before returning\n * - `depopulate` depopulate any populated paths, replacing them with their original refs, defaults to false\n * - `versionKey` whether to include the version key, defaults to true\n * - `flattenMaps` convert Maps to POJOs. Useful if you want to JSON.stringify() the result of toObject(), defaults to false\n * - `useProjection` set to `true` to omit fields that are excluded in this document's projection. Unless you specified a projection, this will omit any field that has `select: false` in the schema.\n *\n * ####Getters/Virtuals\n *\n * Example of only applying path getters\n *\n *     doc.toObject({ getters: true, virtuals: false })\n *\n * Example of only applying virtual getters\n *\n *     doc.toObject({ virtuals: true })\n *\n * Example of applying both path and virtual getters\n *\n *     doc.toObject({ getters: true })\n *\n * To apply these options to every document of your schema by default, set your [schemas](#schema_Schema) `toObject` option to the same argument.\n *\n *     schema.set('toObject', { virtuals: true })\n *\n * ####Transform\n *\n * We may need to perform a transformation of the resulting object based on some criteria, say to remove some sensitive information or return a custom object. In this case we set the optional `transform` function.\n *\n * Transform functions receive three arguments\n *\n *     function (doc, ret, options) {}\n *\n * - `doc` The mongoose document which is being converted\n * - `ret` The plain object representation which has been converted\n * - `options` The options in use (either schema options or the options passed inline)\n *\n * ####Example\n *\n *     // specify the transform schema option\n *     if (!schema.options.toObject) schema.options.toObject = {};\n *     schema.options.toObject.transform = function (doc, ret, options) {\n *       // remove the _id of every document before returning the result\n *       delete ret._id;\n *       return ret;\n *     }\n *\n *     // without the transformation in the schema\n *     doc.toObject(); // { _id: 'anId', name: 'Wreck-it Ralph' }\n *\n *     // with the transformation\n *     doc.toObject(); // { name: 'Wreck-it Ralph' }\n *\n * With transformations we can do a lot more than remove properties. We can even return completely new customized objects:\n *\n *     if (!schema.options.toObject) schema.options.toObject = {};\n *     schema.options.toObject.transform = function (doc, ret, options) {\n *       return { movie: ret.name }\n *     }\n *\n *     // without the transformation in the schema\n *     doc.toObject(); // { _id: 'anId', name: 'Wreck-it Ralph' }\n *\n *     // with the transformation\n *     doc.toObject(); // { movie: 'Wreck-it Ralph' }\n *\n * _Note: if a transform function returns `undefined`, the return value will be ignored._\n *\n * Transformations may also be applied inline, overridding any transform set in the options:\n *\n *     function xform (doc, ret, options) {\n *       return { inline: ret.name, custom: true }\n *     }\n *\n *     // pass the transform as an inline option\n *     doc.toObject({ transform: xform }); // { inline: 'Wreck-it Ralph', custom: true }\n *\n * If you want to skip transformations, use `transform: false`:\n *\n *     schema.options.toObject.hide = '_id';\n *     schema.options.toObject.transform = function (doc, ret, options) {\n *       if (options.hide) {\n *         options.hide.split(' ').forEach(function (prop) {\n *           delete ret[prop];\n *         });\n *       }\n *       return ret;\n *     }\n *\n *     const doc = new Doc({ _id: 'anId', secret: 47, name: 'Wreck-it Ralph' });\n *     doc.toObject();                                        // { secret: 47, name: 'Wreck-it Ralph' }\n *     doc.toObject({ hide: 'secret _id', transform: false });// { _id: 'anId', secret: 47, name: 'Wreck-it Ralph' }\n *     doc.toObject({ hide: 'secret _id', transform: true }); // { name: 'Wreck-it Ralph' }\n *\n * If you pass a transform in `toObject()` options, Mongoose will apply the transform\n * to [subdocuments](/docs/subdocs.html) in addition to the top-level document.\n * Similarly, `transform: false` skips transforms for all subdocuments.\n * Note that this is behavior is different for transforms defined in the schema:\n * if you define a transform in `schema.options.toObject.transform`, that transform\n * will **not** apply to subdocuments.\n *\n *     const memberSchema = new Schema({ name: String, email: String });\n *     const groupSchema = new Schema({ members: [memberSchema], name: String, email });\n *     const Group = mongoose.model('Group', groupSchema);\n *\n *     const doc = new Group({\n *       name: 'Engineering',\n *       email: 'dev@mongoosejs.io',\n *       members: [{ name: 'Val', email: 'val@mongoosejs.io' }]\n *     });\n *\n *     // Removes `email` from both top-level document **and** array elements\n *     // { name: 'Engineering', members: [{ name: 'Val' }] }\n *     doc.toObject({ transform: (doc, ret) => { delete ret.email; return ret; } });\n *\n * Transforms, like all of these options, are also available for `toJSON`. See [this guide to `JSON.stringify()`](https://thecodebarbarian.com/the-80-20-guide-to-json-stringify-in-javascript.html) to learn why `toJSON()` and `toObject()` are separate functions.\n *\n * See [schema options](/docs/guide.html#toObject) for some more details.\n *\n * _During save, no custom options are applied to the document before being sent to the database._\n *\n * @param {Object} [options]\n * @param {Boolean} [options.getters=false] if true, apply all getters, including virtuals\n * @param {Boolean} [options.virtuals=false] if true, apply virtuals, including aliases. Use `{ getters: true, virtuals: false }` to just apply getters, not virtuals\n * @param {Boolean} [options.aliases=true] if `options.virtuals = true`, you can set `options.aliases = false` to skip applying aliases. This option is a no-op if `options.virtuals = false`.\n * @param {Boolean} [options.minimize=true] if true, omit any empty objects from the output\n * @param {Function|null} [options.transform=null] if set, mongoose will call this function to allow you to transform the returned object\n * @param {Boolean} [options.depopulate=false] if true, replace any conventionally populated paths with the original id in the output. Has no affect on virtual populated paths.\n * @param {Boolean} [options.versionKey=true] if false, exclude the version key (`__v` by default) from the output\n * @param {Boolean} [options.flattenMaps=false] if true, convert Maps to POJOs. Useful if you want to `JSON.stringify()` the result of `toObject()`.\n * @param {Boolean} [options.useProjection=false] - If true, omits fields that are excluded in this document's projection. Unless you specified a projection, this will omit any field that has `select: false` in the schema.\n * @return {Object} js object\n * @see mongodb.Binary http://mongodb.github.com/node-mongodb-native/api-bson-generated/binary.html\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.toObject = function(options) {\n  return this.$toObject(options);\n};\n\n/*!\n * Minimizes an object, removing undefined values and empty objects\n *\n * @param {Object} object to minimize\n * @return {Object}\n */\n\nfunction minimize(obj) {\n  const keys = Object.keys(obj);\n  let i = keys.length;\n  let hasKeys;\n  let key;\n  let val;\n\n  while (i--) {\n    key = keys[i];\n    val = obj[key];\n\n    if (utils.isObject(val) && !Buffer.isBuffer(val)) {\n      obj[key] = minimize(val);\n    }\n\n    if (undefined === obj[key]) {\n      delete obj[key];\n      continue;\n    }\n\n    hasKeys = true;\n  }\n\n  return hasKeys\n    ? obj\n    : undefined;\n}\n\n/*!\n * Applies virtuals properties to `json`.\n */\n\nfunction applyVirtuals(self, json, options, toObjectOptions) {\n  const schema = self.$__schema;\n  const paths = Object.keys(schema.virtuals);\n  let i = paths.length;\n  const numPaths = i;\n  let path;\n  let assignPath;\n  let cur = self._doc;\n  let v;\n  const aliases = get(toObjectOptions, 'aliases', true);\n\n  if (!cur) {\n    return json;\n  }\n\n  options = options || {};\n  for (i = 0; i < numPaths; ++i) {\n    path = paths[i];\n\n    // Allow skipping aliases with `toObject({ virtuals: true, aliases: false })`\n    if (!aliases && schema.aliases.hasOwnProperty(path)) {\n      continue;\n    }\n\n    // We may be applying virtuals to a nested object, for example if calling\n    // `doc.nestedProp.toJSON()`. If so, the path we assign to, `assignPath`,\n    // will be a trailing substring of the `path`.\n    assignPath = path;\n    if (options.path != null) {\n      if (!path.startsWith(options.path + '.')) {\n        continue;\n      }\n      assignPath = path.substr(options.path.length + 1);\n    }\n    const parts = assignPath.split('.');\n    v = clone(self.get(path), options);\n    if (v === void 0) {\n      continue;\n    }\n    const plen = parts.length;\n    cur = json;\n    for (let j = 0; j < plen - 1; ++j) {\n      cur[parts[j]] = cur[parts[j]] || {};\n      cur = cur[parts[j]];\n    }\n    cur[parts[plen - 1]] = v;\n  }\n\n  return json;\n}\n\n/*!\n * Applies virtuals properties to `json`.\n *\n * @param {Document} self\n * @param {Object} json\n * @return {Object} `json`\n */\n\nfunction applyGetters(self, json, options) {\n  const schema = self.$__schema;\n  const paths = Object.keys(schema.paths);\n  let i = paths.length;\n  let path;\n  let cur = self._doc;\n  let v;\n\n  if (!cur) {\n    return json;\n  }\n\n  while (i--) {\n    path = paths[i];\n\n    const parts = path.split('.');\n    const plen = parts.length;\n    const last = plen - 1;\n    let branch = json;\n    let part;\n    cur = self._doc;\n\n    if (!self.$__isSelected(path)) {\n      continue;\n    }\n\n    for (let ii = 0; ii < plen; ++ii) {\n      part = parts[ii];\n      v = cur[part];\n      if (ii === last) {\n        const val = self.get(path);\n        branch[part] = clone(val, options);\n      } else if (v == null) {\n        if (part in cur) {\n          branch[part] = v;\n        }\n        break;\n      } else {\n        branch = branch[part] || (branch[part] = {});\n      }\n      cur = v;\n    }\n  }\n\n  return json;\n}\n\n/*!\n * Applies schema type transforms to `json`.\n *\n * @param {Document} self\n * @param {Object} json\n * @return {Object} `json`\n */\n\nfunction applySchemaTypeTransforms(self, json) {\n  const schema = self.$__schema;\n  const paths = Object.keys(schema.paths || {});\n  const cur = self._doc;\n\n  if (!cur) {\n    return json;\n  }\n\n  for (const path of paths) {\n    const schematype = schema.paths[path];\n    if (typeof schematype.options.transform === 'function') {\n      const val = self.get(path);\n      const transformedValue = schematype.options.transform.call(self, val);\n      throwErrorIfPromise(path, transformedValue);\n      utils.setValue(path, transformedValue, json);\n    } else if (schematype.$embeddedSchemaType != null &&\n        typeof schematype.$embeddedSchemaType.options.transform === 'function') {\n      const vals = [].concat(self.get(path));\n      const transform = schematype.$embeddedSchemaType.options.transform;\n      for (let i = 0; i < vals.length; ++i) {\n        const transformedValue = transform.call(self, vals[i]);\n        vals[i] = transformedValue;\n        throwErrorIfPromise(path, transformedValue);\n      }\n\n      json[path] = vals;\n    }\n  }\n\n  return json;\n}\n\nfunction throwErrorIfPromise(path, transformedValue) {\n  if (isPromise(transformedValue)) {\n    throw new Error('`transform` function must be synchronous, but the transform on path `' + path + '` returned a promise.');\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction omitDeselectedFields(self, json) {\n  const schema = self.$__schema;\n  const paths = Object.keys(schema.paths || {});\n  const cur = self._doc;\n\n  if (!cur) {\n    return json;\n  }\n\n  let selected = self.$__.selected;\n  if (selected === void 0) {\n    selected = {};\n    queryhelpers.applyPaths(selected, schema);\n  }\n  if (selected == null || Object.keys(selected).length === 0) {\n    return json;\n  }\n\n  for (const path of paths) {\n    if (selected[path] != null && !selected[path]) {\n      delete json[path];\n    }\n  }\n\n  return json;\n}\n\n/**\n * The return value of this method is used in calls to JSON.stringify(doc).\n *\n * This method accepts the same options as [Document#toObject](#document_Document-toObject). To apply the options to every document of your schema by default, set your [schemas](#schema_Schema) `toJSON` option to the same argument.\n *\n *     schema.set('toJSON', { virtuals: true })\n *\n * See [schema options](/docs/guide.html#toJSON) for details.\n *\n * @param {Object} options\n * @return {Object}\n * @see Document#toObject #document_Document-toObject\n * @see JSON.stringify() in JavaScript https://thecodebarbarian.com/the-80-20-guide-to-json-stringify-in-javascript.html\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.toJSON = function(options) {\n  return this.$toObject(options, true);\n};\n\n/**\n * If this document is a subdocument or populated document, returns the document's\n * parent. Returns `undefined` otherwise.\n *\n * @api public\n * @method parent\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.parent = function() {\n  return this.$__.parent;\n};\n\n/**\n * Alias for `parent()`. If this document is a subdocument or populated\n * document, returns the document's parent. Returns `undefined` otherwise.\n *\n * @api public\n * @method $parent\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$parent = Document.prototype.parent;\n\n/**\n * Helper for console.log\n *\n * @api public\n * @method inspect\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.inspect = function(options) {\n  const isPOJO = utils.isPOJO(options);\n  let opts;\n  if (isPOJO) {\n    opts = options;\n    opts.minimize = false;\n  }\n  const ret = this.toObject(opts);\n\n  if (ret == null) {\n    // If `toObject()` returns null, `this` is still an object, so if `inspect()`\n    // prints out null this can cause some serious confusion. See gh-7942.\n    return 'MongooseDocument { ' + ret + ' }';\n  }\n\n  return ret;\n};\n\nif (inspect.custom) {\n  /*!\n  * Avoid Node deprecation warning DEP0079\n  */\n\n  Document.prototype[inspect.custom] = Document.prototype.inspect;\n}\n\n/**\n * Helper for console.log\n *\n * @api public\n * @method toString\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.toString = function() {\n  const ret = this.inspect();\n  if (typeof ret === 'string') {\n    return ret;\n  }\n  return inspect(ret);\n};\n\n/**\n * Returns true if this document is equal to another document.\n *\n * Documents are considered equal when they have matching `_id`s, unless neither\n * document has an `_id`, in which case this function falls back to using\n * `deepEqual()`.\n *\n * @param {Document} doc a document to compare\n * @return {Boolean}\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.equals = function(doc) {\n  if (!doc) {\n    return false;\n  }\n\n  const tid = this.$__getValue('_id');\n  const docid = doc.$__ != null ? doc.$__getValue('_id') : doc;\n  if (!tid && !docid) {\n    return deepEqual(this, doc);\n  }\n  return tid && tid.equals\n    ? tid.equals(docid)\n    : tid === docid;\n};\n\n/**\n * Populates document references, executing the `callback` when complete.\n * If you want to use promises instead, use this function with\n * [`execPopulate()`](#document_Document-execPopulate)\n *\n * ####Example:\n *\n *     doc\n *     .populate('company')\n *     .populate({\n *       path: 'notes',\n *       match: /airline/,\n *       select: 'text',\n *       model: 'modelName'\n *       options: opts\n *     }, function (err, user) {\n *       assert(doc._id === user._id) // the document itself is passed\n *     })\n *\n *     // summary\n *     doc.populate(path)                   // not executed\n *     doc.populate(options);               // not executed\n *     doc.populate(path, callback)         // executed\n *     doc.populate(options, callback);     // executed\n *     doc.populate(callback);              // executed\n *     doc.populate(options).execPopulate() // executed, returns promise\n *\n *\n * ####NOTE:\n *\n * Population does not occur unless a `callback` is passed *or* you explicitly\n * call `execPopulate()`.\n * Passing the same path a second time will overwrite the previous path options.\n * See [Model.populate()](#model_Model.populate) for explaination of options.\n *\n * @see Model.populate #model_Model.populate\n * @see Document.execPopulate #document_Document-execPopulate\n * @param {String|Object} [path] The path to populate or an options object\n * @param {Function} [callback] When passed, population is invoked\n * @api public\n * @return {Document} this\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.populate = function populate() {\n  if (arguments.length === 0) {\n    return this;\n  }\n\n  const pop = this.$__.populate || (this.$__.populate = {});\n  const args = utils.args(arguments);\n  let fn;\n\n  if (typeof args[args.length - 1] === 'function') {\n    fn = args.pop();\n  }\n\n  // allow `doc.populate(callback)`\n  if (args.length) {\n    // use hash to remove duplicate paths\n    const res = utils.populate.apply(null, args);\n    for (const populateOptions of res) {\n      pop[populateOptions.path] = populateOptions;\n    }\n  }\n\n  if (fn) {\n    const paths = utils.object.vals(pop);\n    this.$__.populate = undefined;\n    let topLevelModel = this.constructor;\n    if (this.$__isNested) {\n      topLevelModel = this.$__[scopeSymbol].constructor;\n      const nestedPath = this.$__.nestedPath;\n      paths.forEach(function(populateOptions) {\n        populateOptions.path = nestedPath + '.' + populateOptions.path;\n      });\n    }\n\n    // Use `$session()` by default if the document has an associated session\n    // See gh-6754\n    if (this.$session() != null) {\n      const session = this.$session();\n      paths.forEach(path => {\n        if (path.options == null) {\n          path.options = { session: session };\n          return;\n        }\n        if (!('session' in path.options)) {\n          path.options.session = session;\n        }\n      });\n    }\n\n    topLevelModel.populate(this, paths, fn);\n  }\n\n  return this;\n};\n\n/**\n * Gets all populated documents associated with this document.\n *\n * @api public\n * @return {Array<Document>} array of populated documents. Empty array if there are no populated documents associated with this document.\n * @memberOf Document\n * @instance\n */\nDocument.prototype.$getPopulatedDocs = function $getPopulatedDocs() {\n  let keys = [];\n  if (this.$__.populated != null) {\n    keys = keys.concat(Object.keys(this.$__.populated));\n  }\n  if (this.$$populatedVirtuals != null) {\n    keys = keys.concat(Object.keys(this.$$populatedVirtuals));\n  }\n  let result = [];\n  for (const key of keys) {\n    const value = this.get(key);\n    if (Array.isArray(value)) {\n      result = result.concat(value);\n    } else if (value instanceof Document) {\n      result.push(value);\n    }\n  }\n  return result;\n};\n\n/**\n * Explicitly executes population and returns a promise. Useful for promises integration.\n *\n * ####Example:\n *\n *     const promise = doc.\n *       populate('company').\n *       populate({\n *         path: 'notes',\n *         match: /airline/,\n *         select: 'text',\n *         model: 'modelName'\n *         options: opts\n *       }).\n *       execPopulate();\n *\n *     // summary\n *     doc.execPopulate().then(resolve, reject);\n *\n *   // you can also use doc.execPopulate(options) as a shorthand for\n *   // doc.populate(options).execPopulate()\n *\n *\n * ####Example:\n *   const promise = doc.execPopulate({ path: 'company', select: 'employees' });\n *\n *   // summary\n *   promise.then(resolve,reject);\n *\n * @see Document.populate #document_Document-populate\n * @api public\n * @param {Function} [callback] optional callback. If specified, a promise will **not** be returned\n * @return {Promise} promise that resolves to the document when population is done\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.execPopulate = function(callback) {\n  const isUsingShorthand = callback != null && typeof callback !== 'function';\n  if (isUsingShorthand) {\n    return this.populate.apply(this, arguments).execPopulate();\n  }\n\n  return promiseOrCallback(callback, cb => {\n    this.populate(cb);\n  }, this.constructor.events);\n};\n\n/**\n * Gets _id(s) used during population of the given `path`.\n *\n * ####Example:\n *\n *     Model.findOne().populate('author').exec(function (err, doc) {\n *       console.log(doc.author.name)         // Dr.Seuss\n *       console.log(doc.populated('author')) // '5144cf8050f071d979c118a7'\n *     })\n *\n * If the path was not populated, returns `undefined`.\n *\n * @param {String} path\n * @return {Array|ObjectId|Number|Buffer|String|undefined}\n * @memberOf Document\n * @instance\n * @api public\n */\n\nDocument.prototype.populated = function(path, val, options) {\n  // val and options are internal\n  if (val == null || val === true) {\n    if (!this.$__.populated) {\n      return undefined;\n    }\n\n    // Map paths can be populated with either `path.$*` or just `path`\n    const _path = path.endsWith('.$*') ? path.replace(/\\.\\$\\*$/, '') : path;\n\n    const v = this.$__.populated[_path];\n    if (v) {\n      return val === true ? v : v.value;\n    }\n    return undefined;\n  }\n\n  this.$__.populated || (this.$__.populated = {});\n  this.$__.populated[path] = { value: val, options: options };\n\n  // If this was a nested populate, make sure each populated doc knows\n  // about its populated children (gh-7685)\n  const pieces = path.split('.');\n  for (let i = 0; i < pieces.length - 1; ++i) {\n    const subpath = pieces.slice(0, i + 1).join('.');\n    const subdoc = this.get(subpath);\n    if (subdoc != null && subdoc.$__ != null && this.populated(subpath)) {\n      const rest = pieces.slice(i + 1).join('.');\n      subdoc.populated(rest, val, options);\n      // No need to continue because the above recursion should take care of\n      // marking the rest of the docs as populated\n      break;\n    }\n  }\n\n  return val;\n};\n\n/**\n * Takes a populated field and returns it to its unpopulated state.\n *\n * ####Example:\n *\n *     Model.findOne().populate('author').exec(function (err, doc) {\n *       console.log(doc.author.name); // Dr.Seuss\n *       console.log(doc.depopulate('author'));\n *       console.log(doc.author); // '5144cf8050f071d979c118a7'\n *     })\n *\n * If the path was not populated, this is a no-op.\n *\n * @param {String} path\n * @return {Document} this\n * @see Document.populate #document_Document-populate\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.depopulate = function(path) {\n  if (typeof path === 'string') {\n    path = path.split(' ');\n  }\n\n  let populatedIds;\n  const virtualKeys = this.$$populatedVirtuals ? Object.keys(this.$$populatedVirtuals) : [];\n  const populated = get(this, '$__.populated', {});\n\n  if (arguments.length === 0) {\n    // Depopulate all\n    for (const virtualKey of virtualKeys) {\n      delete this.$$populatedVirtuals[virtualKey];\n      delete this._doc[virtualKey];\n      delete populated[virtualKey];\n    }\n\n    const keys = Object.keys(populated);\n\n    for (const key of keys) {\n      populatedIds = this.populated(key);\n      if (!populatedIds) {\n        continue;\n      }\n      delete populated[key];\n      this.$set(key, populatedIds);\n    }\n    return this;\n  }\n\n  for (const singlePath of path) {\n    populatedIds = this.populated(singlePath);\n    delete populated[singlePath];\n\n    if (virtualKeys.indexOf(singlePath) !== -1) {\n      delete this.$$populatedVirtuals[singlePath];\n      delete this._doc[singlePath];\n    } else if (populatedIds) {\n      this.$set(singlePath, populatedIds);\n    }\n  }\n  return this;\n};\n\n\n/**\n * Returns the full path to this document.\n *\n * @param {String} [path]\n * @return {String}\n * @api private\n * @method $__fullPath\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__fullPath = function(path) {\n  // overridden in SubDocuments\n  return path || '';\n};\n\n/**\n * Returns the changes that happened to the document\n * in the format that will be sent to MongoDB.\n *\n * #### Example:\n *\n *     const userSchema = new Schema({\n *       name: String,\n *       age: Number,\n *       country: String\n *     });\n *     const User = mongoose.model('User', userSchema);\n *     const user = await User.create({\n *       name: 'Hafez',\n *       age: 25,\n *       country: 'Egypt'\n *     });\n *\n *     // returns an empty object, no changes happened yet\n *     user.getChanges(); // { }\n *\n *     user.country = undefined;\n *     user.age = 26;\n *\n *     user.getChanges(); // { $set: { age: 26 }, { $unset: { country: 1 } } }\n *\n *     await user.save();\n *\n *     user.getChanges(); // { }\n *\n * Modifying the object that `getChanges()` returns does not affect the document's\n * change tracking state. Even if you `delete user.getChanges().$set`, Mongoose\n * will still send a `$set` to the server.\n *\n * @return {Object}\n * @api public\n * @method getChanges\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.getChanges = function() {\n  const delta = this.$__delta();\n  const changes = delta ? delta[1] : {};\n  return changes;\n};\n\n/*!\n * Module exports.\n */\n\nDocument.ValidationError = ValidationError;\nmodule.exports = exports = Document;\n"]},"metadata":{},"sourceType":"script"}